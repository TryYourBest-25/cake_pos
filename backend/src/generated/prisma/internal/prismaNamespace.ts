/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
export const prismaVersion: PrismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  account: 'account',
  category: 'category',
  customer: 'customer',
  discount: 'discount',
  employee: 'employee',
  manager: 'manager',
  membership_type: 'membership_type',
  order: 'order',
  order_discount: 'order_discount',
  order_product: 'order_product',
  payment: 'payment',
  payment_method: 'payment_method',
  product: 'product',
  product_price: 'product_price',
  product_size: 'product_size',
  role: 'role',
  store: 'store'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "account" | "category" | "customer" | "discount" | "employee" | "manager" | "membership_type" | "order" | "order_discount" | "order_product" | "payment" | "payment_method" | "product" | "product_price" | "product_size" | "role" | "store"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    account: {
      payload: Prisma.$accountPayload<ExtArgs>
      fields: Prisma.accountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.accountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.accountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>
        }
        findFirst: {
          args: Prisma.accountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.accountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>
        }
        findMany: {
          args: Prisma.accountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>[]
        }
        create: {
          args: Prisma.accountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>
        }
        createMany: {
          args: Prisma.accountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.accountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>[]
        }
        delete: {
          args: Prisma.accountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>
        }
        update: {
          args: Prisma.accountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>
        }
        deleteMany: {
          args: Prisma.accountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.accountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.accountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>[]
        }
        upsert: {
          args: Prisma.accountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$accountPayload>
        }
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>
        }
        groupBy: {
          args: Prisma.accountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.accountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number
        }
      }
    }
    category: {
      payload: Prisma.$categoryPayload<ExtArgs>
      fields: Prisma.categoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.categoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>
        }
        findFirst: {
          args: Prisma.categoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>
        }
        findMany: {
          args: Prisma.categoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>[]
        }
        create: {
          args: Prisma.categoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>
        }
        createMany: {
          args: Prisma.categoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.categoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>[]
        }
        delete: {
          args: Prisma.categoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>
        }
        update: {
          args: Prisma.categoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>
        }
        deleteMany: {
          args: Prisma.categoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.categoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.categoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>[]
        }
        upsert: {
          args: Prisma.categoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoryPayload>
        }
        aggregate: {
          args: Prisma.CategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCategory>
        }
        groupBy: {
          args: Prisma.categoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.categoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoryCountAggregateOutputType> | number
        }
      }
    }
    customer: {
      payload: Prisma.$customerPayload<ExtArgs>
      fields: Prisma.customerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.customerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.customerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>
        }
        findFirst: {
          args: Prisma.customerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.customerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>
        }
        findMany: {
          args: Prisma.customerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>[]
        }
        create: {
          args: Prisma.customerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>
        }
        createMany: {
          args: Prisma.customerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.customerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>[]
        }
        delete: {
          args: Prisma.customerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>
        }
        update: {
          args: Prisma.customerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>
        }
        deleteMany: {
          args: Prisma.customerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.customerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.customerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>[]
        }
        upsert: {
          args: Prisma.customerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customerPayload>
        }
        aggregate: {
          args: Prisma.CustomerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCustomer>
        }
        groupBy: {
          args: Prisma.customerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CustomerGroupByOutputType>[]
        }
        count: {
          args: Prisma.customerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CustomerCountAggregateOutputType> | number
        }
      }
    }
    discount: {
      payload: Prisma.$discountPayload<ExtArgs>
      fields: Prisma.discountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.discountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.discountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>
        }
        findFirst: {
          args: Prisma.discountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.discountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>
        }
        findMany: {
          args: Prisma.discountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>[]
        }
        create: {
          args: Prisma.discountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>
        }
        createMany: {
          args: Prisma.discountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.discountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>[]
        }
        delete: {
          args: Prisma.discountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>
        }
        update: {
          args: Prisma.discountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>
        }
        deleteMany: {
          args: Prisma.discountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.discountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.discountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>[]
        }
        upsert: {
          args: Prisma.discountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$discountPayload>
        }
        aggregate: {
          args: Prisma.DiscountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDiscount>
        }
        groupBy: {
          args: Prisma.discountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DiscountGroupByOutputType>[]
        }
        count: {
          args: Prisma.discountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DiscountCountAggregateOutputType> | number
        }
      }
    }
    employee: {
      payload: Prisma.$employeePayload<ExtArgs>
      fields: Prisma.employeeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.employeeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.employeeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        findFirst: {
          args: Prisma.employeeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.employeeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        findMany: {
          args: Prisma.employeeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>[]
        }
        create: {
          args: Prisma.employeeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        createMany: {
          args: Prisma.employeeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.employeeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>[]
        }
        delete: {
          args: Prisma.employeeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        update: {
          args: Prisma.employeeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        deleteMany: {
          args: Prisma.employeeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.employeeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.employeeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>[]
        }
        upsert: {
          args: Prisma.employeeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        aggregate: {
          args: Prisma.EmployeeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEmployee>
        }
        groupBy: {
          args: Prisma.employeeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmployeeGroupByOutputType>[]
        }
        count: {
          args: Prisma.employeeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmployeeCountAggregateOutputType> | number
        }
      }
    }
    manager: {
      payload: Prisma.$managerPayload<ExtArgs>
      fields: Prisma.managerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.managerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.managerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>
        }
        findFirst: {
          args: Prisma.managerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.managerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>
        }
        findMany: {
          args: Prisma.managerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>[]
        }
        create: {
          args: Prisma.managerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>
        }
        createMany: {
          args: Prisma.managerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.managerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>[]
        }
        delete: {
          args: Prisma.managerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>
        }
        update: {
          args: Prisma.managerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>
        }
        deleteMany: {
          args: Prisma.managerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.managerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.managerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>[]
        }
        upsert: {
          args: Prisma.managerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$managerPayload>
        }
        aggregate: {
          args: Prisma.ManagerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateManager>
        }
        groupBy: {
          args: Prisma.managerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManagerGroupByOutputType>[]
        }
        count: {
          args: Prisma.managerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManagerCountAggregateOutputType> | number
        }
      }
    }
    membership_type: {
      payload: Prisma.$membership_typePayload<ExtArgs>
      fields: Prisma.membership_typeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.membership_typeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.membership_typeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>
        }
        findFirst: {
          args: Prisma.membership_typeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.membership_typeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>
        }
        findMany: {
          args: Prisma.membership_typeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>[]
        }
        create: {
          args: Prisma.membership_typeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>
        }
        createMany: {
          args: Prisma.membership_typeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.membership_typeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>[]
        }
        delete: {
          args: Prisma.membership_typeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>
        }
        update: {
          args: Prisma.membership_typeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>
        }
        deleteMany: {
          args: Prisma.membership_typeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.membership_typeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.membership_typeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>[]
        }
        upsert: {
          args: Prisma.membership_typeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$membership_typePayload>
        }
        aggregate: {
          args: Prisma.Membership_typeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMembership_type>
        }
        groupBy: {
          args: Prisma.membership_typeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Membership_typeGroupByOutputType>[]
        }
        count: {
          args: Prisma.membership_typeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Membership_typeCountAggregateOutputType> | number
        }
      }
    }
    order: {
      payload: Prisma.$orderPayload<ExtArgs>
      fields: Prisma.orderFieldRefs
      operations: {
        findUnique: {
          args: Prisma.orderFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.orderFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>
        }
        findFirst: {
          args: Prisma.orderFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.orderFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>
        }
        findMany: {
          args: Prisma.orderFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>[]
        }
        create: {
          args: Prisma.orderCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>
        }
        createMany: {
          args: Prisma.orderCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.orderCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>[]
        }
        delete: {
          args: Prisma.orderDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>
        }
        update: {
          args: Prisma.orderUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>
        }
        deleteMany: {
          args: Prisma.orderDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.orderUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.orderUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>[]
        }
        upsert: {
          args: Prisma.orderUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$orderPayload>
        }
        aggregate: {
          args: Prisma.OrderAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrder>
        }
        groupBy: {
          args: Prisma.orderGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderGroupByOutputType>[]
        }
        count: {
          args: Prisma.orderCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderCountAggregateOutputType> | number
        }
      }
    }
    order_discount: {
      payload: Prisma.$order_discountPayload<ExtArgs>
      fields: Prisma.order_discountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.order_discountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.order_discountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>
        }
        findFirst: {
          args: Prisma.order_discountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.order_discountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>
        }
        findMany: {
          args: Prisma.order_discountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>[]
        }
        create: {
          args: Prisma.order_discountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>
        }
        createMany: {
          args: Prisma.order_discountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.order_discountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>[]
        }
        delete: {
          args: Prisma.order_discountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>
        }
        update: {
          args: Prisma.order_discountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>
        }
        deleteMany: {
          args: Prisma.order_discountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.order_discountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.order_discountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>[]
        }
        upsert: {
          args: Prisma.order_discountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_discountPayload>
        }
        aggregate: {
          args: Prisma.Order_discountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrder_discount>
        }
        groupBy: {
          args: Prisma.order_discountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Order_discountGroupByOutputType>[]
        }
        count: {
          args: Prisma.order_discountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Order_discountCountAggregateOutputType> | number
        }
      }
    }
    order_product: {
      payload: Prisma.$order_productPayload<ExtArgs>
      fields: Prisma.order_productFieldRefs
      operations: {
        findUnique: {
          args: Prisma.order_productFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.order_productFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>
        }
        findFirst: {
          args: Prisma.order_productFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.order_productFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>
        }
        findMany: {
          args: Prisma.order_productFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>[]
        }
        create: {
          args: Prisma.order_productCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>
        }
        createMany: {
          args: Prisma.order_productCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.order_productCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>[]
        }
        delete: {
          args: Prisma.order_productDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>
        }
        update: {
          args: Prisma.order_productUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>
        }
        deleteMany: {
          args: Prisma.order_productDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.order_productUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.order_productUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>[]
        }
        upsert: {
          args: Prisma.order_productUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_productPayload>
        }
        aggregate: {
          args: Prisma.Order_productAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrder_product>
        }
        groupBy: {
          args: Prisma.order_productGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Order_productGroupByOutputType>[]
        }
        count: {
          args: Prisma.order_productCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Order_productCountAggregateOutputType> | number
        }
      }
    }
    payment: {
      payload: Prisma.$paymentPayload<ExtArgs>
      fields: Prisma.paymentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.paymentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.paymentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>
        }
        findFirst: {
          args: Prisma.paymentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.paymentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>
        }
        findMany: {
          args: Prisma.paymentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>[]
        }
        create: {
          args: Prisma.paymentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>
        }
        createMany: {
          args: Prisma.paymentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.paymentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>[]
        }
        delete: {
          args: Prisma.paymentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>
        }
        update: {
          args: Prisma.paymentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>
        }
        deleteMany: {
          args: Prisma.paymentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.paymentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.paymentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>[]
        }
        upsert: {
          args: Prisma.paymentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentPayload>
        }
        aggregate: {
          args: Prisma.PaymentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePayment>
        }
        groupBy: {
          args: Prisma.paymentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentGroupByOutputType>[]
        }
        count: {
          args: Prisma.paymentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentCountAggregateOutputType> | number
        }
      }
    }
    payment_method: {
      payload: Prisma.$payment_methodPayload<ExtArgs>
      fields: Prisma.payment_methodFieldRefs
      operations: {
        findUnique: {
          args: Prisma.payment_methodFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.payment_methodFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>
        }
        findFirst: {
          args: Prisma.payment_methodFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.payment_methodFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>
        }
        findMany: {
          args: Prisma.payment_methodFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>[]
        }
        create: {
          args: Prisma.payment_methodCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>
        }
        createMany: {
          args: Prisma.payment_methodCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.payment_methodCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>[]
        }
        delete: {
          args: Prisma.payment_methodDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>
        }
        update: {
          args: Prisma.payment_methodUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>
        }
        deleteMany: {
          args: Prisma.payment_methodDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.payment_methodUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.payment_methodUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>[]
        }
        upsert: {
          args: Prisma.payment_methodUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_methodPayload>
        }
        aggregate: {
          args: Prisma.Payment_methodAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePayment_method>
        }
        groupBy: {
          args: Prisma.payment_methodGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Payment_methodGroupByOutputType>[]
        }
        count: {
          args: Prisma.payment_methodCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Payment_methodCountAggregateOutputType> | number
        }
      }
    }
    product: {
      payload: Prisma.$productPayload<ExtArgs>
      fields: Prisma.productFieldRefs
      operations: {
        findUnique: {
          args: Prisma.productFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.productFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>
        }
        findFirst: {
          args: Prisma.productFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.productFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>
        }
        findMany: {
          args: Prisma.productFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>[]
        }
        create: {
          args: Prisma.productCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>
        }
        createMany: {
          args: Prisma.productCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.productCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>[]
        }
        delete: {
          args: Prisma.productDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>
        }
        update: {
          args: Prisma.productUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>
        }
        deleteMany: {
          args: Prisma.productDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.productUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.productUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>[]
        }
        upsert: {
          args: Prisma.productUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productPayload>
        }
        aggregate: {
          args: Prisma.ProductAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProduct>
        }
        groupBy: {
          args: Prisma.productGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductGroupByOutputType>[]
        }
        count: {
          args: Prisma.productCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductCountAggregateOutputType> | number
        }
      }
    }
    product_price: {
      payload: Prisma.$product_pricePayload<ExtArgs>
      fields: Prisma.product_priceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.product_priceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.product_priceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>
        }
        findFirst: {
          args: Prisma.product_priceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.product_priceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>
        }
        findMany: {
          args: Prisma.product_priceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>[]
        }
        create: {
          args: Prisma.product_priceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>
        }
        createMany: {
          args: Prisma.product_priceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.product_priceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>[]
        }
        delete: {
          args: Prisma.product_priceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>
        }
        update: {
          args: Prisma.product_priceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>
        }
        deleteMany: {
          args: Prisma.product_priceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.product_priceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.product_priceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>[]
        }
        upsert: {
          args: Prisma.product_priceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_pricePayload>
        }
        aggregate: {
          args: Prisma.Product_priceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProduct_price>
        }
        groupBy: {
          args: Prisma.product_priceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Product_priceGroupByOutputType>[]
        }
        count: {
          args: Prisma.product_priceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Product_priceCountAggregateOutputType> | number
        }
      }
    }
    product_size: {
      payload: Prisma.$product_sizePayload<ExtArgs>
      fields: Prisma.product_sizeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.product_sizeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.product_sizeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>
        }
        findFirst: {
          args: Prisma.product_sizeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.product_sizeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>
        }
        findMany: {
          args: Prisma.product_sizeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>[]
        }
        create: {
          args: Prisma.product_sizeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>
        }
        createMany: {
          args: Prisma.product_sizeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.product_sizeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>[]
        }
        delete: {
          args: Prisma.product_sizeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>
        }
        update: {
          args: Prisma.product_sizeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>
        }
        deleteMany: {
          args: Prisma.product_sizeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.product_sizeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.product_sizeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>[]
        }
        upsert: {
          args: Prisma.product_sizeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_sizePayload>
        }
        aggregate: {
          args: Prisma.Product_sizeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProduct_size>
        }
        groupBy: {
          args: Prisma.product_sizeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Product_sizeGroupByOutputType>[]
        }
        count: {
          args: Prisma.product_sizeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Product_sizeCountAggregateOutputType> | number
        }
      }
    }
    role: {
      payload: Prisma.$rolePayload<ExtArgs>
      fields: Prisma.roleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.roleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.roleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>
        }
        findFirst: {
          args: Prisma.roleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.roleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>
        }
        findMany: {
          args: Prisma.roleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>[]
        }
        create: {
          args: Prisma.roleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>
        }
        createMany: {
          args: Prisma.roleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.roleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>[]
        }
        delete: {
          args: Prisma.roleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>
        }
        update: {
          args: Prisma.roleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>
        }
        deleteMany: {
          args: Prisma.roleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.roleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.roleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>[]
        }
        upsert: {
          args: Prisma.roleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$rolePayload>
        }
        aggregate: {
          args: Prisma.RoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRole>
        }
        groupBy: {
          args: Prisma.roleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.roleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleCountAggregateOutputType> | number
        }
      }
    }
    store: {
      payload: Prisma.$storePayload<ExtArgs>
      fields: Prisma.storeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.storeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.storeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>
        }
        findFirst: {
          args: Prisma.storeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.storeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>
        }
        findMany: {
          args: Prisma.storeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>[]
        }
        create: {
          args: Prisma.storeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>
        }
        createMany: {
          args: Prisma.storeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.storeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>[]
        }
        delete: {
          args: Prisma.storeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>
        }
        update: {
          args: Prisma.storeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>
        }
        deleteMany: {
          args: Prisma.storeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.storeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.storeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>[]
        }
        upsert: {
          args: Prisma.storeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storePayload>
        }
        aggregate: {
          args: Prisma.StoreAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStore>
        }
        groupBy: {
          args: Prisma.storeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StoreGroupByOutputType>[]
        }
        count: {
          args: Prisma.storeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StoreCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AccountScalarFieldEnum = {
  account_id: 'account_id',
  role_id: 'role_id',
  username: 'username',
  password_hash: 'password_hash',
  is_active: 'is_active',
  is_locked: 'is_locked',
  last_login: 'last_login',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


export const CategoryScalarFieldEnum = {
  category_id: 'category_id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


export const CustomerScalarFieldEnum = {
  customer_id: 'customer_id',
  membership_type_id: 'membership_type_id',
  account_id: 'account_id',
  last_name: 'last_name',
  first_name: 'first_name',
  phone: 'phone',
  current_points: 'current_points',
  gender: 'gender',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


export const DiscountScalarFieldEnum = {
  discount_id: 'discount_id',
  name: 'name',
  description: 'description',
  coupon_code: 'coupon_code',
  discount_value: 'discount_value',
  min_required_order_value: 'min_required_order_value',
  max_discount_amount: 'max_discount_amount',
  min_required_product: 'min_required_product',
  valid_from: 'valid_from',
  valid_until: 'valid_until',
  current_uses: 'current_uses',
  max_uses: 'max_uses',
  max_uses_per_customer: 'max_uses_per_customer',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type DiscountScalarFieldEnum = (typeof DiscountScalarFieldEnum)[keyof typeof DiscountScalarFieldEnum]


export const EmployeeScalarFieldEnum = {
  employee_id: 'employee_id',
  account_id: 'account_id',
  position: 'position',
  last_name: 'last_name',
  first_name: 'first_name',
  gender: 'gender',
  phone: 'phone',
  email: 'email',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


export const ManagerScalarFieldEnum = {
  manager_id: 'manager_id',
  account_id: 'account_id',
  last_name: 'last_name',
  first_name: 'first_name',
  gender: 'gender',
  phone: 'phone',
  email: 'email',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type ManagerScalarFieldEnum = (typeof ManagerScalarFieldEnum)[keyof typeof ManagerScalarFieldEnum]


export const Membership_typeScalarFieldEnum = {
  membership_type_id: 'membership_type_id',
  type: 'type',
  discount_value: 'discount_value',
  required_point: 'required_point',
  description: 'description',
  valid_until: 'valid_until',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Membership_typeScalarFieldEnum = (typeof Membership_typeScalarFieldEnum)[keyof typeof Membership_typeScalarFieldEnum]


export const OrderScalarFieldEnum = {
  order_id: 'order_id',
  customer_id: 'customer_id',
  employee_id: 'employee_id',
  order_time: 'order_time',
  total_amount: 'total_amount',
  final_amount: 'final_amount',
  status: 'status',
  customize_note: 'customize_note',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


export const Order_discountScalarFieldEnum = {
  order_discount_id: 'order_discount_id',
  order_id: 'order_id',
  discount_id: 'discount_id',
  discount_amount: 'discount_amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Order_discountScalarFieldEnum = (typeof Order_discountScalarFieldEnum)[keyof typeof Order_discountScalarFieldEnum]


export const Order_productScalarFieldEnum = {
  order_product_id: 'order_product_id',
  order_id: 'order_id',
  product_price_id: 'product_price_id',
  quantity: 'quantity',
  option: 'option',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Order_productScalarFieldEnum = (typeof Order_productScalarFieldEnum)[keyof typeof Order_productScalarFieldEnum]


export const PaymentScalarFieldEnum = {
  payment_id: 'payment_id',
  order_id: 'order_id',
  payment_method_id: 'payment_method_id',
  status: 'status',
  amount_paid: 'amount_paid',
  change_amount: 'change_amount',
  payment_time: 'payment_time',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


export const Payment_methodScalarFieldEnum = {
  payment_method_id: 'payment_method_id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Payment_methodScalarFieldEnum = (typeof Payment_methodScalarFieldEnum)[keyof typeof Payment_methodScalarFieldEnum]


export const ProductScalarFieldEnum = {
  product_id: 'product_id',
  category_id: 'category_id',
  name: 'name',
  description: 'description',
  is_signature: 'is_signature',
  image_path: 'image_path',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


export const Product_priceScalarFieldEnum = {
  product_price_id: 'product_price_id',
  product_id: 'product_id',
  size_id: 'size_id',
  price: 'price',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Product_priceScalarFieldEnum = (typeof Product_priceScalarFieldEnum)[keyof typeof Product_priceScalarFieldEnum]


export const Product_sizeScalarFieldEnum = {
  size_id: 'size_id',
  name: 'name',
  unit: 'unit',
  quantity: 'quantity',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Product_sizeScalarFieldEnum = (typeof Product_sizeScalarFieldEnum)[keyof typeof Product_sizeScalarFieldEnum]


export const RoleScalarFieldEnum = {
  role_id: 'role_id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


export const StoreScalarFieldEnum = {
  store_id: 'store_id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  opening_time: 'opening_time',
  closing_time: 'closing_time',
  email: 'email',
  opening_date: 'opening_date',
  tax_code: 'tax_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'gender_enum'
 */
export type Enumgender_enumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'gender_enum'>
    


/**
 * Reference to a field of type 'gender_enum[]'
 */
export type ListEnumgender_enumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'gender_enum[]'>
    


/**
 * Reference to a field of type 'Decimal'
 */
export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


/**
 * Reference to a field of type 'Decimal[]'
 */
export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


/**
 * Reference to a field of type 'order_status_enum'
 */
export type Enumorder_status_enumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'order_status_enum'>
    


/**
 * Reference to a field of type 'order_status_enum[]'
 */
export type ListEnumorder_status_enumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'order_status_enum[]'>
    


/**
 * Reference to a field of type 'payment_status_enum'
 */
export type Enumpayment_status_enumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'payment_status_enum'>
    


/**
 * Reference to a field of type 'payment_status_enum[]'
 */
export type ListEnumpayment_status_enumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'payment_status_enum[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  cake_pos_db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  account?: Prisma.accountOmit
  category?: Prisma.categoryOmit
  customer?: Prisma.customerOmit
  discount?: Prisma.discountOmit
  employee?: Prisma.employeeOmit
  manager?: Prisma.managerOmit
  membership_type?: Prisma.membership_typeOmit
  order?: Prisma.orderOmit
  order_discount?: Prisma.order_discountOmit
  order_product?: Prisma.order_productOmit
  payment?: Prisma.paymentOmit
  payment_method?: Prisma.payment_methodOmit
  product?: Prisma.productOmit
  product_price?: Prisma.product_priceOmit
  product_size?: Prisma.product_sizeOmit
  role?: Prisma.roleOmit
  store?: Prisma.storeOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

