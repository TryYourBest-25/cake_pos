
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `manager` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model manager
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type managerModel = runtime.Types.Result.DefaultSelection<Prisma.$managerPayload>

export type AggregateManager = {
  _count: ManagerCountAggregateOutputType | null
  _avg: ManagerAvgAggregateOutputType | null
  _sum: ManagerSumAggregateOutputType | null
  _min: ManagerMinAggregateOutputType | null
  _max: ManagerMaxAggregateOutputType | null
}

export type ManagerAvgAggregateOutputType = {
  manager_id: number | null
  account_id: number | null
}

export type ManagerSumAggregateOutputType = {
  manager_id: number | null
  account_id: number | null
}

export type ManagerMinAggregateOutputType = {
  manager_id: number | null
  account_id: number | null
  last_name: string | null
  first_name: string | null
  gender: $Enums.gender_enum | null
  phone: string | null
  email: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ManagerMaxAggregateOutputType = {
  manager_id: number | null
  account_id: number | null
  last_name: string | null
  first_name: string | null
  gender: $Enums.gender_enum | null
  phone: string | null
  email: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ManagerCountAggregateOutputType = {
  manager_id: number
  account_id: number
  last_name: number
  first_name: number
  gender: number
  phone: number
  email: number
  created_at: number
  updated_at: number
  _all: number
}


export type ManagerAvgAggregateInputType = {
  manager_id?: true
  account_id?: true
}

export type ManagerSumAggregateInputType = {
  manager_id?: true
  account_id?: true
}

export type ManagerMinAggregateInputType = {
  manager_id?: true
  account_id?: true
  last_name?: true
  first_name?: true
  gender?: true
  phone?: true
  email?: true
  created_at?: true
  updated_at?: true
}

export type ManagerMaxAggregateInputType = {
  manager_id?: true
  account_id?: true
  last_name?: true
  first_name?: true
  gender?: true
  phone?: true
  email?: true
  created_at?: true
  updated_at?: true
}

export type ManagerCountAggregateInputType = {
  manager_id?: true
  account_id?: true
  last_name?: true
  first_name?: true
  gender?: true
  phone?: true
  email?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type ManagerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which manager to aggregate.
   */
  where?: Prisma.managerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of managers to fetch.
   */
  orderBy?: Prisma.managerOrderByWithRelationInput | Prisma.managerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.managerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` managers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` managers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned managers
  **/
  _count?: true | ManagerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ManagerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ManagerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ManagerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ManagerMaxAggregateInputType
}

export type GetManagerAggregateType<T extends ManagerAggregateArgs> = {
      [P in keyof T & keyof AggregateManager]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateManager[P]>
    : Prisma.GetScalarType<T[P], AggregateManager[P]>
}




export type managerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.managerWhereInput
  orderBy?: Prisma.managerOrderByWithAggregationInput | Prisma.managerOrderByWithAggregationInput[]
  by: Prisma.ManagerScalarFieldEnum[] | Prisma.ManagerScalarFieldEnum
  having?: Prisma.managerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ManagerCountAggregateInputType | true
  _avg?: ManagerAvgAggregateInputType
  _sum?: ManagerSumAggregateInputType
  _min?: ManagerMinAggregateInputType
  _max?: ManagerMaxAggregateInputType
}

export type ManagerGroupByOutputType = {
  manager_id: number
  account_id: number
  last_name: string
  first_name: string
  gender: $Enums.gender_enum | null
  phone: string
  email: string
  created_at: Date | null
  updated_at: Date | null
  _count: ManagerCountAggregateOutputType | null
  _avg: ManagerAvgAggregateOutputType | null
  _sum: ManagerSumAggregateOutputType | null
  _min: ManagerMinAggregateOutputType | null
  _max: ManagerMaxAggregateOutputType | null
}

type GetManagerGroupByPayload<T extends managerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ManagerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ManagerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ManagerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ManagerGroupByOutputType[P]>
      }
    >
  > 



export type managerWhereInput = {
  AND?: Prisma.managerWhereInput | Prisma.managerWhereInput[]
  OR?: Prisma.managerWhereInput[]
  NOT?: Prisma.managerWhereInput | Prisma.managerWhereInput[]
  manager_id?: Prisma.IntFilter<"manager"> | number
  account_id?: Prisma.IntFilter<"manager"> | number
  last_name?: Prisma.StringFilter<"manager"> | string
  first_name?: Prisma.StringFilter<"manager"> | string
  gender?: Prisma.Enumgender_enumNullableFilter<"manager"> | $Enums.gender_enum | null
  phone?: Prisma.StringFilter<"manager"> | string
  email?: Prisma.StringFilter<"manager"> | string
  created_at?: Prisma.DateTimeNullableFilter<"manager"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"manager"> | Date | string | null
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.accountWhereInput>
}

export type managerOrderByWithRelationInput = {
  manager_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  account?: Prisma.accountOrderByWithRelationInput
}

export type managerWhereUniqueInput = Prisma.AtLeast<{
  manager_id?: number
  account_id?: number
  phone?: string
  email?: string
  AND?: Prisma.managerWhereInput | Prisma.managerWhereInput[]
  OR?: Prisma.managerWhereInput[]
  NOT?: Prisma.managerWhereInput | Prisma.managerWhereInput[]
  last_name?: Prisma.StringFilter<"manager"> | string
  first_name?: Prisma.StringFilter<"manager"> | string
  gender?: Prisma.Enumgender_enumNullableFilter<"manager"> | $Enums.gender_enum | null
  created_at?: Prisma.DateTimeNullableFilter<"manager"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"manager"> | Date | string | null
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.accountWhereInput>
}, "manager_id" | "account_id" | "phone" | "email">

export type managerOrderByWithAggregationInput = {
  manager_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.managerCountOrderByAggregateInput
  _avg?: Prisma.managerAvgOrderByAggregateInput
  _max?: Prisma.managerMaxOrderByAggregateInput
  _min?: Prisma.managerMinOrderByAggregateInput
  _sum?: Prisma.managerSumOrderByAggregateInput
}

export type managerScalarWhereWithAggregatesInput = {
  AND?: Prisma.managerScalarWhereWithAggregatesInput | Prisma.managerScalarWhereWithAggregatesInput[]
  OR?: Prisma.managerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.managerScalarWhereWithAggregatesInput | Prisma.managerScalarWhereWithAggregatesInput[]
  manager_id?: Prisma.IntWithAggregatesFilter<"manager"> | number
  account_id?: Prisma.IntWithAggregatesFilter<"manager"> | number
  last_name?: Prisma.StringWithAggregatesFilter<"manager"> | string
  first_name?: Prisma.StringWithAggregatesFilter<"manager"> | string
  gender?: Prisma.Enumgender_enumNullableWithAggregatesFilter<"manager"> | $Enums.gender_enum | null
  phone?: Prisma.StringWithAggregatesFilter<"manager"> | string
  email?: Prisma.StringWithAggregatesFilter<"manager"> | string
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"manager"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"manager"> | Date | string | null
}

export type managerCreateInput = {
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
  account: Prisma.accountCreateNestedOneWithoutManagerInput
}

export type managerUncheckedCreateInput = {
  manager_id?: number
  account_id: number
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type managerUpdateInput = {
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  account?: Prisma.accountUpdateOneRequiredWithoutManagerNestedInput
}

export type managerUncheckedUpdateInput = {
  manager_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type managerCreateManyInput = {
  manager_id?: number
  account_id: number
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type managerUpdateManyMutationInput = {
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type managerUncheckedUpdateManyInput = {
  manager_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ManagerNullableScalarRelationFilter = {
  is?: Prisma.managerWhereInput | null
  isNot?: Prisma.managerWhereInput | null
}

export type managerCountOrderByAggregateInput = {
  manager_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type managerAvgOrderByAggregateInput = {
  manager_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
}

export type managerMaxOrderByAggregateInput = {
  manager_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type managerMinOrderByAggregateInput = {
  manager_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type managerSumOrderByAggregateInput = {
  manager_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
}

export type managerCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.managerCreateWithoutAccountInput, Prisma.managerUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.managerCreateOrConnectWithoutAccountInput
  connect?: Prisma.managerWhereUniqueInput
}

export type managerUncheckedCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.managerCreateWithoutAccountInput, Prisma.managerUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.managerCreateOrConnectWithoutAccountInput
  connect?: Prisma.managerWhereUniqueInput
}

export type managerUpdateOneWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.managerCreateWithoutAccountInput, Prisma.managerUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.managerCreateOrConnectWithoutAccountInput
  upsert?: Prisma.managerUpsertWithoutAccountInput
  disconnect?: Prisma.managerWhereInput | boolean
  delete?: Prisma.managerWhereInput | boolean
  connect?: Prisma.managerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.managerUpdateToOneWithWhereWithoutAccountInput, Prisma.managerUpdateWithoutAccountInput>, Prisma.managerUncheckedUpdateWithoutAccountInput>
}

export type managerUncheckedUpdateOneWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.managerCreateWithoutAccountInput, Prisma.managerUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.managerCreateOrConnectWithoutAccountInput
  upsert?: Prisma.managerUpsertWithoutAccountInput
  disconnect?: Prisma.managerWhereInput | boolean
  delete?: Prisma.managerWhereInput | boolean
  connect?: Prisma.managerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.managerUpdateToOneWithWhereWithoutAccountInput, Prisma.managerUpdateWithoutAccountInput>, Prisma.managerUncheckedUpdateWithoutAccountInput>
}

export type managerCreateWithoutAccountInput = {
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type managerUncheckedCreateWithoutAccountInput = {
  manager_id?: number
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type managerCreateOrConnectWithoutAccountInput = {
  where: Prisma.managerWhereUniqueInput
  create: Prisma.XOR<Prisma.managerCreateWithoutAccountInput, Prisma.managerUncheckedCreateWithoutAccountInput>
}

export type managerUpsertWithoutAccountInput = {
  update: Prisma.XOR<Prisma.managerUpdateWithoutAccountInput, Prisma.managerUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.managerCreateWithoutAccountInput, Prisma.managerUncheckedCreateWithoutAccountInput>
  where?: Prisma.managerWhereInput
}

export type managerUpdateToOneWithWhereWithoutAccountInput = {
  where?: Prisma.managerWhereInput
  data: Prisma.XOR<Prisma.managerUpdateWithoutAccountInput, Prisma.managerUncheckedUpdateWithoutAccountInput>
}

export type managerUpdateWithoutAccountInput = {
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type managerUncheckedUpdateWithoutAccountInput = {
  manager_id?: Prisma.IntFieldUpdateOperationsInput | number
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type managerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  manager_id?: boolean
  account_id?: boolean
  last_name?: boolean
  first_name?: boolean
  gender?: boolean
  phone?: boolean
  email?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["manager"]>

export type managerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  manager_id?: boolean
  account_id?: boolean
  last_name?: boolean
  first_name?: boolean
  gender?: boolean
  phone?: boolean
  email?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["manager"]>

export type managerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  manager_id?: boolean
  account_id?: boolean
  last_name?: boolean
  first_name?: boolean
  gender?: boolean
  phone?: boolean
  email?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["manager"]>

export type managerSelectScalar = {
  manager_id?: boolean
  account_id?: boolean
  last_name?: boolean
  first_name?: boolean
  gender?: boolean
  phone?: boolean
  email?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type managerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"manager_id" | "account_id" | "last_name" | "first_name" | "gender" | "phone" | "email" | "created_at" | "updated_at", ExtArgs["result"]["manager"]>
export type managerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}
export type managerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}
export type managerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}

export type $managerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "manager"
  objects: {
    account: Prisma.$accountPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    manager_id: number
    account_id: number
    last_name: string
    first_name: string
    gender: $Enums.gender_enum | null
    phone: string
    email: string
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["manager"]>
  composites: {}
}

export type managerGetPayload<S extends boolean | null | undefined | managerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$managerPayload, S>

export type managerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<managerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ManagerCountAggregateInputType | true
  }

export interface managerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['manager'], meta: { name: 'manager' } }
  /**
   * Find zero or one Manager that matches the filter.
   * @param {managerFindUniqueArgs} args - Arguments to find a Manager
   * @example
   * // Get one Manager
   * const manager = await prisma.manager.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends managerFindUniqueArgs>(args: Prisma.SelectSubset<T, managerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Manager that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {managerFindUniqueOrThrowArgs} args - Arguments to find a Manager
   * @example
   * // Get one Manager
   * const manager = await prisma.manager.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends managerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, managerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Manager that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {managerFindFirstArgs} args - Arguments to find a Manager
   * @example
   * // Get one Manager
   * const manager = await prisma.manager.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends managerFindFirstArgs>(args?: Prisma.SelectSubset<T, managerFindFirstArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Manager that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {managerFindFirstOrThrowArgs} args - Arguments to find a Manager
   * @example
   * // Get one Manager
   * const manager = await prisma.manager.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends managerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, managerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Managers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {managerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Managers
   * const managers = await prisma.manager.findMany()
   * 
   * // Get first 10 Managers
   * const managers = await prisma.manager.findMany({ take: 10 })
   * 
   * // Only select the `manager_id`
   * const managerWithManager_idOnly = await prisma.manager.findMany({ select: { manager_id: true } })
   * 
   */
  findMany<T extends managerFindManyArgs>(args?: Prisma.SelectSubset<T, managerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Manager.
   * @param {managerCreateArgs} args - Arguments to create a Manager.
   * @example
   * // Create one Manager
   * const Manager = await prisma.manager.create({
   *   data: {
   *     // ... data to create a Manager
   *   }
   * })
   * 
   */
  create<T extends managerCreateArgs>(args: Prisma.SelectSubset<T, managerCreateArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Managers.
   * @param {managerCreateManyArgs} args - Arguments to create many Managers.
   * @example
   * // Create many Managers
   * const manager = await prisma.manager.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends managerCreateManyArgs>(args?: Prisma.SelectSubset<T, managerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Managers and returns the data saved in the database.
   * @param {managerCreateManyAndReturnArgs} args - Arguments to create many Managers.
   * @example
   * // Create many Managers
   * const manager = await prisma.manager.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Managers and only return the `manager_id`
   * const managerWithManager_idOnly = await prisma.manager.createManyAndReturn({
   *   select: { manager_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends managerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, managerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Manager.
   * @param {managerDeleteArgs} args - Arguments to delete one Manager.
   * @example
   * // Delete one Manager
   * const Manager = await prisma.manager.delete({
   *   where: {
   *     // ... filter to delete one Manager
   *   }
   * })
   * 
   */
  delete<T extends managerDeleteArgs>(args: Prisma.SelectSubset<T, managerDeleteArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Manager.
   * @param {managerUpdateArgs} args - Arguments to update one Manager.
   * @example
   * // Update one Manager
   * const manager = await prisma.manager.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends managerUpdateArgs>(args: Prisma.SelectSubset<T, managerUpdateArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Managers.
   * @param {managerDeleteManyArgs} args - Arguments to filter Managers to delete.
   * @example
   * // Delete a few Managers
   * const { count } = await prisma.manager.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends managerDeleteManyArgs>(args?: Prisma.SelectSubset<T, managerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Managers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {managerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Managers
   * const manager = await prisma.manager.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends managerUpdateManyArgs>(args: Prisma.SelectSubset<T, managerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Managers and returns the data updated in the database.
   * @param {managerUpdateManyAndReturnArgs} args - Arguments to update many Managers.
   * @example
   * // Update many Managers
   * const manager = await prisma.manager.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Managers and only return the `manager_id`
   * const managerWithManager_idOnly = await prisma.manager.updateManyAndReturn({
   *   select: { manager_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends managerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, managerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Manager.
   * @param {managerUpsertArgs} args - Arguments to update or create a Manager.
   * @example
   * // Update or create a Manager
   * const manager = await prisma.manager.upsert({
   *   create: {
   *     // ... data to create a Manager
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Manager we want to update
   *   }
   * })
   */
  upsert<T extends managerUpsertArgs>(args: Prisma.SelectSubset<T, managerUpsertArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Managers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {managerCountArgs} args - Arguments to filter Managers to count.
   * @example
   * // Count the number of Managers
   * const count = await prisma.manager.count({
   *   where: {
   *     // ... the filter for the Managers we want to count
   *   }
   * })
  **/
  count<T extends managerCountArgs>(
    args?: Prisma.Subset<T, managerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ManagerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Manager.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ManagerAggregateArgs>(args: Prisma.Subset<T, ManagerAggregateArgs>): Prisma.PrismaPromise<GetManagerAggregateType<T>>

  /**
   * Group by Manager.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {managerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends managerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: managerGroupByArgs['orderBy'] }
      : { orderBy?: managerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, managerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManagerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the manager model
 */
readonly fields: managerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for manager.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__managerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.accountDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.accountDefaultArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the manager model
 */
export interface managerFieldRefs {
  readonly manager_id: Prisma.FieldRef<"manager", 'Int'>
  readonly account_id: Prisma.FieldRef<"manager", 'Int'>
  readonly last_name: Prisma.FieldRef<"manager", 'String'>
  readonly first_name: Prisma.FieldRef<"manager", 'String'>
  readonly gender: Prisma.FieldRef<"manager", 'gender_enum'>
  readonly phone: Prisma.FieldRef<"manager", 'String'>
  readonly email: Prisma.FieldRef<"manager", 'String'>
  readonly created_at: Prisma.FieldRef<"manager", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"manager", 'DateTime'>
}
    

// Custom InputTypes
/**
 * manager findUnique
 */
export type managerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * Filter, which manager to fetch.
   */
  where: Prisma.managerWhereUniqueInput
}

/**
 * manager findUniqueOrThrow
 */
export type managerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * Filter, which manager to fetch.
   */
  where: Prisma.managerWhereUniqueInput
}

/**
 * manager findFirst
 */
export type managerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * Filter, which manager to fetch.
   */
  where?: Prisma.managerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of managers to fetch.
   */
  orderBy?: Prisma.managerOrderByWithRelationInput | Prisma.managerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for managers.
   */
  cursor?: Prisma.managerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` managers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` managers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of managers.
   */
  distinct?: Prisma.ManagerScalarFieldEnum | Prisma.ManagerScalarFieldEnum[]
}

/**
 * manager findFirstOrThrow
 */
export type managerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * Filter, which manager to fetch.
   */
  where?: Prisma.managerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of managers to fetch.
   */
  orderBy?: Prisma.managerOrderByWithRelationInput | Prisma.managerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for managers.
   */
  cursor?: Prisma.managerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` managers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` managers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of managers.
   */
  distinct?: Prisma.ManagerScalarFieldEnum | Prisma.ManagerScalarFieldEnum[]
}

/**
 * manager findMany
 */
export type managerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * Filter, which managers to fetch.
   */
  where?: Prisma.managerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of managers to fetch.
   */
  orderBy?: Prisma.managerOrderByWithRelationInput | Prisma.managerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing managers.
   */
  cursor?: Prisma.managerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` managers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` managers.
   */
  skip?: number
  distinct?: Prisma.ManagerScalarFieldEnum | Prisma.ManagerScalarFieldEnum[]
}

/**
 * manager create
 */
export type managerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * The data needed to create a manager.
   */
  data: Prisma.XOR<Prisma.managerCreateInput, Prisma.managerUncheckedCreateInput>
}

/**
 * manager createMany
 */
export type managerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many managers.
   */
  data: Prisma.managerCreateManyInput | Prisma.managerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * manager createManyAndReturn
 */
export type managerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * The data used to create many managers.
   */
  data: Prisma.managerCreateManyInput | Prisma.managerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * manager update
 */
export type managerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * The data needed to update a manager.
   */
  data: Prisma.XOR<Prisma.managerUpdateInput, Prisma.managerUncheckedUpdateInput>
  /**
   * Choose, which manager to update.
   */
  where: Prisma.managerWhereUniqueInput
}

/**
 * manager updateMany
 */
export type managerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update managers.
   */
  data: Prisma.XOR<Prisma.managerUpdateManyMutationInput, Prisma.managerUncheckedUpdateManyInput>
  /**
   * Filter which managers to update
   */
  where?: Prisma.managerWhereInput
  /**
   * Limit how many managers to update.
   */
  limit?: number
}

/**
 * manager updateManyAndReturn
 */
export type managerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * The data used to update managers.
   */
  data: Prisma.XOR<Prisma.managerUpdateManyMutationInput, Prisma.managerUncheckedUpdateManyInput>
  /**
   * Filter which managers to update
   */
  where?: Prisma.managerWhereInput
  /**
   * Limit how many managers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * manager upsert
 */
export type managerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * The filter to search for the manager to update in case it exists.
   */
  where: Prisma.managerWhereUniqueInput
  /**
   * In case the manager found by the `where` argument doesn't exist, create a new manager with this data.
   */
  create: Prisma.XOR<Prisma.managerCreateInput, Prisma.managerUncheckedCreateInput>
  /**
   * In case the manager was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.managerUpdateInput, Prisma.managerUncheckedUpdateInput>
}

/**
 * manager delete
 */
export type managerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  /**
   * Filter which manager to delete.
   */
  where: Prisma.managerWhereUniqueInput
}

/**
 * manager deleteMany
 */
export type managerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which managers to delete
   */
  where?: Prisma.managerWhereInput
  /**
   * Limit how many managers to delete.
   */
  limit?: number
}

/**
 * manager without action
 */
export type managerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
}
