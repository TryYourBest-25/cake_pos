/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `product` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model product
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type productModel = runtime.Types.Result.DefaultSelection<Prisma.$productPayload>

export type AggregateProduct = {
  _count: ProductCountAggregateOutputType | null
  _avg: ProductAvgAggregateOutputType | null
  _sum: ProductSumAggregateOutputType | null
  _min: ProductMinAggregateOutputType | null
  _max: ProductMaxAggregateOutputType | null
}

export type ProductAvgAggregateOutputType = {
  product_id: number | null
  category_id: number | null
}

export type ProductSumAggregateOutputType = {
  product_id: number | null
  category_id: number | null
}

export type ProductMinAggregateOutputType = {
  product_id: number | null
  category_id: number | null
  name: string | null
  description: string | null
  is_signature: boolean | null
  image_path: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ProductMaxAggregateOutputType = {
  product_id: number | null
  category_id: number | null
  name: string | null
  description: string | null
  is_signature: boolean | null
  image_path: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ProductCountAggregateOutputType = {
  product_id: number
  category_id: number
  name: number
  description: number
  is_signature: number
  image_path: number
  created_at: number
  updated_at: number
  _all: number
}


export type ProductAvgAggregateInputType = {
  product_id?: true
  category_id?: true
}

export type ProductSumAggregateInputType = {
  product_id?: true
  category_id?: true
}

export type ProductMinAggregateInputType = {
  product_id?: true
  category_id?: true
  name?: true
  description?: true
  is_signature?: true
  image_path?: true
  created_at?: true
  updated_at?: true
}

export type ProductMaxAggregateInputType = {
  product_id?: true
  category_id?: true
  name?: true
  description?: true
  is_signature?: true
  image_path?: true
  created_at?: true
  updated_at?: true
}

export type ProductCountAggregateInputType = {
  product_id?: true
  category_id?: true
  name?: true
  description?: true
  is_signature?: true
  image_path?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type ProductAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which product to aggregate.
   */
  where?: Prisma.productWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of products to fetch.
   */
  orderBy?: Prisma.productOrderByWithRelationInput | Prisma.productOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.productWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned products
  **/
  _count?: true | ProductCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductMaxAggregateInputType
}

export type GetProductAggregateType<T extends ProductAggregateArgs> = {
      [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProduct[P]>
    : Prisma.GetScalarType<T[P], AggregateProduct[P]>
}




export type productGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.productWhereInput
  orderBy?: Prisma.productOrderByWithAggregationInput | Prisma.productOrderByWithAggregationInput[]
  by: Prisma.ProductScalarFieldEnum[] | Prisma.ProductScalarFieldEnum
  having?: Prisma.productScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductCountAggregateInputType | true
  _avg?: ProductAvgAggregateInputType
  _sum?: ProductSumAggregateInputType
  _min?: ProductMinAggregateInputType
  _max?: ProductMaxAggregateInputType
}

export type ProductGroupByOutputType = {
  product_id: number
  category_id: number
  name: string
  description: string | null
  is_signature: boolean | null
  image_path: string | null
  created_at: Date | null
  updated_at: Date | null
  _count: ProductCountAggregateOutputType | null
  _avg: ProductAvgAggregateOutputType | null
  _sum: ProductSumAggregateOutputType | null
  _min: ProductMinAggregateOutputType | null
  _max: ProductMaxAggregateOutputType | null
}

type GetProductGroupByPayload<T extends productGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductGroupByOutputType[P]>
      }
    >
  > 



export type productWhereInput = {
  AND?: Prisma.productWhereInput | Prisma.productWhereInput[]
  OR?: Prisma.productWhereInput[]
  NOT?: Prisma.productWhereInput | Prisma.productWhereInput[]
  product_id?: Prisma.IntFilter<"product"> | number
  category_id?: Prisma.IntFilter<"product"> | number
  name?: Prisma.StringFilter<"product"> | string
  description?: Prisma.StringNullableFilter<"product"> | string | null
  is_signature?: Prisma.BoolNullableFilter<"product"> | boolean | null
  image_path?: Prisma.StringNullableFilter<"product"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"product"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"product"> | Date | string | null
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.categoryWhereInput>
  product_price?: Prisma.Product_priceListRelationFilter
}

export type productOrderByWithRelationInput = {
  product_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  is_signature?: Prisma.SortOrderInput | Prisma.SortOrder
  image_path?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  category?: Prisma.categoryOrderByWithRelationInput
  product_price?: Prisma.product_priceOrderByRelationAggregateInput
}

export type productWhereUniqueInput = Prisma.AtLeast<{
  product_id?: number
  name?: string
  AND?: Prisma.productWhereInput | Prisma.productWhereInput[]
  OR?: Prisma.productWhereInput[]
  NOT?: Prisma.productWhereInput | Prisma.productWhereInput[]
  category_id?: Prisma.IntFilter<"product"> | number
  description?: Prisma.StringNullableFilter<"product"> | string | null
  is_signature?: Prisma.BoolNullableFilter<"product"> | boolean | null
  image_path?: Prisma.StringNullableFilter<"product"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"product"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"product"> | Date | string | null
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.categoryWhereInput>
  product_price?: Prisma.Product_priceListRelationFilter
}, "product_id" | "name">

export type productOrderByWithAggregationInput = {
  product_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  is_signature?: Prisma.SortOrderInput | Prisma.SortOrder
  image_path?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.productCountOrderByAggregateInput
  _avg?: Prisma.productAvgOrderByAggregateInput
  _max?: Prisma.productMaxOrderByAggregateInput
  _min?: Prisma.productMinOrderByAggregateInput
  _sum?: Prisma.productSumOrderByAggregateInput
}

export type productScalarWhereWithAggregatesInput = {
  AND?: Prisma.productScalarWhereWithAggregatesInput | Prisma.productScalarWhereWithAggregatesInput[]
  OR?: Prisma.productScalarWhereWithAggregatesInput[]
  NOT?: Prisma.productScalarWhereWithAggregatesInput | Prisma.productScalarWhereWithAggregatesInput[]
  product_id?: Prisma.IntWithAggregatesFilter<"product"> | number
  category_id?: Prisma.IntWithAggregatesFilter<"product"> | number
  name?: Prisma.StringWithAggregatesFilter<"product"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"product"> | string | null
  is_signature?: Prisma.BoolNullableWithAggregatesFilter<"product"> | boolean | null
  image_path?: Prisma.StringNullableWithAggregatesFilter<"product"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"product"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"product"> | Date | string | null
}

export type productCreateInput = {
  name: string
  description?: string | null
  is_signature?: boolean | null
  image_path?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  category: Prisma.categoryCreateNestedOneWithoutProductInput
  product_price?: Prisma.product_priceCreateNestedManyWithoutProductInput
}

export type productUncheckedCreateInput = {
  product_id?: number
  category_id: number
  name: string
  description?: string | null
  is_signature?: boolean | null
  image_path?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  product_price?: Prisma.product_priceUncheckedCreateNestedManyWithoutProductInput
}

export type productUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  category?: Prisma.categoryUpdateOneRequiredWithoutProductNestedInput
  product_price?: Prisma.product_priceUpdateManyWithoutProductNestedInput
}

export type productUncheckedUpdateInput = {
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  category_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_price?: Prisma.product_priceUncheckedUpdateManyWithoutProductNestedInput
}

export type productCreateManyInput = {
  product_id?: number
  category_id: number
  name: string
  description?: string | null
  is_signature?: boolean | null
  image_path?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type productUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type productUncheckedUpdateManyInput = {
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  category_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ProductListRelationFilter = {
  every?: Prisma.productWhereInput
  some?: Prisma.productWhereInput
  none?: Prisma.productWhereInput
}

export type productOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type productCountOrderByAggregateInput = {
  product_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  is_signature?: Prisma.SortOrder
  image_path?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type productAvgOrderByAggregateInput = {
  product_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
}

export type productMaxOrderByAggregateInput = {
  product_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  is_signature?: Prisma.SortOrder
  image_path?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type productMinOrderByAggregateInput = {
  product_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  is_signature?: Prisma.SortOrder
  image_path?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type productSumOrderByAggregateInput = {
  product_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
}

export type ProductScalarRelationFilter = {
  is?: Prisma.productWhereInput
  isNot?: Prisma.productWhereInput
}

export type productCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.productCreateWithoutCategoryInput, Prisma.productUncheckedCreateWithoutCategoryInput> | Prisma.productCreateWithoutCategoryInput[] | Prisma.productUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.productCreateOrConnectWithoutCategoryInput | Prisma.productCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.productCreateManyCategoryInputEnvelope
  connect?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
}

export type productUncheckedCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.productCreateWithoutCategoryInput, Prisma.productUncheckedCreateWithoutCategoryInput> | Prisma.productCreateWithoutCategoryInput[] | Prisma.productUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.productCreateOrConnectWithoutCategoryInput | Prisma.productCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.productCreateManyCategoryInputEnvelope
  connect?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
}

export type productUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.productCreateWithoutCategoryInput, Prisma.productUncheckedCreateWithoutCategoryInput> | Prisma.productCreateWithoutCategoryInput[] | Prisma.productUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.productCreateOrConnectWithoutCategoryInput | Prisma.productCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.productUpsertWithWhereUniqueWithoutCategoryInput | Prisma.productUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.productCreateManyCategoryInputEnvelope
  set?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
  disconnect?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
  delete?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
  connect?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
  update?: Prisma.productUpdateWithWhereUniqueWithoutCategoryInput | Prisma.productUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.productUpdateManyWithWhereWithoutCategoryInput | Prisma.productUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.productScalarWhereInput | Prisma.productScalarWhereInput[]
}

export type productUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.productCreateWithoutCategoryInput, Prisma.productUncheckedCreateWithoutCategoryInput> | Prisma.productCreateWithoutCategoryInput[] | Prisma.productUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.productCreateOrConnectWithoutCategoryInput | Prisma.productCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.productUpsertWithWhereUniqueWithoutCategoryInput | Prisma.productUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.productCreateManyCategoryInputEnvelope
  set?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
  disconnect?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
  delete?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
  connect?: Prisma.productWhereUniqueInput | Prisma.productWhereUniqueInput[]
  update?: Prisma.productUpdateWithWhereUniqueWithoutCategoryInput | Prisma.productUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.productUpdateManyWithWhereWithoutCategoryInput | Prisma.productUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.productScalarWhereInput | Prisma.productScalarWhereInput[]
}

export type productCreateNestedOneWithoutProduct_priceInput = {
  create?: Prisma.XOR<Prisma.productCreateWithoutProduct_priceInput, Prisma.productUncheckedCreateWithoutProduct_priceInput>
  connectOrCreate?: Prisma.productCreateOrConnectWithoutProduct_priceInput
  connect?: Prisma.productWhereUniqueInput
}

export type productUpdateOneRequiredWithoutProduct_priceNestedInput = {
  create?: Prisma.XOR<Prisma.productCreateWithoutProduct_priceInput, Prisma.productUncheckedCreateWithoutProduct_priceInput>
  connectOrCreate?: Prisma.productCreateOrConnectWithoutProduct_priceInput
  upsert?: Prisma.productUpsertWithoutProduct_priceInput
  connect?: Prisma.productWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.productUpdateToOneWithWhereWithoutProduct_priceInput, Prisma.productUpdateWithoutProduct_priceInput>, Prisma.productUncheckedUpdateWithoutProduct_priceInput>
}

export type productCreateWithoutCategoryInput = {
  name: string
  description?: string | null
  is_signature?: boolean | null
  image_path?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  product_price?: Prisma.product_priceCreateNestedManyWithoutProductInput
}

export type productUncheckedCreateWithoutCategoryInput = {
  product_id?: number
  name: string
  description?: string | null
  is_signature?: boolean | null
  image_path?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  product_price?: Prisma.product_priceUncheckedCreateNestedManyWithoutProductInput
}

export type productCreateOrConnectWithoutCategoryInput = {
  where: Prisma.productWhereUniqueInput
  create: Prisma.XOR<Prisma.productCreateWithoutCategoryInput, Prisma.productUncheckedCreateWithoutCategoryInput>
}

export type productCreateManyCategoryInputEnvelope = {
  data: Prisma.productCreateManyCategoryInput | Prisma.productCreateManyCategoryInput[]
  skipDuplicates?: boolean
}

export type productUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.productWhereUniqueInput
  update: Prisma.XOR<Prisma.productUpdateWithoutCategoryInput, Prisma.productUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.productCreateWithoutCategoryInput, Prisma.productUncheckedCreateWithoutCategoryInput>
}

export type productUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.productWhereUniqueInput
  data: Prisma.XOR<Prisma.productUpdateWithoutCategoryInput, Prisma.productUncheckedUpdateWithoutCategoryInput>
}

export type productUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.productScalarWhereInput
  data: Prisma.XOR<Prisma.productUpdateManyMutationInput, Prisma.productUncheckedUpdateManyWithoutCategoryInput>
}

export type productScalarWhereInput = {
  AND?: Prisma.productScalarWhereInput | Prisma.productScalarWhereInput[]
  OR?: Prisma.productScalarWhereInput[]
  NOT?: Prisma.productScalarWhereInput | Prisma.productScalarWhereInput[]
  product_id?: Prisma.IntFilter<"product"> | number
  category_id?: Prisma.IntFilter<"product"> | number
  name?: Prisma.StringFilter<"product"> | string
  description?: Prisma.StringNullableFilter<"product"> | string | null
  is_signature?: Prisma.BoolNullableFilter<"product"> | boolean | null
  image_path?: Prisma.StringNullableFilter<"product"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"product"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"product"> | Date | string | null
}

export type productCreateWithoutProduct_priceInput = {
  name: string
  description?: string | null
  is_signature?: boolean | null
  image_path?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  category: Prisma.categoryCreateNestedOneWithoutProductInput
}

export type productUncheckedCreateWithoutProduct_priceInput = {
  product_id?: number
  category_id: number
  name: string
  description?: string | null
  is_signature?: boolean | null
  image_path?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type productCreateOrConnectWithoutProduct_priceInput = {
  where: Prisma.productWhereUniqueInput
  create: Prisma.XOR<Prisma.productCreateWithoutProduct_priceInput, Prisma.productUncheckedCreateWithoutProduct_priceInput>
}

export type productUpsertWithoutProduct_priceInput = {
  update: Prisma.XOR<Prisma.productUpdateWithoutProduct_priceInput, Prisma.productUncheckedUpdateWithoutProduct_priceInput>
  create: Prisma.XOR<Prisma.productCreateWithoutProduct_priceInput, Prisma.productUncheckedCreateWithoutProduct_priceInput>
  where?: Prisma.productWhereInput
}

export type productUpdateToOneWithWhereWithoutProduct_priceInput = {
  where?: Prisma.productWhereInput
  data: Prisma.XOR<Prisma.productUpdateWithoutProduct_priceInput, Prisma.productUncheckedUpdateWithoutProduct_priceInput>
}

export type productUpdateWithoutProduct_priceInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  category?: Prisma.categoryUpdateOneRequiredWithoutProductNestedInput
}

export type productUncheckedUpdateWithoutProduct_priceInput = {
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  category_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type productCreateManyCategoryInput = {
  product_id?: number
  name: string
  description?: string | null
  is_signature?: boolean | null
  image_path?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type productUpdateWithoutCategoryInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_price?: Prisma.product_priceUpdateManyWithoutProductNestedInput
}

export type productUncheckedUpdateWithoutCategoryInput = {
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_price?: Prisma.product_priceUncheckedUpdateManyWithoutProductNestedInput
}

export type productUncheckedUpdateManyWithoutCategoryInput = {
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_signature?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  image_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type ProductCountOutputType
 */

export type ProductCountOutputType = {
  product_price: number
}

export type ProductCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product_price?: boolean | ProductCountOutputTypeCountProduct_priceArgs
}

/**
 * ProductCountOutputType without action
 */
export type ProductCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductCountOutputType
   */
  select?: Prisma.ProductCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProductCountOutputType without action
 */
export type ProductCountOutputTypeCountProduct_priceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.product_priceWhereInput
}


export type productSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  product_id?: boolean
  category_id?: boolean
  name?: boolean
  description?: boolean
  is_signature?: boolean
  image_path?: boolean
  created_at?: boolean
  updated_at?: boolean
  category?: boolean | Prisma.categoryDefaultArgs<ExtArgs>
  product_price?: boolean | Prisma.product$product_priceArgs<ExtArgs>
  _count?: boolean | Prisma.ProductCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["product"]>

export type productSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  product_id?: boolean
  category_id?: boolean
  name?: boolean
  description?: boolean
  is_signature?: boolean
  image_path?: boolean
  created_at?: boolean
  updated_at?: boolean
  category?: boolean | Prisma.categoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["product"]>

export type productSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  product_id?: boolean
  category_id?: boolean
  name?: boolean
  description?: boolean
  is_signature?: boolean
  image_path?: boolean
  created_at?: boolean
  updated_at?: boolean
  category?: boolean | Prisma.categoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["product"]>

export type productSelectScalar = {
  product_id?: boolean
  category_id?: boolean
  name?: boolean
  description?: boolean
  is_signature?: boolean
  image_path?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type productOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"product_id" | "category_id" | "name" | "description" | "is_signature" | "image_path" | "created_at" | "updated_at", ExtArgs["result"]["product"]>
export type productInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.categoryDefaultArgs<ExtArgs>
  product_price?: boolean | Prisma.product$product_priceArgs<ExtArgs>
  _count?: boolean | Prisma.ProductCountOutputTypeDefaultArgs<ExtArgs>
}
export type productIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.categoryDefaultArgs<ExtArgs>
}
export type productIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.categoryDefaultArgs<ExtArgs>
}

export type $productPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "product"
  objects: {
    category: Prisma.$categoryPayload<ExtArgs>
    product_price: Prisma.$product_pricePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    product_id: number
    category_id: number
    name: string
    description: string | null
    is_signature: boolean | null
    image_path: string | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["product"]>
  composites: {}
}

export type productGetPayload<S extends boolean | null | undefined | productDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$productPayload, S>

export type productCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<productFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductCountAggregateInputType | true
  }

export interface productDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product'], meta: { name: 'product' } }
  /**
   * Find zero or one Product that matches the filter.
   * @param {productFindUniqueArgs} args - Arguments to find a Product
   * @example
   * // Get one Product
   * const product = await prisma.product.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends productFindUniqueArgs>(args: Prisma.SelectSubset<T, productFindUniqueArgs<ExtArgs>>): Prisma.Prisma__productClient<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Product that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
   * @example
   * // Get one Product
   * const product = await prisma.product.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, productFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__productClient<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Product that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productFindFirstArgs} args - Arguments to find a Product
   * @example
   * // Get one Product
   * const product = await prisma.product.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends productFindFirstArgs>(args?: Prisma.SelectSubset<T, productFindFirstArgs<ExtArgs>>): Prisma.Prisma__productClient<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Product that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
   * @example
   * // Get one Product
   * const product = await prisma.product.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends productFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, productFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__productClient<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Products that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Products
   * const products = await prisma.product.findMany()
   * 
   * // Get first 10 Products
   * const products = await prisma.product.findMany({ take: 10 })
   * 
   * // Only select the `product_id`
   * const productWithProduct_idOnly = await prisma.product.findMany({ select: { product_id: true } })
   * 
   */
  findMany<T extends productFindManyArgs>(args?: Prisma.SelectSubset<T, productFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Product.
   * @param {productCreateArgs} args - Arguments to create a Product.
   * @example
   * // Create one Product
   * const Product = await prisma.product.create({
   *   data: {
   *     // ... data to create a Product
   *   }
   * })
   * 
   */
  create<T extends productCreateArgs>(args: Prisma.SelectSubset<T, productCreateArgs<ExtArgs>>): Prisma.Prisma__productClient<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Products.
   * @param {productCreateManyArgs} args - Arguments to create many Products.
   * @example
   * // Create many Products
   * const product = await prisma.product.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends productCreateManyArgs>(args?: Prisma.SelectSubset<T, productCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Products and returns the data saved in the database.
   * @param {productCreateManyAndReturnArgs} args - Arguments to create many Products.
   * @example
   * // Create many Products
   * const product = await prisma.product.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Products and only return the `product_id`
   * const productWithProduct_idOnly = await prisma.product.createManyAndReturn({
   *   select: { product_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends productCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, productCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Product.
   * @param {productDeleteArgs} args - Arguments to delete one Product.
   * @example
   * // Delete one Product
   * const Product = await prisma.product.delete({
   *   where: {
   *     // ... filter to delete one Product
   *   }
   * })
   * 
   */
  delete<T extends productDeleteArgs>(args: Prisma.SelectSubset<T, productDeleteArgs<ExtArgs>>): Prisma.Prisma__productClient<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Product.
   * @param {productUpdateArgs} args - Arguments to update one Product.
   * @example
   * // Update one Product
   * const product = await prisma.product.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends productUpdateArgs>(args: Prisma.SelectSubset<T, productUpdateArgs<ExtArgs>>): Prisma.Prisma__productClient<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Products.
   * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
   * @example
   * // Delete a few Products
   * const { count } = await prisma.product.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends productDeleteManyArgs>(args?: Prisma.SelectSubset<T, productDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Products
   * const product = await prisma.product.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends productUpdateManyArgs>(args: Prisma.SelectSubset<T, productUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Products and returns the data updated in the database.
   * @param {productUpdateManyAndReturnArgs} args - Arguments to update many Products.
   * @example
   * // Update many Products
   * const product = await prisma.product.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Products and only return the `product_id`
   * const productWithProduct_idOnly = await prisma.product.updateManyAndReturn({
   *   select: { product_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends productUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, productUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Product.
   * @param {productUpsertArgs} args - Arguments to update or create a Product.
   * @example
   * // Update or create a Product
   * const product = await prisma.product.upsert({
   *   create: {
   *     // ... data to create a Product
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Product we want to update
   *   }
   * })
   */
  upsert<T extends productUpsertArgs>(args: Prisma.SelectSubset<T, productUpsertArgs<ExtArgs>>): Prisma.Prisma__productClient<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productCountArgs} args - Arguments to filter Products to count.
   * @example
   * // Count the number of Products
   * const count = await prisma.product.count({
   *   where: {
   *     // ... the filter for the Products we want to count
   *   }
   * })
  **/
  count<T extends productCountArgs>(
    args?: Prisma.Subset<T, productCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Product.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductAggregateArgs>(args: Prisma.Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

  /**
   * Group by Product.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends productGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: productGroupByArgs['orderBy'] }
      : { orderBy?: productGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the product model
 */
readonly fields: productFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for product.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__productClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  category<T extends Prisma.categoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.categoryDefaultArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product_price<T extends Prisma.product$product_priceArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.product$product_priceArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$product_pricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the product model
 */
export interface productFieldRefs {
  readonly product_id: Prisma.FieldRef<"product", 'Int'>
  readonly category_id: Prisma.FieldRef<"product", 'Int'>
  readonly name: Prisma.FieldRef<"product", 'String'>
  readonly description: Prisma.FieldRef<"product", 'String'>
  readonly is_signature: Prisma.FieldRef<"product", 'Boolean'>
  readonly image_path: Prisma.FieldRef<"product", 'String'>
  readonly created_at: Prisma.FieldRef<"product", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"product", 'DateTime'>
}
    

// Custom InputTypes
/**
 * product findUnique
 */
export type productFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * Filter, which product to fetch.
   */
  where: Prisma.productWhereUniqueInput
}

/**
 * product findUniqueOrThrow
 */
export type productFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * Filter, which product to fetch.
   */
  where: Prisma.productWhereUniqueInput
}

/**
 * product findFirst
 */
export type productFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * Filter, which product to fetch.
   */
  where?: Prisma.productWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of products to fetch.
   */
  orderBy?: Prisma.productOrderByWithRelationInput | Prisma.productOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for products.
   */
  cursor?: Prisma.productWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of products.
   */
  distinct?: Prisma.ProductScalarFieldEnum | Prisma.ProductScalarFieldEnum[]
}

/**
 * product findFirstOrThrow
 */
export type productFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * Filter, which product to fetch.
   */
  where?: Prisma.productWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of products to fetch.
   */
  orderBy?: Prisma.productOrderByWithRelationInput | Prisma.productOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for products.
   */
  cursor?: Prisma.productWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of products.
   */
  distinct?: Prisma.ProductScalarFieldEnum | Prisma.ProductScalarFieldEnum[]
}

/**
 * product findMany
 */
export type productFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * Filter, which products to fetch.
   */
  where?: Prisma.productWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of products to fetch.
   */
  orderBy?: Prisma.productOrderByWithRelationInput | Prisma.productOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing products.
   */
  cursor?: Prisma.productWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` products.
   */
  skip?: number
  distinct?: Prisma.ProductScalarFieldEnum | Prisma.ProductScalarFieldEnum[]
}

/**
 * product create
 */
export type productCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * The data needed to create a product.
   */
  data: Prisma.XOR<Prisma.productCreateInput, Prisma.productUncheckedCreateInput>
}

/**
 * product createMany
 */
export type productCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many products.
   */
  data: Prisma.productCreateManyInput | Prisma.productCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * product createManyAndReturn
 */
export type productCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * The data used to create many products.
   */
  data: Prisma.productCreateManyInput | Prisma.productCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * product update
 */
export type productUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * The data needed to update a product.
   */
  data: Prisma.XOR<Prisma.productUpdateInput, Prisma.productUncheckedUpdateInput>
  /**
   * Choose, which product to update.
   */
  where: Prisma.productWhereUniqueInput
}

/**
 * product updateMany
 */
export type productUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update products.
   */
  data: Prisma.XOR<Prisma.productUpdateManyMutationInput, Prisma.productUncheckedUpdateManyInput>
  /**
   * Filter which products to update
   */
  where?: Prisma.productWhereInput
  /**
   * Limit how many products to update.
   */
  limit?: number
}

/**
 * product updateManyAndReturn
 */
export type productUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * The data used to update products.
   */
  data: Prisma.XOR<Prisma.productUpdateManyMutationInput, Prisma.productUncheckedUpdateManyInput>
  /**
   * Filter which products to update
   */
  where?: Prisma.productWhereInput
  /**
   * Limit how many products to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * product upsert
 */
export type productUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * The filter to search for the product to update in case it exists.
   */
  where: Prisma.productWhereUniqueInput
  /**
   * In case the product found by the `where` argument doesn't exist, create a new product with this data.
   */
  create: Prisma.XOR<Prisma.productCreateInput, Prisma.productUncheckedCreateInput>
  /**
   * In case the product was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.productUpdateInput, Prisma.productUncheckedUpdateInput>
}

/**
 * product delete
 */
export type productDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  /**
   * Filter which product to delete.
   */
  where: Prisma.productWhereUniqueInput
}

/**
 * product deleteMany
 */
export type productDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which products to delete
   */
  where?: Prisma.productWhereInput
  /**
   * Limit how many products to delete.
   */
  limit?: number
}

/**
 * product.product_price
 */
export type product$product_priceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_price
   */
  select?: Prisma.product_priceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_price
   */
  omit?: Prisma.product_priceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_priceInclude<ExtArgs> | null
  where?: Prisma.product_priceWhereInput
  orderBy?: Prisma.product_priceOrderByWithRelationInput | Prisma.product_priceOrderByWithRelationInput[]
  cursor?: Prisma.product_priceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Product_priceScalarFieldEnum | Prisma.Product_priceScalarFieldEnum[]
}

/**
 * product without action
 */
export type productDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
}
