/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `role` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model role
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type roleModel = runtime.Types.Result.DefaultSelection<Prisma.$rolePayload>

export type AggregateRole = {
  _count: RoleCountAggregateOutputType | null
  _avg: RoleAvgAggregateOutputType | null
  _sum: RoleSumAggregateOutputType | null
  _min: RoleMinAggregateOutputType | null
  _max: RoleMaxAggregateOutputType | null
}

export type RoleAvgAggregateOutputType = {
  role_id: number | null
}

export type RoleSumAggregateOutputType = {
  role_id: number | null
}

export type RoleMinAggregateOutputType = {
  role_id: number | null
  name: string | null
  description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type RoleMaxAggregateOutputType = {
  role_id: number | null
  name: string | null
  description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type RoleCountAggregateOutputType = {
  role_id: number
  name: number
  description: number
  created_at: number
  updated_at: number
  _all: number
}


export type RoleAvgAggregateInputType = {
  role_id?: true
}

export type RoleSumAggregateInputType = {
  role_id?: true
}

export type RoleMinAggregateInputType = {
  role_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
}

export type RoleMaxAggregateInputType = {
  role_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
}

export type RoleCountAggregateInputType = {
  role_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type RoleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which role to aggregate.
   */
  where?: Prisma.roleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of roles to fetch.
   */
  orderBy?: Prisma.roleOrderByWithRelationInput | Prisma.roleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.roleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned roles
  **/
  _count?: true | RoleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RoleAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RoleSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RoleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RoleMaxAggregateInputType
}

export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
      [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRole[P]>
    : Prisma.GetScalarType<T[P], AggregateRole[P]>
}




export type roleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.roleWhereInput
  orderBy?: Prisma.roleOrderByWithAggregationInput | Prisma.roleOrderByWithAggregationInput[]
  by: Prisma.RoleScalarFieldEnum[] | Prisma.RoleScalarFieldEnum
  having?: Prisma.roleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RoleCountAggregateInputType | true
  _avg?: RoleAvgAggregateInputType
  _sum?: RoleSumAggregateInputType
  _min?: RoleMinAggregateInputType
  _max?: RoleMaxAggregateInputType
}

export type RoleGroupByOutputType = {
  role_id: number
  name: string
  description: string | null
  created_at: Date | null
  updated_at: Date | null
  _count: RoleCountAggregateOutputType | null
  _avg: RoleAvgAggregateOutputType | null
  _sum: RoleSumAggregateOutputType | null
  _min: RoleMinAggregateOutputType | null
  _max: RoleMaxAggregateOutputType | null
}

type GetRoleGroupByPayload<T extends roleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RoleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RoleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RoleGroupByOutputType[P]>
      }
    >
  > 



export type roleWhereInput = {
  AND?: Prisma.roleWhereInput | Prisma.roleWhereInput[]
  OR?: Prisma.roleWhereInput[]
  NOT?: Prisma.roleWhereInput | Prisma.roleWhereInput[]
  role_id?: Prisma.IntFilter<"role"> | number
  name?: Prisma.StringFilter<"role"> | string
  description?: Prisma.StringNullableFilter<"role"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"role"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"role"> | Date | string | null
  account?: Prisma.AccountListRelationFilter
}

export type roleOrderByWithRelationInput = {
  role_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  account?: Prisma.accountOrderByRelationAggregateInput
}

export type roleWhereUniqueInput = Prisma.AtLeast<{
  role_id?: number
  name?: string
  AND?: Prisma.roleWhereInput | Prisma.roleWhereInput[]
  OR?: Prisma.roleWhereInput[]
  NOT?: Prisma.roleWhereInput | Prisma.roleWhereInput[]
  description?: Prisma.StringNullableFilter<"role"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"role"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"role"> | Date | string | null
  account?: Prisma.AccountListRelationFilter
}, "role_id" | "name">

export type roleOrderByWithAggregationInput = {
  role_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.roleCountOrderByAggregateInput
  _avg?: Prisma.roleAvgOrderByAggregateInput
  _max?: Prisma.roleMaxOrderByAggregateInput
  _min?: Prisma.roleMinOrderByAggregateInput
  _sum?: Prisma.roleSumOrderByAggregateInput
}

export type roleScalarWhereWithAggregatesInput = {
  AND?: Prisma.roleScalarWhereWithAggregatesInput | Prisma.roleScalarWhereWithAggregatesInput[]
  OR?: Prisma.roleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.roleScalarWhereWithAggregatesInput | Prisma.roleScalarWhereWithAggregatesInput[]
  role_id?: Prisma.IntWithAggregatesFilter<"role"> | number
  name?: Prisma.StringWithAggregatesFilter<"role"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"role"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"role"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"role"> | Date | string | null
}

export type roleCreateInput = {
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  account?: Prisma.accountCreateNestedManyWithoutRoleInput
}

export type roleUncheckedCreateInput = {
  role_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  account?: Prisma.accountUncheckedCreateNestedManyWithoutRoleInput
}

export type roleUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  account?: Prisma.accountUpdateManyWithoutRoleNestedInput
}

export type roleUncheckedUpdateInput = {
  role_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  account?: Prisma.accountUncheckedUpdateManyWithoutRoleNestedInput
}

export type roleCreateManyInput = {
  role_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type roleUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type roleUncheckedUpdateManyInput = {
  role_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type RoleScalarRelationFilter = {
  is?: Prisma.roleWhereInput
  isNot?: Prisma.roleWhereInput
}

export type roleCountOrderByAggregateInput = {
  role_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type roleAvgOrderByAggregateInput = {
  role_id?: Prisma.SortOrder
}

export type roleMaxOrderByAggregateInput = {
  role_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type roleMinOrderByAggregateInput = {
  role_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type roleSumOrderByAggregateInput = {
  role_id?: Prisma.SortOrder
}

export type roleCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.roleCreateWithoutAccountInput, Prisma.roleUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.roleCreateOrConnectWithoutAccountInput
  connect?: Prisma.roleWhereUniqueInput
}

export type roleUpdateOneRequiredWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.roleCreateWithoutAccountInput, Prisma.roleUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.roleCreateOrConnectWithoutAccountInput
  upsert?: Prisma.roleUpsertWithoutAccountInput
  connect?: Prisma.roleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.roleUpdateToOneWithWhereWithoutAccountInput, Prisma.roleUpdateWithoutAccountInput>, Prisma.roleUncheckedUpdateWithoutAccountInput>
}

export type roleCreateWithoutAccountInput = {
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type roleUncheckedCreateWithoutAccountInput = {
  role_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type roleCreateOrConnectWithoutAccountInput = {
  where: Prisma.roleWhereUniqueInput
  create: Prisma.XOR<Prisma.roleCreateWithoutAccountInput, Prisma.roleUncheckedCreateWithoutAccountInput>
}

export type roleUpsertWithoutAccountInput = {
  update: Prisma.XOR<Prisma.roleUpdateWithoutAccountInput, Prisma.roleUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.roleCreateWithoutAccountInput, Prisma.roleUncheckedCreateWithoutAccountInput>
  where?: Prisma.roleWhereInput
}

export type roleUpdateToOneWithWhereWithoutAccountInput = {
  where?: Prisma.roleWhereInput
  data: Prisma.XOR<Prisma.roleUpdateWithoutAccountInput, Prisma.roleUncheckedUpdateWithoutAccountInput>
}

export type roleUpdateWithoutAccountInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type roleUncheckedUpdateWithoutAccountInput = {
  role_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type RoleCountOutputType
 */

export type RoleCountOutputType = {
  account: number
}

export type RoleCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | RoleCountOutputTypeCountAccountArgs
}

/**
 * RoleCountOutputType without action
 */
export type RoleCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoleCountOutputType
   */
  select?: Prisma.RoleCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RoleCountOutputType without action
 */
export type RoleCountOutputTypeCountAccountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.accountWhereInput
}


export type roleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  role_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.role$accountArgs<ExtArgs>
  _count?: boolean | Prisma.RoleCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["role"]>

export type roleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  role_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["role"]>

export type roleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  role_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["role"]>

export type roleSelectScalar = {
  role_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type roleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"role_id" | "name" | "description" | "created_at" | "updated_at", ExtArgs["result"]["role"]>
export type roleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.role$accountArgs<ExtArgs>
  _count?: boolean | Prisma.RoleCountOutputTypeDefaultArgs<ExtArgs>
}
export type roleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type roleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $rolePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "role"
  objects: {
    account: Prisma.$accountPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    role_id: number
    name: string
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["role"]>
  composites: {}
}

export type roleGetPayload<S extends boolean | null | undefined | roleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$rolePayload, S>

export type roleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<roleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RoleCountAggregateInputType | true
  }

export interface roleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['role'], meta: { name: 'role' } }
  /**
   * Find zero or one Role that matches the filter.
   * @param {roleFindUniqueArgs} args - Arguments to find a Role
   * @example
   * // Get one Role
   * const role = await prisma.role.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends roleFindUniqueArgs>(args: Prisma.SelectSubset<T, roleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Role that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {roleFindUniqueOrThrowArgs} args - Arguments to find a Role
   * @example
   * // Get one Role
   * const role = await prisma.role.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends roleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, roleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Role that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {roleFindFirstArgs} args - Arguments to find a Role
   * @example
   * // Get one Role
   * const role = await prisma.role.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends roleFindFirstArgs>(args?: Prisma.SelectSubset<T, roleFindFirstArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Role that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {roleFindFirstOrThrowArgs} args - Arguments to find a Role
   * @example
   * // Get one Role
   * const role = await prisma.role.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends roleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, roleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Roles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {roleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Roles
   * const roles = await prisma.role.findMany()
   * 
   * // Get first 10 Roles
   * const roles = await prisma.role.findMany({ take: 10 })
   * 
   * // Only select the `role_id`
   * const roleWithRole_idOnly = await prisma.role.findMany({ select: { role_id: true } })
   * 
   */
  findMany<T extends roleFindManyArgs>(args?: Prisma.SelectSubset<T, roleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Role.
   * @param {roleCreateArgs} args - Arguments to create a Role.
   * @example
   * // Create one Role
   * const Role = await prisma.role.create({
   *   data: {
   *     // ... data to create a Role
   *   }
   * })
   * 
   */
  create<T extends roleCreateArgs>(args: Prisma.SelectSubset<T, roleCreateArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Roles.
   * @param {roleCreateManyArgs} args - Arguments to create many Roles.
   * @example
   * // Create many Roles
   * const role = await prisma.role.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends roleCreateManyArgs>(args?: Prisma.SelectSubset<T, roleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Roles and returns the data saved in the database.
   * @param {roleCreateManyAndReturnArgs} args - Arguments to create many Roles.
   * @example
   * // Create many Roles
   * const role = await prisma.role.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Roles and only return the `role_id`
   * const roleWithRole_idOnly = await prisma.role.createManyAndReturn({
   *   select: { role_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends roleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, roleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Role.
   * @param {roleDeleteArgs} args - Arguments to delete one Role.
   * @example
   * // Delete one Role
   * const Role = await prisma.role.delete({
   *   where: {
   *     // ... filter to delete one Role
   *   }
   * })
   * 
   */
  delete<T extends roleDeleteArgs>(args: Prisma.SelectSubset<T, roleDeleteArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Role.
   * @param {roleUpdateArgs} args - Arguments to update one Role.
   * @example
   * // Update one Role
   * const role = await prisma.role.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends roleUpdateArgs>(args: Prisma.SelectSubset<T, roleUpdateArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Roles.
   * @param {roleDeleteManyArgs} args - Arguments to filter Roles to delete.
   * @example
   * // Delete a few Roles
   * const { count } = await prisma.role.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends roleDeleteManyArgs>(args?: Prisma.SelectSubset<T, roleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {roleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Roles
   * const role = await prisma.role.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends roleUpdateManyArgs>(args: Prisma.SelectSubset<T, roleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Roles and returns the data updated in the database.
   * @param {roleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
   * @example
   * // Update many Roles
   * const role = await prisma.role.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Roles and only return the `role_id`
   * const roleWithRole_idOnly = await prisma.role.updateManyAndReturn({
   *   select: { role_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends roleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, roleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Role.
   * @param {roleUpsertArgs} args - Arguments to update or create a Role.
   * @example
   * // Update or create a Role
   * const role = await prisma.role.upsert({
   *   create: {
   *     // ... data to create a Role
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Role we want to update
   *   }
   * })
   */
  upsert<T extends roleUpsertArgs>(args: Prisma.SelectSubset<T, roleUpsertArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {roleCountArgs} args - Arguments to filter Roles to count.
   * @example
   * // Count the number of Roles
   * const count = await prisma.role.count({
   *   where: {
   *     // ... the filter for the Roles we want to count
   *   }
   * })
  **/
  count<T extends roleCountArgs>(
    args?: Prisma.Subset<T, roleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RoleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Role.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RoleAggregateArgs>(args: Prisma.Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

  /**
   * Group by Role.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {roleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends roleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: roleGroupByArgs['orderBy'] }
      : { orderBy?: roleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the role model
 */
readonly fields: roleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for role.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__roleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.role$accountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.role$accountArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the role model
 */
export interface roleFieldRefs {
  readonly role_id: Prisma.FieldRef<"role", 'Int'>
  readonly name: Prisma.FieldRef<"role", 'String'>
  readonly description: Prisma.FieldRef<"role", 'String'>
  readonly created_at: Prisma.FieldRef<"role", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"role", 'DateTime'>
}
    

// Custom InputTypes
/**
 * role findUnique
 */
export type roleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * Filter, which role to fetch.
   */
  where: Prisma.roleWhereUniqueInput
}

/**
 * role findUniqueOrThrow
 */
export type roleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * Filter, which role to fetch.
   */
  where: Prisma.roleWhereUniqueInput
}

/**
 * role findFirst
 */
export type roleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * Filter, which role to fetch.
   */
  where?: Prisma.roleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of roles to fetch.
   */
  orderBy?: Prisma.roleOrderByWithRelationInput | Prisma.roleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for roles.
   */
  cursor?: Prisma.roleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of roles.
   */
  distinct?: Prisma.RoleScalarFieldEnum | Prisma.RoleScalarFieldEnum[]
}

/**
 * role findFirstOrThrow
 */
export type roleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * Filter, which role to fetch.
   */
  where?: Prisma.roleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of roles to fetch.
   */
  orderBy?: Prisma.roleOrderByWithRelationInput | Prisma.roleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for roles.
   */
  cursor?: Prisma.roleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of roles.
   */
  distinct?: Prisma.RoleScalarFieldEnum | Prisma.RoleScalarFieldEnum[]
}

/**
 * role findMany
 */
export type roleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * Filter, which roles to fetch.
   */
  where?: Prisma.roleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of roles to fetch.
   */
  orderBy?: Prisma.roleOrderByWithRelationInput | Prisma.roleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing roles.
   */
  cursor?: Prisma.roleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` roles.
   */
  skip?: number
  distinct?: Prisma.RoleScalarFieldEnum | Prisma.RoleScalarFieldEnum[]
}

/**
 * role create
 */
export type roleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * The data needed to create a role.
   */
  data: Prisma.XOR<Prisma.roleCreateInput, Prisma.roleUncheckedCreateInput>
}

/**
 * role createMany
 */
export type roleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many roles.
   */
  data: Prisma.roleCreateManyInput | Prisma.roleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * role createManyAndReturn
 */
export type roleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * The data used to create many roles.
   */
  data: Prisma.roleCreateManyInput | Prisma.roleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * role update
 */
export type roleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * The data needed to update a role.
   */
  data: Prisma.XOR<Prisma.roleUpdateInput, Prisma.roleUncheckedUpdateInput>
  /**
   * Choose, which role to update.
   */
  where: Prisma.roleWhereUniqueInput
}

/**
 * role updateMany
 */
export type roleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update roles.
   */
  data: Prisma.XOR<Prisma.roleUpdateManyMutationInput, Prisma.roleUncheckedUpdateManyInput>
  /**
   * Filter which roles to update
   */
  where?: Prisma.roleWhereInput
  /**
   * Limit how many roles to update.
   */
  limit?: number
}

/**
 * role updateManyAndReturn
 */
export type roleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * The data used to update roles.
   */
  data: Prisma.XOR<Prisma.roleUpdateManyMutationInput, Prisma.roleUncheckedUpdateManyInput>
  /**
   * Filter which roles to update
   */
  where?: Prisma.roleWhereInput
  /**
   * Limit how many roles to update.
   */
  limit?: number
}

/**
 * role upsert
 */
export type roleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * The filter to search for the role to update in case it exists.
   */
  where: Prisma.roleWhereUniqueInput
  /**
   * In case the role found by the `where` argument doesn't exist, create a new role with this data.
   */
  create: Prisma.XOR<Prisma.roleCreateInput, Prisma.roleUncheckedCreateInput>
  /**
   * In case the role was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.roleUpdateInput, Prisma.roleUncheckedUpdateInput>
}

/**
 * role delete
 */
export type roleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
  /**
   * Filter which role to delete.
   */
  where: Prisma.roleWhereUniqueInput
}

/**
 * role deleteMany
 */
export type roleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which roles to delete
   */
  where?: Prisma.roleWhereInput
  /**
   * Limit how many roles to delete.
   */
  limit?: number
}

/**
 * role.account
 */
export type role$accountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  where?: Prisma.accountWhereInput
  orderBy?: Prisma.accountOrderByWithRelationInput | Prisma.accountOrderByWithRelationInput[]
  cursor?: Prisma.accountWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[]
}

/**
 * role without action
 */
export type roleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the role
   */
  select?: Prisma.roleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the role
   */
  omit?: Prisma.roleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.roleInclude<ExtArgs> | null
}
