/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `membership_type` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model membership_type
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type membership_typeModel = runtime.Types.Result.DefaultSelection<Prisma.$membership_typePayload>

export type AggregateMembership_type = {
  _count: Membership_typeCountAggregateOutputType | null
  _avg: Membership_typeAvgAggregateOutputType | null
  _sum: Membership_typeSumAggregateOutputType | null
  _min: Membership_typeMinAggregateOutputType | null
  _max: Membership_typeMaxAggregateOutputType | null
}

export type Membership_typeAvgAggregateOutputType = {
  membership_type_id: number | null
  discount_value: runtime.Decimal | null
  required_point: number | null
}

export type Membership_typeSumAggregateOutputType = {
  membership_type_id: number | null
  discount_value: runtime.Decimal | null
  required_point: number | null
}

export type Membership_typeMinAggregateOutputType = {
  membership_type_id: number | null
  type: string | null
  discount_value: runtime.Decimal | null
  required_point: number | null
  description: string | null
  valid_until: Date | null
  is_active: boolean | null
  created_at: Date | null
  updated_at: Date | null
}

export type Membership_typeMaxAggregateOutputType = {
  membership_type_id: number | null
  type: string | null
  discount_value: runtime.Decimal | null
  required_point: number | null
  description: string | null
  valid_until: Date | null
  is_active: boolean | null
  created_at: Date | null
  updated_at: Date | null
}

export type Membership_typeCountAggregateOutputType = {
  membership_type_id: number
  type: number
  discount_value: number
  required_point: number
  description: number
  valid_until: number
  is_active: number
  created_at: number
  updated_at: number
  _all: number
}


export type Membership_typeAvgAggregateInputType = {
  membership_type_id?: true
  discount_value?: true
  required_point?: true
}

export type Membership_typeSumAggregateInputType = {
  membership_type_id?: true
  discount_value?: true
  required_point?: true
}

export type Membership_typeMinAggregateInputType = {
  membership_type_id?: true
  type?: true
  discount_value?: true
  required_point?: true
  description?: true
  valid_until?: true
  is_active?: true
  created_at?: true
  updated_at?: true
}

export type Membership_typeMaxAggregateInputType = {
  membership_type_id?: true
  type?: true
  discount_value?: true
  required_point?: true
  description?: true
  valid_until?: true
  is_active?: true
  created_at?: true
  updated_at?: true
}

export type Membership_typeCountAggregateInputType = {
  membership_type_id?: true
  type?: true
  discount_value?: true
  required_point?: true
  description?: true
  valid_until?: true
  is_active?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type Membership_typeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which membership_type to aggregate.
   */
  where?: Prisma.membership_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of membership_types to fetch.
   */
  orderBy?: Prisma.membership_typeOrderByWithRelationInput | Prisma.membership_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.membership_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` membership_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` membership_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned membership_types
  **/
  _count?: true | Membership_typeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Membership_typeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Membership_typeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Membership_typeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Membership_typeMaxAggregateInputType
}

export type GetMembership_typeAggregateType<T extends Membership_typeAggregateArgs> = {
      [P in keyof T & keyof AggregateMembership_type]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMembership_type[P]>
    : Prisma.GetScalarType<T[P], AggregateMembership_type[P]>
}




export type membership_typeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.membership_typeWhereInput
  orderBy?: Prisma.membership_typeOrderByWithAggregationInput | Prisma.membership_typeOrderByWithAggregationInput[]
  by: Prisma.Membership_typeScalarFieldEnum[] | Prisma.Membership_typeScalarFieldEnum
  having?: Prisma.membership_typeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Membership_typeCountAggregateInputType | true
  _avg?: Membership_typeAvgAggregateInputType
  _sum?: Membership_typeSumAggregateInputType
  _min?: Membership_typeMinAggregateInputType
  _max?: Membership_typeMaxAggregateInputType
}

export type Membership_typeGroupByOutputType = {
  membership_type_id: number
  type: string
  discount_value: runtime.Decimal
  required_point: number
  description: string | null
  valid_until: Date | null
  is_active: boolean | null
  created_at: Date | null
  updated_at: Date | null
  _count: Membership_typeCountAggregateOutputType | null
  _avg: Membership_typeAvgAggregateOutputType | null
  _sum: Membership_typeSumAggregateOutputType | null
  _min: Membership_typeMinAggregateOutputType | null
  _max: Membership_typeMaxAggregateOutputType | null
}

type GetMembership_typeGroupByPayload<T extends membership_typeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Membership_typeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Membership_typeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Membership_typeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Membership_typeGroupByOutputType[P]>
      }
    >
  > 



export type membership_typeWhereInput = {
  AND?: Prisma.membership_typeWhereInput | Prisma.membership_typeWhereInput[]
  OR?: Prisma.membership_typeWhereInput[]
  NOT?: Prisma.membership_typeWhereInput | Prisma.membership_typeWhereInput[]
  membership_type_id?: Prisma.IntFilter<"membership_type"> | number
  type?: Prisma.StringFilter<"membership_type"> | string
  discount_value?: Prisma.DecimalFilter<"membership_type"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point?: Prisma.IntFilter<"membership_type"> | number
  description?: Prisma.StringNullableFilter<"membership_type"> | string | null
  valid_until?: Prisma.DateTimeNullableFilter<"membership_type"> | Date | string | null
  is_active?: Prisma.BoolNullableFilter<"membership_type"> | boolean | null
  created_at?: Prisma.DateTimeNullableFilter<"membership_type"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"membership_type"> | Date | string | null
  customer?: Prisma.CustomerListRelationFilter
}

export type membership_typeOrderByWithRelationInput = {
  membership_type_id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  required_point?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  valid_until?: Prisma.SortOrderInput | Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  customer?: Prisma.customerOrderByRelationAggregateInput
}

export type membership_typeWhereUniqueInput = Prisma.AtLeast<{
  membership_type_id?: number
  type?: string
  required_point?: number
  AND?: Prisma.membership_typeWhereInput | Prisma.membership_typeWhereInput[]
  OR?: Prisma.membership_typeWhereInput[]
  NOT?: Prisma.membership_typeWhereInput | Prisma.membership_typeWhereInput[]
  discount_value?: Prisma.DecimalFilter<"membership_type"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  description?: Prisma.StringNullableFilter<"membership_type"> | string | null
  valid_until?: Prisma.DateTimeNullableFilter<"membership_type"> | Date | string | null
  is_active?: Prisma.BoolNullableFilter<"membership_type"> | boolean | null
  created_at?: Prisma.DateTimeNullableFilter<"membership_type"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"membership_type"> | Date | string | null
  customer?: Prisma.CustomerListRelationFilter
}, "membership_type_id" | "type" | "required_point">

export type membership_typeOrderByWithAggregationInput = {
  membership_type_id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  required_point?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  valid_until?: Prisma.SortOrderInput | Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.membership_typeCountOrderByAggregateInput
  _avg?: Prisma.membership_typeAvgOrderByAggregateInput
  _max?: Prisma.membership_typeMaxOrderByAggregateInput
  _min?: Prisma.membership_typeMinOrderByAggregateInput
  _sum?: Prisma.membership_typeSumOrderByAggregateInput
}

export type membership_typeScalarWhereWithAggregatesInput = {
  AND?: Prisma.membership_typeScalarWhereWithAggregatesInput | Prisma.membership_typeScalarWhereWithAggregatesInput[]
  OR?: Prisma.membership_typeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.membership_typeScalarWhereWithAggregatesInput | Prisma.membership_typeScalarWhereWithAggregatesInput[]
  membership_type_id?: Prisma.IntWithAggregatesFilter<"membership_type"> | number
  type?: Prisma.StringWithAggregatesFilter<"membership_type"> | string
  discount_value?: Prisma.DecimalWithAggregatesFilter<"membership_type"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point?: Prisma.IntWithAggregatesFilter<"membership_type"> | number
  description?: Prisma.StringNullableWithAggregatesFilter<"membership_type"> | string | null
  valid_until?: Prisma.DateTimeNullableWithAggregatesFilter<"membership_type"> | Date | string | null
  is_active?: Prisma.BoolNullableWithAggregatesFilter<"membership_type"> | boolean | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"membership_type"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"membership_type"> | Date | string | null
}

export type membership_typeCreateInput = {
  type: string
  discount_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point: number
  description?: string | null
  valid_until?: Date | string | null
  is_active?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  customer?: Prisma.customerCreateNestedManyWithoutMembership_typeInput
}

export type membership_typeUncheckedCreateInput = {
  membership_type_id?: number
  type: string
  discount_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point: number
  description?: string | null
  valid_until?: Date | string | null
  is_active?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  customer?: Prisma.customerUncheckedCreateNestedManyWithoutMembership_typeInput
}

export type membership_typeUpdateInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  discount_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customer?: Prisma.customerUpdateManyWithoutMembership_typeNestedInput
}

export type membership_typeUncheckedUpdateInput = {
  membership_type_id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  discount_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customer?: Prisma.customerUncheckedUpdateManyWithoutMembership_typeNestedInput
}

export type membership_typeCreateManyInput = {
  membership_type_id?: number
  type: string
  discount_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point: number
  description?: string | null
  valid_until?: Date | string | null
  is_active?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type membership_typeUpdateManyMutationInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  discount_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type membership_typeUncheckedUpdateManyInput = {
  membership_type_id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  discount_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type Membership_typeScalarRelationFilter = {
  is?: Prisma.membership_typeWhereInput
  isNot?: Prisma.membership_typeWhereInput
}

export type membership_typeCountOrderByAggregateInput = {
  membership_type_id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  required_point?: Prisma.SortOrder
  description?: Prisma.SortOrder
  valid_until?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type membership_typeAvgOrderByAggregateInput = {
  membership_type_id?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  required_point?: Prisma.SortOrder
}

export type membership_typeMaxOrderByAggregateInput = {
  membership_type_id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  required_point?: Prisma.SortOrder
  description?: Prisma.SortOrder
  valid_until?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type membership_typeMinOrderByAggregateInput = {
  membership_type_id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  required_point?: Prisma.SortOrder
  description?: Prisma.SortOrder
  valid_until?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type membership_typeSumOrderByAggregateInput = {
  membership_type_id?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  required_point?: Prisma.SortOrder
}

export type membership_typeCreateNestedOneWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.membership_typeCreateWithoutCustomerInput, Prisma.membership_typeUncheckedCreateWithoutCustomerInput>
  connectOrCreate?: Prisma.membership_typeCreateOrConnectWithoutCustomerInput
  connect?: Prisma.membership_typeWhereUniqueInput
}

export type membership_typeUpdateOneRequiredWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.membership_typeCreateWithoutCustomerInput, Prisma.membership_typeUncheckedCreateWithoutCustomerInput>
  connectOrCreate?: Prisma.membership_typeCreateOrConnectWithoutCustomerInput
  upsert?: Prisma.membership_typeUpsertWithoutCustomerInput
  connect?: Prisma.membership_typeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.membership_typeUpdateToOneWithWhereWithoutCustomerInput, Prisma.membership_typeUpdateWithoutCustomerInput>, Prisma.membership_typeUncheckedUpdateWithoutCustomerInput>
}

export type membership_typeCreateWithoutCustomerInput = {
  type: string
  discount_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point: number
  description?: string | null
  valid_until?: Date | string | null
  is_active?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type membership_typeUncheckedCreateWithoutCustomerInput = {
  membership_type_id?: number
  type: string
  discount_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point: number
  description?: string | null
  valid_until?: Date | string | null
  is_active?: boolean | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type membership_typeCreateOrConnectWithoutCustomerInput = {
  where: Prisma.membership_typeWhereUniqueInput
  create: Prisma.XOR<Prisma.membership_typeCreateWithoutCustomerInput, Prisma.membership_typeUncheckedCreateWithoutCustomerInput>
}

export type membership_typeUpsertWithoutCustomerInput = {
  update: Prisma.XOR<Prisma.membership_typeUpdateWithoutCustomerInput, Prisma.membership_typeUncheckedUpdateWithoutCustomerInput>
  create: Prisma.XOR<Prisma.membership_typeCreateWithoutCustomerInput, Prisma.membership_typeUncheckedCreateWithoutCustomerInput>
  where?: Prisma.membership_typeWhereInput
}

export type membership_typeUpdateToOneWithWhereWithoutCustomerInput = {
  where?: Prisma.membership_typeWhereInput
  data: Prisma.XOR<Prisma.membership_typeUpdateWithoutCustomerInput, Prisma.membership_typeUncheckedUpdateWithoutCustomerInput>
}

export type membership_typeUpdateWithoutCustomerInput = {
  type?: Prisma.StringFieldUpdateOperationsInput | string
  discount_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type membership_typeUncheckedUpdateWithoutCustomerInput = {
  membership_type_id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  discount_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  required_point?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type Membership_typeCountOutputType
 */

export type Membership_typeCountOutputType = {
  customer: number
}

export type Membership_typeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | Membership_typeCountOutputTypeCountCustomerArgs
}

/**
 * Membership_typeCountOutputType without action
 */
export type Membership_typeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Membership_typeCountOutputType
   */
  select?: Prisma.Membership_typeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Membership_typeCountOutputType without action
 */
export type Membership_typeCountOutputTypeCountCustomerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.customerWhereInput
}


export type membership_typeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  membership_type_id?: boolean
  type?: boolean
  discount_value?: boolean
  required_point?: boolean
  description?: boolean
  valid_until?: boolean
  is_active?: boolean
  created_at?: boolean
  updated_at?: boolean
  customer?: boolean | Prisma.membership_type$customerArgs<ExtArgs>
  _count?: boolean | Prisma.Membership_typeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["membership_type"]>

export type membership_typeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  membership_type_id?: boolean
  type?: boolean
  discount_value?: boolean
  required_point?: boolean
  description?: boolean
  valid_until?: boolean
  is_active?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["membership_type"]>

export type membership_typeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  membership_type_id?: boolean
  type?: boolean
  discount_value?: boolean
  required_point?: boolean
  description?: boolean
  valid_until?: boolean
  is_active?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["membership_type"]>

export type membership_typeSelectScalar = {
  membership_type_id?: boolean
  type?: boolean
  discount_value?: boolean
  required_point?: boolean
  description?: boolean
  valid_until?: boolean
  is_active?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type membership_typeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"membership_type_id" | "type" | "discount_value" | "required_point" | "description" | "valid_until" | "is_active" | "created_at" | "updated_at", ExtArgs["result"]["membership_type"]>
export type membership_typeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | Prisma.membership_type$customerArgs<ExtArgs>
  _count?: boolean | Prisma.Membership_typeCountOutputTypeDefaultArgs<ExtArgs>
}
export type membership_typeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type membership_typeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $membership_typePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "membership_type"
  objects: {
    customer: Prisma.$customerPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    membership_type_id: number
    type: string
    discount_value: runtime.Decimal
    required_point: number
    description: string | null
    valid_until: Date | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["membership_type"]>
  composites: {}
}

export type membership_typeGetPayload<S extends boolean | null | undefined | membership_typeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$membership_typePayload, S>

export type membership_typeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<membership_typeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Membership_typeCountAggregateInputType | true
  }

export interface membership_typeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['membership_type'], meta: { name: 'membership_type' } }
  /**
   * Find zero or one Membership_type that matches the filter.
   * @param {membership_typeFindUniqueArgs} args - Arguments to find a Membership_type
   * @example
   * // Get one Membership_type
   * const membership_type = await prisma.membership_type.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends membership_typeFindUniqueArgs>(args: Prisma.SelectSubset<T, membership_typeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Membership_type that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {membership_typeFindUniqueOrThrowArgs} args - Arguments to find a Membership_type
   * @example
   * // Get one Membership_type
   * const membership_type = await prisma.membership_type.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends membership_typeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, membership_typeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Membership_type that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {membership_typeFindFirstArgs} args - Arguments to find a Membership_type
   * @example
   * // Get one Membership_type
   * const membership_type = await prisma.membership_type.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends membership_typeFindFirstArgs>(args?: Prisma.SelectSubset<T, membership_typeFindFirstArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Membership_type that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {membership_typeFindFirstOrThrowArgs} args - Arguments to find a Membership_type
   * @example
   * // Get one Membership_type
   * const membership_type = await prisma.membership_type.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends membership_typeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, membership_typeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Membership_types that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {membership_typeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Membership_types
   * const membership_types = await prisma.membership_type.findMany()
   * 
   * // Get first 10 Membership_types
   * const membership_types = await prisma.membership_type.findMany({ take: 10 })
   * 
   * // Only select the `membership_type_id`
   * const membership_typeWithMembership_type_idOnly = await prisma.membership_type.findMany({ select: { membership_type_id: true } })
   * 
   */
  findMany<T extends membership_typeFindManyArgs>(args?: Prisma.SelectSubset<T, membership_typeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Membership_type.
   * @param {membership_typeCreateArgs} args - Arguments to create a Membership_type.
   * @example
   * // Create one Membership_type
   * const Membership_type = await prisma.membership_type.create({
   *   data: {
   *     // ... data to create a Membership_type
   *   }
   * })
   * 
   */
  create<T extends membership_typeCreateArgs>(args: Prisma.SelectSubset<T, membership_typeCreateArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Membership_types.
   * @param {membership_typeCreateManyArgs} args - Arguments to create many Membership_types.
   * @example
   * // Create many Membership_types
   * const membership_type = await prisma.membership_type.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends membership_typeCreateManyArgs>(args?: Prisma.SelectSubset<T, membership_typeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Membership_types and returns the data saved in the database.
   * @param {membership_typeCreateManyAndReturnArgs} args - Arguments to create many Membership_types.
   * @example
   * // Create many Membership_types
   * const membership_type = await prisma.membership_type.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Membership_types and only return the `membership_type_id`
   * const membership_typeWithMembership_type_idOnly = await prisma.membership_type.createManyAndReturn({
   *   select: { membership_type_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends membership_typeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, membership_typeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Membership_type.
   * @param {membership_typeDeleteArgs} args - Arguments to delete one Membership_type.
   * @example
   * // Delete one Membership_type
   * const Membership_type = await prisma.membership_type.delete({
   *   where: {
   *     // ... filter to delete one Membership_type
   *   }
   * })
   * 
   */
  delete<T extends membership_typeDeleteArgs>(args: Prisma.SelectSubset<T, membership_typeDeleteArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Membership_type.
   * @param {membership_typeUpdateArgs} args - Arguments to update one Membership_type.
   * @example
   * // Update one Membership_type
   * const membership_type = await prisma.membership_type.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends membership_typeUpdateArgs>(args: Prisma.SelectSubset<T, membership_typeUpdateArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Membership_types.
   * @param {membership_typeDeleteManyArgs} args - Arguments to filter Membership_types to delete.
   * @example
   * // Delete a few Membership_types
   * const { count } = await prisma.membership_type.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends membership_typeDeleteManyArgs>(args?: Prisma.SelectSubset<T, membership_typeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Membership_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {membership_typeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Membership_types
   * const membership_type = await prisma.membership_type.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends membership_typeUpdateManyArgs>(args: Prisma.SelectSubset<T, membership_typeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Membership_types and returns the data updated in the database.
   * @param {membership_typeUpdateManyAndReturnArgs} args - Arguments to update many Membership_types.
   * @example
   * // Update many Membership_types
   * const membership_type = await prisma.membership_type.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Membership_types and only return the `membership_type_id`
   * const membership_typeWithMembership_type_idOnly = await prisma.membership_type.updateManyAndReturn({
   *   select: { membership_type_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends membership_typeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, membership_typeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Membership_type.
   * @param {membership_typeUpsertArgs} args - Arguments to update or create a Membership_type.
   * @example
   * // Update or create a Membership_type
   * const membership_type = await prisma.membership_type.upsert({
   *   create: {
   *     // ... data to create a Membership_type
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Membership_type we want to update
   *   }
   * })
   */
  upsert<T extends membership_typeUpsertArgs>(args: Prisma.SelectSubset<T, membership_typeUpsertArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Membership_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {membership_typeCountArgs} args - Arguments to filter Membership_types to count.
   * @example
   * // Count the number of Membership_types
   * const count = await prisma.membership_type.count({
   *   where: {
   *     // ... the filter for the Membership_types we want to count
   *   }
   * })
  **/
  count<T extends membership_typeCountArgs>(
    args?: Prisma.Subset<T, membership_typeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Membership_typeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Membership_type.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Membership_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Membership_typeAggregateArgs>(args: Prisma.Subset<T, Membership_typeAggregateArgs>): Prisma.PrismaPromise<GetMembership_typeAggregateType<T>>

  /**
   * Group by Membership_type.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {membership_typeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends membership_typeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: membership_typeGroupByArgs['orderBy'] }
      : { orderBy?: membership_typeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, membership_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembership_typeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the membership_type model
 */
readonly fields: membership_typeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for membership_type.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__membership_typeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  customer<T extends Prisma.membership_type$customerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.membership_type$customerArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the membership_type model
 */
export interface membership_typeFieldRefs {
  readonly membership_type_id: Prisma.FieldRef<"membership_type", 'Int'>
  readonly type: Prisma.FieldRef<"membership_type", 'String'>
  readonly discount_value: Prisma.FieldRef<"membership_type", 'Decimal'>
  readonly required_point: Prisma.FieldRef<"membership_type", 'Int'>
  readonly description: Prisma.FieldRef<"membership_type", 'String'>
  readonly valid_until: Prisma.FieldRef<"membership_type", 'DateTime'>
  readonly is_active: Prisma.FieldRef<"membership_type", 'Boolean'>
  readonly created_at: Prisma.FieldRef<"membership_type", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"membership_type", 'DateTime'>
}
    

// Custom InputTypes
/**
 * membership_type findUnique
 */
export type membership_typeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * Filter, which membership_type to fetch.
   */
  where: Prisma.membership_typeWhereUniqueInput
}

/**
 * membership_type findUniqueOrThrow
 */
export type membership_typeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * Filter, which membership_type to fetch.
   */
  where: Prisma.membership_typeWhereUniqueInput
}

/**
 * membership_type findFirst
 */
export type membership_typeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * Filter, which membership_type to fetch.
   */
  where?: Prisma.membership_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of membership_types to fetch.
   */
  orderBy?: Prisma.membership_typeOrderByWithRelationInput | Prisma.membership_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for membership_types.
   */
  cursor?: Prisma.membership_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` membership_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` membership_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of membership_types.
   */
  distinct?: Prisma.Membership_typeScalarFieldEnum | Prisma.Membership_typeScalarFieldEnum[]
}

/**
 * membership_type findFirstOrThrow
 */
export type membership_typeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * Filter, which membership_type to fetch.
   */
  where?: Prisma.membership_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of membership_types to fetch.
   */
  orderBy?: Prisma.membership_typeOrderByWithRelationInput | Prisma.membership_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for membership_types.
   */
  cursor?: Prisma.membership_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` membership_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` membership_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of membership_types.
   */
  distinct?: Prisma.Membership_typeScalarFieldEnum | Prisma.Membership_typeScalarFieldEnum[]
}

/**
 * membership_type findMany
 */
export type membership_typeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * Filter, which membership_types to fetch.
   */
  where?: Prisma.membership_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of membership_types to fetch.
   */
  orderBy?: Prisma.membership_typeOrderByWithRelationInput | Prisma.membership_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing membership_types.
   */
  cursor?: Prisma.membership_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` membership_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` membership_types.
   */
  skip?: number
  distinct?: Prisma.Membership_typeScalarFieldEnum | Prisma.Membership_typeScalarFieldEnum[]
}

/**
 * membership_type create
 */
export type membership_typeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * The data needed to create a membership_type.
   */
  data: Prisma.XOR<Prisma.membership_typeCreateInput, Prisma.membership_typeUncheckedCreateInput>
}

/**
 * membership_type createMany
 */
export type membership_typeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many membership_types.
   */
  data: Prisma.membership_typeCreateManyInput | Prisma.membership_typeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * membership_type createManyAndReturn
 */
export type membership_typeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * The data used to create many membership_types.
   */
  data: Prisma.membership_typeCreateManyInput | Prisma.membership_typeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * membership_type update
 */
export type membership_typeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * The data needed to update a membership_type.
   */
  data: Prisma.XOR<Prisma.membership_typeUpdateInput, Prisma.membership_typeUncheckedUpdateInput>
  /**
   * Choose, which membership_type to update.
   */
  where: Prisma.membership_typeWhereUniqueInput
}

/**
 * membership_type updateMany
 */
export type membership_typeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update membership_types.
   */
  data: Prisma.XOR<Prisma.membership_typeUpdateManyMutationInput, Prisma.membership_typeUncheckedUpdateManyInput>
  /**
   * Filter which membership_types to update
   */
  where?: Prisma.membership_typeWhereInput
  /**
   * Limit how many membership_types to update.
   */
  limit?: number
}

/**
 * membership_type updateManyAndReturn
 */
export type membership_typeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * The data used to update membership_types.
   */
  data: Prisma.XOR<Prisma.membership_typeUpdateManyMutationInput, Prisma.membership_typeUncheckedUpdateManyInput>
  /**
   * Filter which membership_types to update
   */
  where?: Prisma.membership_typeWhereInput
  /**
   * Limit how many membership_types to update.
   */
  limit?: number
}

/**
 * membership_type upsert
 */
export type membership_typeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * The filter to search for the membership_type to update in case it exists.
   */
  where: Prisma.membership_typeWhereUniqueInput
  /**
   * In case the membership_type found by the `where` argument doesn't exist, create a new membership_type with this data.
   */
  create: Prisma.XOR<Prisma.membership_typeCreateInput, Prisma.membership_typeUncheckedCreateInput>
  /**
   * In case the membership_type was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.membership_typeUpdateInput, Prisma.membership_typeUncheckedUpdateInput>
}

/**
 * membership_type delete
 */
export type membership_typeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
  /**
   * Filter which membership_type to delete.
   */
  where: Prisma.membership_typeWhereUniqueInput
}

/**
 * membership_type deleteMany
 */
export type membership_typeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which membership_types to delete
   */
  where?: Prisma.membership_typeWhereInput
  /**
   * Limit how many membership_types to delete.
   */
  limit?: number
}

/**
 * membership_type.customer
 */
export type membership_type$customerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  where?: Prisma.customerWhereInput
  orderBy?: Prisma.customerOrderByWithRelationInput | Prisma.customerOrderByWithRelationInput[]
  cursor?: Prisma.customerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CustomerScalarFieldEnum | Prisma.CustomerScalarFieldEnum[]
}

/**
 * membership_type without action
 */
export type membership_typeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the membership_type
   */
  select?: Prisma.membership_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the membership_type
   */
  omit?: Prisma.membership_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.membership_typeInclude<ExtArgs> | null
}
