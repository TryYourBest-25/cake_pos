/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `employee` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model employee
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type employeeModel = runtime.Types.Result.DefaultSelection<Prisma.$employeePayload>

export type AggregateEmployee = {
  _count: EmployeeCountAggregateOutputType | null
  _avg: EmployeeAvgAggregateOutputType | null
  _sum: EmployeeSumAggregateOutputType | null
  _min: EmployeeMinAggregateOutputType | null
  _max: EmployeeMaxAggregateOutputType | null
}

export type EmployeeAvgAggregateOutputType = {
  employee_id: number | null
  account_id: number | null
}

export type EmployeeSumAggregateOutputType = {
  employee_id: number | null
  account_id: number | null
}

export type EmployeeMinAggregateOutputType = {
  employee_id: number | null
  account_id: number | null
  position: string | null
  last_name: string | null
  first_name: string | null
  gender: $Enums.gender_enum | null
  phone: string | null
  email: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type EmployeeMaxAggregateOutputType = {
  employee_id: number | null
  account_id: number | null
  position: string | null
  last_name: string | null
  first_name: string | null
  gender: $Enums.gender_enum | null
  phone: string | null
  email: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type EmployeeCountAggregateOutputType = {
  employee_id: number
  account_id: number
  position: number
  last_name: number
  first_name: number
  gender: number
  phone: number
  email: number
  created_at: number
  updated_at: number
  _all: number
}


export type EmployeeAvgAggregateInputType = {
  employee_id?: true
  account_id?: true
}

export type EmployeeSumAggregateInputType = {
  employee_id?: true
  account_id?: true
}

export type EmployeeMinAggregateInputType = {
  employee_id?: true
  account_id?: true
  position?: true
  last_name?: true
  first_name?: true
  gender?: true
  phone?: true
  email?: true
  created_at?: true
  updated_at?: true
}

export type EmployeeMaxAggregateInputType = {
  employee_id?: true
  account_id?: true
  position?: true
  last_name?: true
  first_name?: true
  gender?: true
  phone?: true
  email?: true
  created_at?: true
  updated_at?: true
}

export type EmployeeCountAggregateInputType = {
  employee_id?: true
  account_id?: true
  position?: true
  last_name?: true
  first_name?: true
  gender?: true
  phone?: true
  email?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type EmployeeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which employee to aggregate.
   */
  where?: Prisma.employeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of employees to fetch.
   */
  orderBy?: Prisma.employeeOrderByWithRelationInput | Prisma.employeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.employeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` employees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` employees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned employees
  **/
  _count?: true | EmployeeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EmployeeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EmployeeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmployeeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmployeeMaxAggregateInputType
}

export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
      [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmployee[P]>
    : Prisma.GetScalarType<T[P], AggregateEmployee[P]>
}




export type employeeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.employeeWhereInput
  orderBy?: Prisma.employeeOrderByWithAggregationInput | Prisma.employeeOrderByWithAggregationInput[]
  by: Prisma.EmployeeScalarFieldEnum[] | Prisma.EmployeeScalarFieldEnum
  having?: Prisma.employeeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmployeeCountAggregateInputType | true
  _avg?: EmployeeAvgAggregateInputType
  _sum?: EmployeeSumAggregateInputType
  _min?: EmployeeMinAggregateInputType
  _max?: EmployeeMaxAggregateInputType
}

export type EmployeeGroupByOutputType = {
  employee_id: number
  account_id: number
  position: string
  last_name: string
  first_name: string
  gender: $Enums.gender_enum | null
  phone: string
  email: string
  created_at: Date | null
  updated_at: Date | null
  _count: EmployeeCountAggregateOutputType | null
  _avg: EmployeeAvgAggregateOutputType | null
  _sum: EmployeeSumAggregateOutputType | null
  _min: EmployeeMinAggregateOutputType | null
  _max: EmployeeMaxAggregateOutputType | null
}

type GetEmployeeGroupByPayload<T extends employeeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmployeeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmployeeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmployeeGroupByOutputType[P]>
      }
    >
  > 



export type employeeWhereInput = {
  AND?: Prisma.employeeWhereInput | Prisma.employeeWhereInput[]
  OR?: Prisma.employeeWhereInput[]
  NOT?: Prisma.employeeWhereInput | Prisma.employeeWhereInput[]
  employee_id?: Prisma.IntFilter<"employee"> | number
  account_id?: Prisma.IntFilter<"employee"> | number
  position?: Prisma.StringFilter<"employee"> | string
  last_name?: Prisma.StringFilter<"employee"> | string
  first_name?: Prisma.StringFilter<"employee"> | string
  gender?: Prisma.Enumgender_enumNullableFilter<"employee"> | $Enums.gender_enum | null
  phone?: Prisma.StringFilter<"employee"> | string
  email?: Prisma.StringFilter<"employee"> | string
  created_at?: Prisma.DateTimeNullableFilter<"employee"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"employee"> | Date | string | null
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.accountWhereInput>
  order?: Prisma.OrderListRelationFilter
}

export type employeeOrderByWithRelationInput = {
  employee_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  position?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  account?: Prisma.accountOrderByWithRelationInput
  order?: Prisma.orderOrderByRelationAggregateInput
}

export type employeeWhereUniqueInput = Prisma.AtLeast<{
  employee_id?: number
  account_id?: number
  phone?: string
  email?: string
  AND?: Prisma.employeeWhereInput | Prisma.employeeWhereInput[]
  OR?: Prisma.employeeWhereInput[]
  NOT?: Prisma.employeeWhereInput | Prisma.employeeWhereInput[]
  position?: Prisma.StringFilter<"employee"> | string
  last_name?: Prisma.StringFilter<"employee"> | string
  first_name?: Prisma.StringFilter<"employee"> | string
  gender?: Prisma.Enumgender_enumNullableFilter<"employee"> | $Enums.gender_enum | null
  created_at?: Prisma.DateTimeNullableFilter<"employee"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"employee"> | Date | string | null
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.accountWhereInput>
  order?: Prisma.OrderListRelationFilter
}, "employee_id" | "account_id" | "phone" | "email">

export type employeeOrderByWithAggregationInput = {
  employee_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  position?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.employeeCountOrderByAggregateInput
  _avg?: Prisma.employeeAvgOrderByAggregateInput
  _max?: Prisma.employeeMaxOrderByAggregateInput
  _min?: Prisma.employeeMinOrderByAggregateInput
  _sum?: Prisma.employeeSumOrderByAggregateInput
}

export type employeeScalarWhereWithAggregatesInput = {
  AND?: Prisma.employeeScalarWhereWithAggregatesInput | Prisma.employeeScalarWhereWithAggregatesInput[]
  OR?: Prisma.employeeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.employeeScalarWhereWithAggregatesInput | Prisma.employeeScalarWhereWithAggregatesInput[]
  employee_id?: Prisma.IntWithAggregatesFilter<"employee"> | number
  account_id?: Prisma.IntWithAggregatesFilter<"employee"> | number
  position?: Prisma.StringWithAggregatesFilter<"employee"> | string
  last_name?: Prisma.StringWithAggregatesFilter<"employee"> | string
  first_name?: Prisma.StringWithAggregatesFilter<"employee"> | string
  gender?: Prisma.Enumgender_enumNullableWithAggregatesFilter<"employee"> | $Enums.gender_enum | null
  phone?: Prisma.StringWithAggregatesFilter<"employee"> | string
  email?: Prisma.StringWithAggregatesFilter<"employee"> | string
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"employee"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"employee"> | Date | string | null
}

export type employeeCreateInput = {
  position: string
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
  account: Prisma.accountCreateNestedOneWithoutEmployeeInput
  order?: Prisma.orderCreateNestedManyWithoutEmployeeInput
}

export type employeeUncheckedCreateInput = {
  employee_id?: number
  account_id: number
  position: string
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
  order?: Prisma.orderUncheckedCreateNestedManyWithoutEmployeeInput
}

export type employeeUpdateInput = {
  position?: Prisma.StringFieldUpdateOperationsInput | string
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  account?: Prisma.accountUpdateOneRequiredWithoutEmployeeNestedInput
  order?: Prisma.orderUpdateManyWithoutEmployeeNestedInput
}

export type employeeUncheckedUpdateInput = {
  employee_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  position?: Prisma.StringFieldUpdateOperationsInput | string
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  order?: Prisma.orderUncheckedUpdateManyWithoutEmployeeNestedInput
}

export type employeeCreateManyInput = {
  employee_id?: number
  account_id: number
  position: string
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type employeeUpdateManyMutationInput = {
  position?: Prisma.StringFieldUpdateOperationsInput | string
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type employeeUncheckedUpdateManyInput = {
  employee_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  position?: Prisma.StringFieldUpdateOperationsInput | string
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type EmployeeNullableScalarRelationFilter = {
  is?: Prisma.employeeWhereInput | null
  isNot?: Prisma.employeeWhereInput | null
}

export type employeeCountOrderByAggregateInput = {
  employee_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  position?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type employeeAvgOrderByAggregateInput = {
  employee_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
}

export type employeeMaxOrderByAggregateInput = {
  employee_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  position?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type employeeMinOrderByAggregateInput = {
  employee_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  position?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type employeeSumOrderByAggregateInput = {
  employee_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
}

export type employeeCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.employeeCreateWithoutAccountInput, Prisma.employeeUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.employeeCreateOrConnectWithoutAccountInput
  connect?: Prisma.employeeWhereUniqueInput
}

export type employeeUncheckedCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.employeeCreateWithoutAccountInput, Prisma.employeeUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.employeeCreateOrConnectWithoutAccountInput
  connect?: Prisma.employeeWhereUniqueInput
}

export type employeeUpdateOneWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.employeeCreateWithoutAccountInput, Prisma.employeeUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.employeeCreateOrConnectWithoutAccountInput
  upsert?: Prisma.employeeUpsertWithoutAccountInput
  disconnect?: Prisma.employeeWhereInput | boolean
  delete?: Prisma.employeeWhereInput | boolean
  connect?: Prisma.employeeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.employeeUpdateToOneWithWhereWithoutAccountInput, Prisma.employeeUpdateWithoutAccountInput>, Prisma.employeeUncheckedUpdateWithoutAccountInput>
}

export type employeeUncheckedUpdateOneWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.employeeCreateWithoutAccountInput, Prisma.employeeUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.employeeCreateOrConnectWithoutAccountInput
  upsert?: Prisma.employeeUpsertWithoutAccountInput
  disconnect?: Prisma.employeeWhereInput | boolean
  delete?: Prisma.employeeWhereInput | boolean
  connect?: Prisma.employeeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.employeeUpdateToOneWithWhereWithoutAccountInput, Prisma.employeeUpdateWithoutAccountInput>, Prisma.employeeUncheckedUpdateWithoutAccountInput>
}

export type employeeCreateNestedOneWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.employeeCreateWithoutOrderInput, Prisma.employeeUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.employeeCreateOrConnectWithoutOrderInput
  connect?: Prisma.employeeWhereUniqueInput
}

export type employeeUpdateOneWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.employeeCreateWithoutOrderInput, Prisma.employeeUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.employeeCreateOrConnectWithoutOrderInput
  upsert?: Prisma.employeeUpsertWithoutOrderInput
  disconnect?: Prisma.employeeWhereInput | boolean
  delete?: Prisma.employeeWhereInput | boolean
  connect?: Prisma.employeeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.employeeUpdateToOneWithWhereWithoutOrderInput, Prisma.employeeUpdateWithoutOrderInput>, Prisma.employeeUncheckedUpdateWithoutOrderInput>
}

export type employeeCreateWithoutAccountInput = {
  position: string
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
  order?: Prisma.orderCreateNestedManyWithoutEmployeeInput
}

export type employeeUncheckedCreateWithoutAccountInput = {
  employee_id?: number
  position: string
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
  order?: Prisma.orderUncheckedCreateNestedManyWithoutEmployeeInput
}

export type employeeCreateOrConnectWithoutAccountInput = {
  where: Prisma.employeeWhereUniqueInput
  create: Prisma.XOR<Prisma.employeeCreateWithoutAccountInput, Prisma.employeeUncheckedCreateWithoutAccountInput>
}

export type employeeUpsertWithoutAccountInput = {
  update: Prisma.XOR<Prisma.employeeUpdateWithoutAccountInput, Prisma.employeeUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.employeeCreateWithoutAccountInput, Prisma.employeeUncheckedCreateWithoutAccountInput>
  where?: Prisma.employeeWhereInput
}

export type employeeUpdateToOneWithWhereWithoutAccountInput = {
  where?: Prisma.employeeWhereInput
  data: Prisma.XOR<Prisma.employeeUpdateWithoutAccountInput, Prisma.employeeUncheckedUpdateWithoutAccountInput>
}

export type employeeUpdateWithoutAccountInput = {
  position?: Prisma.StringFieldUpdateOperationsInput | string
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  order?: Prisma.orderUpdateManyWithoutEmployeeNestedInput
}

export type employeeUncheckedUpdateWithoutAccountInput = {
  employee_id?: Prisma.IntFieldUpdateOperationsInput | number
  position?: Prisma.StringFieldUpdateOperationsInput | string
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  order?: Prisma.orderUncheckedUpdateManyWithoutEmployeeNestedInput
}

export type employeeCreateWithoutOrderInput = {
  position: string
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
  account: Prisma.accountCreateNestedOneWithoutEmployeeInput
}

export type employeeUncheckedCreateWithoutOrderInput = {
  employee_id?: number
  account_id: number
  position: string
  last_name: string
  first_name: string
  gender?: $Enums.gender_enum | null
  phone: string
  email: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type employeeCreateOrConnectWithoutOrderInput = {
  where: Prisma.employeeWhereUniqueInput
  create: Prisma.XOR<Prisma.employeeCreateWithoutOrderInput, Prisma.employeeUncheckedCreateWithoutOrderInput>
}

export type employeeUpsertWithoutOrderInput = {
  update: Prisma.XOR<Prisma.employeeUpdateWithoutOrderInput, Prisma.employeeUncheckedUpdateWithoutOrderInput>
  create: Prisma.XOR<Prisma.employeeCreateWithoutOrderInput, Prisma.employeeUncheckedCreateWithoutOrderInput>
  where?: Prisma.employeeWhereInput
}

export type employeeUpdateToOneWithWhereWithoutOrderInput = {
  where?: Prisma.employeeWhereInput
  data: Prisma.XOR<Prisma.employeeUpdateWithoutOrderInput, Prisma.employeeUncheckedUpdateWithoutOrderInput>
}

export type employeeUpdateWithoutOrderInput = {
  position?: Prisma.StringFieldUpdateOperationsInput | string
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  account?: Prisma.accountUpdateOneRequiredWithoutEmployeeNestedInput
}

export type employeeUncheckedUpdateWithoutOrderInput = {
  employee_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  position?: Prisma.StringFieldUpdateOperationsInput | string
  last_name?: Prisma.StringFieldUpdateOperationsInput | string
  first_name?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type EmployeeCountOutputType
 */

export type EmployeeCountOutputType = {
  order: number
}

export type EmployeeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | EmployeeCountOutputTypeCountOrderArgs
}

/**
 * EmployeeCountOutputType without action
 */
export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeCountOutputType
   */
  select?: Prisma.EmployeeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EmployeeCountOutputType without action
 */
export type EmployeeCountOutputTypeCountOrderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.orderWhereInput
}


export type employeeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  employee_id?: boolean
  account_id?: boolean
  position?: boolean
  last_name?: boolean
  first_name?: boolean
  gender?: boolean
  phone?: boolean
  email?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
  order?: boolean | Prisma.employee$orderArgs<ExtArgs>
  _count?: boolean | Prisma.EmployeeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["employee"]>

export type employeeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  employee_id?: boolean
  account_id?: boolean
  position?: boolean
  last_name?: boolean
  first_name?: boolean
  gender?: boolean
  phone?: boolean
  email?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["employee"]>

export type employeeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  employee_id?: boolean
  account_id?: boolean
  position?: boolean
  last_name?: boolean
  first_name?: boolean
  gender?: boolean
  phone?: boolean
  email?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["employee"]>

export type employeeSelectScalar = {
  employee_id?: boolean
  account_id?: boolean
  position?: boolean
  last_name?: boolean
  first_name?: boolean
  gender?: boolean
  phone?: boolean
  email?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type employeeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"employee_id" | "account_id" | "position" | "last_name" | "first_name" | "gender" | "phone" | "email" | "created_at" | "updated_at", ExtArgs["result"]["employee"]>
export type employeeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
  order?: boolean | Prisma.employee$orderArgs<ExtArgs>
  _count?: boolean | Prisma.EmployeeCountOutputTypeDefaultArgs<ExtArgs>
}
export type employeeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}
export type employeeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.accountDefaultArgs<ExtArgs>
}

export type $employeePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "employee"
  objects: {
    account: Prisma.$accountPayload<ExtArgs>
    order: Prisma.$orderPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    employee_id: number
    account_id: number
    position: string
    last_name: string
    first_name: string
    gender: $Enums.gender_enum | null
    phone: string
    email: string
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["employee"]>
  composites: {}
}

export type employeeGetPayload<S extends boolean | null | undefined | employeeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$employeePayload, S>

export type employeeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<employeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmployeeCountAggregateInputType | true
  }

export interface employeeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['employee'], meta: { name: 'employee' } }
  /**
   * Find zero or one Employee that matches the filter.
   * @param {employeeFindUniqueArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends employeeFindUniqueArgs>(args: Prisma.SelectSubset<T, employeeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {employeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends employeeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, employeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Employee that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {employeeFindFirstArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends employeeFindFirstArgs>(args?: Prisma.SelectSubset<T, employeeFindFirstArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Employee that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {employeeFindFirstOrThrowArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends employeeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, employeeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Employees that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {employeeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Employees
   * const employees = await prisma.employee.findMany()
   * 
   * // Get first 10 Employees
   * const employees = await prisma.employee.findMany({ take: 10 })
   * 
   * // Only select the `employee_id`
   * const employeeWithEmployee_idOnly = await prisma.employee.findMany({ select: { employee_id: true } })
   * 
   */
  findMany<T extends employeeFindManyArgs>(args?: Prisma.SelectSubset<T, employeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Employee.
   * @param {employeeCreateArgs} args - Arguments to create a Employee.
   * @example
   * // Create one Employee
   * const Employee = await prisma.employee.create({
   *   data: {
   *     // ... data to create a Employee
   *   }
   * })
   * 
   */
  create<T extends employeeCreateArgs>(args: Prisma.SelectSubset<T, employeeCreateArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Employees.
   * @param {employeeCreateManyArgs} args - Arguments to create many Employees.
   * @example
   * // Create many Employees
   * const employee = await prisma.employee.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends employeeCreateManyArgs>(args?: Prisma.SelectSubset<T, employeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Employees and returns the data saved in the database.
   * @param {employeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
   * @example
   * // Create many Employees
   * const employee = await prisma.employee.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Employees and only return the `employee_id`
   * const employeeWithEmployee_idOnly = await prisma.employee.createManyAndReturn({
   *   select: { employee_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends employeeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, employeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Employee.
   * @param {employeeDeleteArgs} args - Arguments to delete one Employee.
   * @example
   * // Delete one Employee
   * const Employee = await prisma.employee.delete({
   *   where: {
   *     // ... filter to delete one Employee
   *   }
   * })
   * 
   */
  delete<T extends employeeDeleteArgs>(args: Prisma.SelectSubset<T, employeeDeleteArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Employee.
   * @param {employeeUpdateArgs} args - Arguments to update one Employee.
   * @example
   * // Update one Employee
   * const employee = await prisma.employee.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends employeeUpdateArgs>(args: Prisma.SelectSubset<T, employeeUpdateArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Employees.
   * @param {employeeDeleteManyArgs} args - Arguments to filter Employees to delete.
   * @example
   * // Delete a few Employees
   * const { count } = await prisma.employee.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends employeeDeleteManyArgs>(args?: Prisma.SelectSubset<T, employeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Employees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {employeeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Employees
   * const employee = await prisma.employee.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends employeeUpdateManyArgs>(args: Prisma.SelectSubset<T, employeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Employees and returns the data updated in the database.
   * @param {employeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
   * @example
   * // Update many Employees
   * const employee = await prisma.employee.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Employees and only return the `employee_id`
   * const employeeWithEmployee_idOnly = await prisma.employee.updateManyAndReturn({
   *   select: { employee_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends employeeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, employeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Employee.
   * @param {employeeUpsertArgs} args - Arguments to update or create a Employee.
   * @example
   * // Update or create a Employee
   * const employee = await prisma.employee.upsert({
   *   create: {
   *     // ... data to create a Employee
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Employee we want to update
   *   }
   * })
   */
  upsert<T extends employeeUpsertArgs>(args: Prisma.SelectSubset<T, employeeUpsertArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Employees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {employeeCountArgs} args - Arguments to filter Employees to count.
   * @example
   * // Count the number of Employees
   * const count = await prisma.employee.count({
   *   where: {
   *     // ... the filter for the Employees we want to count
   *   }
   * })
  **/
  count<T extends employeeCountArgs>(
    args?: Prisma.Subset<T, employeeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmployeeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Employee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmployeeAggregateArgs>(args: Prisma.Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

  /**
   * Group by Employee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {employeeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends employeeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: employeeGroupByArgs['orderBy'] }
      : { orderBy?: employeeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, employeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the employee model
 */
readonly fields: employeeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for employee.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__employeeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.accountDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.accountDefaultArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  order<T extends Prisma.employee$orderArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.employee$orderArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the employee model
 */
export interface employeeFieldRefs {
  readonly employee_id: Prisma.FieldRef<"employee", 'Int'>
  readonly account_id: Prisma.FieldRef<"employee", 'Int'>
  readonly position: Prisma.FieldRef<"employee", 'String'>
  readonly last_name: Prisma.FieldRef<"employee", 'String'>
  readonly first_name: Prisma.FieldRef<"employee", 'String'>
  readonly gender: Prisma.FieldRef<"employee", 'gender_enum'>
  readonly phone: Prisma.FieldRef<"employee", 'String'>
  readonly email: Prisma.FieldRef<"employee", 'String'>
  readonly created_at: Prisma.FieldRef<"employee", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"employee", 'DateTime'>
}
    

// Custom InputTypes
/**
 * employee findUnique
 */
export type employeeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * Filter, which employee to fetch.
   */
  where: Prisma.employeeWhereUniqueInput
}

/**
 * employee findUniqueOrThrow
 */
export type employeeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * Filter, which employee to fetch.
   */
  where: Prisma.employeeWhereUniqueInput
}

/**
 * employee findFirst
 */
export type employeeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * Filter, which employee to fetch.
   */
  where?: Prisma.employeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of employees to fetch.
   */
  orderBy?: Prisma.employeeOrderByWithRelationInput | Prisma.employeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for employees.
   */
  cursor?: Prisma.employeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` employees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` employees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of employees.
   */
  distinct?: Prisma.EmployeeScalarFieldEnum | Prisma.EmployeeScalarFieldEnum[]
}

/**
 * employee findFirstOrThrow
 */
export type employeeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * Filter, which employee to fetch.
   */
  where?: Prisma.employeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of employees to fetch.
   */
  orderBy?: Prisma.employeeOrderByWithRelationInput | Prisma.employeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for employees.
   */
  cursor?: Prisma.employeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` employees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` employees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of employees.
   */
  distinct?: Prisma.EmployeeScalarFieldEnum | Prisma.EmployeeScalarFieldEnum[]
}

/**
 * employee findMany
 */
export type employeeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * Filter, which employees to fetch.
   */
  where?: Prisma.employeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of employees to fetch.
   */
  orderBy?: Prisma.employeeOrderByWithRelationInput | Prisma.employeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing employees.
   */
  cursor?: Prisma.employeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` employees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` employees.
   */
  skip?: number
  distinct?: Prisma.EmployeeScalarFieldEnum | Prisma.EmployeeScalarFieldEnum[]
}

/**
 * employee create
 */
export type employeeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * The data needed to create a employee.
   */
  data: Prisma.XOR<Prisma.employeeCreateInput, Prisma.employeeUncheckedCreateInput>
}

/**
 * employee createMany
 */
export type employeeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many employees.
   */
  data: Prisma.employeeCreateManyInput | Prisma.employeeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * employee createManyAndReturn
 */
export type employeeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * The data used to create many employees.
   */
  data: Prisma.employeeCreateManyInput | Prisma.employeeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * employee update
 */
export type employeeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * The data needed to update a employee.
   */
  data: Prisma.XOR<Prisma.employeeUpdateInput, Prisma.employeeUncheckedUpdateInput>
  /**
   * Choose, which employee to update.
   */
  where: Prisma.employeeWhereUniqueInput
}

/**
 * employee updateMany
 */
export type employeeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update employees.
   */
  data: Prisma.XOR<Prisma.employeeUpdateManyMutationInput, Prisma.employeeUncheckedUpdateManyInput>
  /**
   * Filter which employees to update
   */
  where?: Prisma.employeeWhereInput
  /**
   * Limit how many employees to update.
   */
  limit?: number
}

/**
 * employee updateManyAndReturn
 */
export type employeeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * The data used to update employees.
   */
  data: Prisma.XOR<Prisma.employeeUpdateManyMutationInput, Prisma.employeeUncheckedUpdateManyInput>
  /**
   * Filter which employees to update
   */
  where?: Prisma.employeeWhereInput
  /**
   * Limit how many employees to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * employee upsert
 */
export type employeeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * The filter to search for the employee to update in case it exists.
   */
  where: Prisma.employeeWhereUniqueInput
  /**
   * In case the employee found by the `where` argument doesn't exist, create a new employee with this data.
   */
  create: Prisma.XOR<Prisma.employeeCreateInput, Prisma.employeeUncheckedCreateInput>
  /**
   * In case the employee was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.employeeUpdateInput, Prisma.employeeUncheckedUpdateInput>
}

/**
 * employee delete
 */
export type employeeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  /**
   * Filter which employee to delete.
   */
  where: Prisma.employeeWhereUniqueInput
}

/**
 * employee deleteMany
 */
export type employeeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which employees to delete
   */
  where?: Prisma.employeeWhereInput
  /**
   * Limit how many employees to delete.
   */
  limit?: number
}

/**
 * employee.order
 */
export type employee$orderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the order
   */
  select?: Prisma.orderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the order
   */
  omit?: Prisma.orderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.orderInclude<ExtArgs> | null
  where?: Prisma.orderWhereInput
  orderBy?: Prisma.orderOrderByWithRelationInput | Prisma.orderOrderByWithRelationInput[]
  cursor?: Prisma.orderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderScalarFieldEnum | Prisma.OrderScalarFieldEnum[]
}

/**
 * employee without action
 */
export type employeeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
}
