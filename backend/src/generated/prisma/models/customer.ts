
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `customer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model customer
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type customerModel = runtime.Types.Result.DefaultSelection<Prisma.$customerPayload>

export type AggregateCustomer = {
  _count: CustomerCountAggregateOutputType | null
  _avg: CustomerAvgAggregateOutputType | null
  _sum: CustomerSumAggregateOutputType | null
  _min: CustomerMinAggregateOutputType | null
  _max: CustomerMaxAggregateOutputType | null
}

export type CustomerAvgAggregateOutputType = {
  customer_id: number | null
  membership_type_id: number | null
  account_id: number | null
  current_points: number | null
}

export type CustomerSumAggregateOutputType = {
  customer_id: number | null
  membership_type_id: number | null
  account_id: number | null
  current_points: number | null
}

export type CustomerMinAggregateOutputType = {
  customer_id: number | null
  membership_type_id: number | null
  account_id: number | null
  last_name: string | null
  first_name: string | null
  phone: string | null
  current_points: number | null
  gender: $Enums.gender_enum | null
  created_at: Date | null
  updated_at: Date | null
}

export type CustomerMaxAggregateOutputType = {
  customer_id: number | null
  membership_type_id: number | null
  account_id: number | null
  last_name: string | null
  first_name: string | null
  phone: string | null
  current_points: number | null
  gender: $Enums.gender_enum | null
  created_at: Date | null
  updated_at: Date | null
}

export type CustomerCountAggregateOutputType = {
  customer_id: number
  membership_type_id: number
  account_id: number
  last_name: number
  first_name: number
  phone: number
  current_points: number
  gender: number
  created_at: number
  updated_at: number
  _all: number
}


export type CustomerAvgAggregateInputType = {
  customer_id?: true
  membership_type_id?: true
  account_id?: true
  current_points?: true
}

export type CustomerSumAggregateInputType = {
  customer_id?: true
  membership_type_id?: true
  account_id?: true
  current_points?: true
}

export type CustomerMinAggregateInputType = {
  customer_id?: true
  membership_type_id?: true
  account_id?: true
  last_name?: true
  first_name?: true
  phone?: true
  current_points?: true
  gender?: true
  created_at?: true
  updated_at?: true
}

export type CustomerMaxAggregateInputType = {
  customer_id?: true
  membership_type_id?: true
  account_id?: true
  last_name?: true
  first_name?: true
  phone?: true
  current_points?: true
  gender?: true
  created_at?: true
  updated_at?: true
}

export type CustomerCountAggregateInputType = {
  customer_id?: true
  membership_type_id?: true
  account_id?: true
  last_name?: true
  first_name?: true
  phone?: true
  current_points?: true
  gender?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type CustomerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which customer to aggregate.
   */
  where?: Prisma.customerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customers to fetch.
   */
  orderBy?: Prisma.customerOrderByWithRelationInput | Prisma.customerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.customerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned customers
  **/
  _count?: true | CustomerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CustomerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CustomerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CustomerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CustomerMaxAggregateInputType
}

export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
      [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomer[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomer[P]>
}




export type customerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.customerWhereInput
  orderBy?: Prisma.customerOrderByWithAggregationInput | Prisma.customerOrderByWithAggregationInput[]
  by: Prisma.CustomerScalarFieldEnum[] | Prisma.CustomerScalarFieldEnum
  having?: Prisma.customerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CustomerCountAggregateInputType | true
  _avg?: CustomerAvgAggregateInputType
  _sum?: CustomerSumAggregateInputType
  _min?: CustomerMinAggregateInputType
  _max?: CustomerMaxAggregateInputType
}

export type CustomerGroupByOutputType = {
  customer_id: number
  membership_type_id: number
  account_id: number | null
  last_name: string | null
  first_name: string | null
  phone: string
  current_points: number | null
  gender: $Enums.gender_enum | null
  created_at: Date | null
  updated_at: Date | null
  _count: CustomerCountAggregateOutputType | null
  _avg: CustomerAvgAggregateOutputType | null
  _sum: CustomerSumAggregateOutputType | null
  _min: CustomerMinAggregateOutputType | null
  _max: CustomerMaxAggregateOutputType | null
}

type GetCustomerGroupByPayload<T extends customerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CustomerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CustomerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CustomerGroupByOutputType[P]>
      }
    >
  > 



export type customerWhereInput = {
  AND?: Prisma.customerWhereInput | Prisma.customerWhereInput[]
  OR?: Prisma.customerWhereInput[]
  NOT?: Prisma.customerWhereInput | Prisma.customerWhereInput[]
  customer_id?: Prisma.IntFilter<"customer"> | number
  membership_type_id?: Prisma.IntFilter<"customer"> | number
  account_id?: Prisma.IntNullableFilter<"customer"> | number | null
  last_name?: Prisma.StringNullableFilter<"customer"> | string | null
  first_name?: Prisma.StringNullableFilter<"customer"> | string | null
  phone?: Prisma.StringFilter<"customer"> | string
  current_points?: Prisma.IntNullableFilter<"customer"> | number | null
  gender?: Prisma.Enumgender_enumNullableFilter<"customer"> | $Enums.gender_enum | null
  created_at?: Prisma.DateTimeNullableFilter<"customer"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"customer"> | Date | string | null
  account?: Prisma.XOR<Prisma.AccountNullableScalarRelationFilter, Prisma.accountWhereInput> | null
  membership_type?: Prisma.XOR<Prisma.Membership_typeScalarRelationFilter, Prisma.membership_typeWhereInput>
  order?: Prisma.OrderListRelationFilter
}

export type customerOrderByWithRelationInput = {
  customer_id?: Prisma.SortOrder
  membership_type_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrderInput | Prisma.SortOrder
  last_name?: Prisma.SortOrderInput | Prisma.SortOrder
  first_name?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrder
  current_points?: Prisma.SortOrderInput | Prisma.SortOrder
  gender?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  account?: Prisma.accountOrderByWithRelationInput
  membership_type?: Prisma.membership_typeOrderByWithRelationInput
  order?: Prisma.orderOrderByRelationAggregateInput
}

export type customerWhereUniqueInput = Prisma.AtLeast<{
  customer_id?: number
  phone?: string
  AND?: Prisma.customerWhereInput | Prisma.customerWhereInput[]
  OR?: Prisma.customerWhereInput[]
  NOT?: Prisma.customerWhereInput | Prisma.customerWhereInput[]
  membership_type_id?: Prisma.IntFilter<"customer"> | number
  account_id?: Prisma.IntNullableFilter<"customer"> | number | null
  last_name?: Prisma.StringNullableFilter<"customer"> | string | null
  first_name?: Prisma.StringNullableFilter<"customer"> | string | null
  current_points?: Prisma.IntNullableFilter<"customer"> | number | null
  gender?: Prisma.Enumgender_enumNullableFilter<"customer"> | $Enums.gender_enum | null
  created_at?: Prisma.DateTimeNullableFilter<"customer"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"customer"> | Date | string | null
  account?: Prisma.XOR<Prisma.AccountNullableScalarRelationFilter, Prisma.accountWhereInput> | null
  membership_type?: Prisma.XOR<Prisma.Membership_typeScalarRelationFilter, Prisma.membership_typeWhereInput>
  order?: Prisma.OrderListRelationFilter
}, "customer_id" | "phone">

export type customerOrderByWithAggregationInput = {
  customer_id?: Prisma.SortOrder
  membership_type_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrderInput | Prisma.SortOrder
  last_name?: Prisma.SortOrderInput | Prisma.SortOrder
  first_name?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrder
  current_points?: Prisma.SortOrderInput | Prisma.SortOrder
  gender?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.customerCountOrderByAggregateInput
  _avg?: Prisma.customerAvgOrderByAggregateInput
  _max?: Prisma.customerMaxOrderByAggregateInput
  _min?: Prisma.customerMinOrderByAggregateInput
  _sum?: Prisma.customerSumOrderByAggregateInput
}

export type customerScalarWhereWithAggregatesInput = {
  AND?: Prisma.customerScalarWhereWithAggregatesInput | Prisma.customerScalarWhereWithAggregatesInput[]
  OR?: Prisma.customerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.customerScalarWhereWithAggregatesInput | Prisma.customerScalarWhereWithAggregatesInput[]
  customer_id?: Prisma.IntWithAggregatesFilter<"customer"> | number
  membership_type_id?: Prisma.IntWithAggregatesFilter<"customer"> | number
  account_id?: Prisma.IntNullableWithAggregatesFilter<"customer"> | number | null
  last_name?: Prisma.StringNullableWithAggregatesFilter<"customer"> | string | null
  first_name?: Prisma.StringNullableWithAggregatesFilter<"customer"> | string | null
  phone?: Prisma.StringWithAggregatesFilter<"customer"> | string
  current_points?: Prisma.IntNullableWithAggregatesFilter<"customer"> | number | null
  gender?: Prisma.Enumgender_enumNullableWithAggregatesFilter<"customer"> | $Enums.gender_enum | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"customer"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"customer"> | Date | string | null
}

export type customerCreateInput = {
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  account?: Prisma.accountCreateNestedOneWithoutCustomerInput
  membership_type: Prisma.membership_typeCreateNestedOneWithoutCustomerInput
  order?: Prisma.orderCreateNestedManyWithoutCustomerInput
}

export type customerUncheckedCreateInput = {
  customer_id?: number
  membership_type_id: number
  account_id?: number | null
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  order?: Prisma.orderUncheckedCreateNestedManyWithoutCustomerInput
}

export type customerUpdateInput = {
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  account?: Prisma.accountUpdateOneWithoutCustomerNestedInput
  membership_type?: Prisma.membership_typeUpdateOneRequiredWithoutCustomerNestedInput
  order?: Prisma.orderUpdateManyWithoutCustomerNestedInput
}

export type customerUncheckedUpdateInput = {
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_type_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  order?: Prisma.orderUncheckedUpdateManyWithoutCustomerNestedInput
}

export type customerCreateManyInput = {
  customer_id?: number
  membership_type_id: number
  account_id?: number | null
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type customerUpdateManyMutationInput = {
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type customerUncheckedUpdateManyInput = {
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_type_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CustomerListRelationFilter = {
  every?: Prisma.customerWhereInput
  some?: Prisma.customerWhereInput
  none?: Prisma.customerWhereInput
}

export type customerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type customerCountOrderByAggregateInput = {
  customer_id?: Prisma.SortOrder
  membership_type_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  current_points?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type customerAvgOrderByAggregateInput = {
  customer_id?: Prisma.SortOrder
  membership_type_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  current_points?: Prisma.SortOrder
}

export type customerMaxOrderByAggregateInput = {
  customer_id?: Prisma.SortOrder
  membership_type_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  current_points?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type customerMinOrderByAggregateInput = {
  customer_id?: Prisma.SortOrder
  membership_type_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  last_name?: Prisma.SortOrder
  first_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  current_points?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type customerSumOrderByAggregateInput = {
  customer_id?: Prisma.SortOrder
  membership_type_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  current_points?: Prisma.SortOrder
}

export type CustomerNullableScalarRelationFilter = {
  is?: Prisma.customerWhereInput | null
  isNot?: Prisma.customerWhereInput | null
}

export type customerCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutAccountInput, Prisma.customerUncheckedCreateWithoutAccountInput> | Prisma.customerCreateWithoutAccountInput[] | Prisma.customerUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutAccountInput | Prisma.customerCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.customerCreateManyAccountInputEnvelope
  connect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
}

export type customerUncheckedCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutAccountInput, Prisma.customerUncheckedCreateWithoutAccountInput> | Prisma.customerCreateWithoutAccountInput[] | Prisma.customerUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutAccountInput | Prisma.customerCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.customerCreateManyAccountInputEnvelope
  connect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
}

export type customerUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutAccountInput, Prisma.customerUncheckedCreateWithoutAccountInput> | Prisma.customerCreateWithoutAccountInput[] | Prisma.customerUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutAccountInput | Prisma.customerCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.customerUpsertWithWhereUniqueWithoutAccountInput | Prisma.customerUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.customerCreateManyAccountInputEnvelope
  set?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  disconnect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  delete?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  connect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  update?: Prisma.customerUpdateWithWhereUniqueWithoutAccountInput | Prisma.customerUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.customerUpdateManyWithWhereWithoutAccountInput | Prisma.customerUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.customerScalarWhereInput | Prisma.customerScalarWhereInput[]
}

export type customerUncheckedUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutAccountInput, Prisma.customerUncheckedCreateWithoutAccountInput> | Prisma.customerCreateWithoutAccountInput[] | Prisma.customerUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutAccountInput | Prisma.customerCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.customerUpsertWithWhereUniqueWithoutAccountInput | Prisma.customerUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.customerCreateManyAccountInputEnvelope
  set?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  disconnect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  delete?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  connect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  update?: Prisma.customerUpdateWithWhereUniqueWithoutAccountInput | Prisma.customerUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.customerUpdateManyWithWhereWithoutAccountInput | Prisma.customerUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.customerScalarWhereInput | Prisma.customerScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableEnumgender_enumFieldUpdateOperationsInput = {
  set?: $Enums.gender_enum | null
}

export type customerCreateNestedManyWithoutMembership_typeInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutMembership_typeInput, Prisma.customerUncheckedCreateWithoutMembership_typeInput> | Prisma.customerCreateWithoutMembership_typeInput[] | Prisma.customerUncheckedCreateWithoutMembership_typeInput[]
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutMembership_typeInput | Prisma.customerCreateOrConnectWithoutMembership_typeInput[]
  createMany?: Prisma.customerCreateManyMembership_typeInputEnvelope
  connect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
}

export type customerUncheckedCreateNestedManyWithoutMembership_typeInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutMembership_typeInput, Prisma.customerUncheckedCreateWithoutMembership_typeInput> | Prisma.customerCreateWithoutMembership_typeInput[] | Prisma.customerUncheckedCreateWithoutMembership_typeInput[]
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutMembership_typeInput | Prisma.customerCreateOrConnectWithoutMembership_typeInput[]
  createMany?: Prisma.customerCreateManyMembership_typeInputEnvelope
  connect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
}

export type customerUpdateManyWithoutMembership_typeNestedInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutMembership_typeInput, Prisma.customerUncheckedCreateWithoutMembership_typeInput> | Prisma.customerCreateWithoutMembership_typeInput[] | Prisma.customerUncheckedCreateWithoutMembership_typeInput[]
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutMembership_typeInput | Prisma.customerCreateOrConnectWithoutMembership_typeInput[]
  upsert?: Prisma.customerUpsertWithWhereUniqueWithoutMembership_typeInput | Prisma.customerUpsertWithWhereUniqueWithoutMembership_typeInput[]
  createMany?: Prisma.customerCreateManyMembership_typeInputEnvelope
  set?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  disconnect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  delete?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  connect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  update?: Prisma.customerUpdateWithWhereUniqueWithoutMembership_typeInput | Prisma.customerUpdateWithWhereUniqueWithoutMembership_typeInput[]
  updateMany?: Prisma.customerUpdateManyWithWhereWithoutMembership_typeInput | Prisma.customerUpdateManyWithWhereWithoutMembership_typeInput[]
  deleteMany?: Prisma.customerScalarWhereInput | Prisma.customerScalarWhereInput[]
}

export type customerUncheckedUpdateManyWithoutMembership_typeNestedInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutMembership_typeInput, Prisma.customerUncheckedCreateWithoutMembership_typeInput> | Prisma.customerCreateWithoutMembership_typeInput[] | Prisma.customerUncheckedCreateWithoutMembership_typeInput[]
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutMembership_typeInput | Prisma.customerCreateOrConnectWithoutMembership_typeInput[]
  upsert?: Prisma.customerUpsertWithWhereUniqueWithoutMembership_typeInput | Prisma.customerUpsertWithWhereUniqueWithoutMembership_typeInput[]
  createMany?: Prisma.customerCreateManyMembership_typeInputEnvelope
  set?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  disconnect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  delete?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  connect?: Prisma.customerWhereUniqueInput | Prisma.customerWhereUniqueInput[]
  update?: Prisma.customerUpdateWithWhereUniqueWithoutMembership_typeInput | Prisma.customerUpdateWithWhereUniqueWithoutMembership_typeInput[]
  updateMany?: Prisma.customerUpdateManyWithWhereWithoutMembership_typeInput | Prisma.customerUpdateManyWithWhereWithoutMembership_typeInput[]
  deleteMany?: Prisma.customerScalarWhereInput | Prisma.customerScalarWhereInput[]
}

export type customerCreateNestedOneWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutOrderInput, Prisma.customerUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutOrderInput
  connect?: Prisma.customerWhereUniqueInput
}

export type customerUpdateOneWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.customerCreateWithoutOrderInput, Prisma.customerUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.customerCreateOrConnectWithoutOrderInput
  upsert?: Prisma.customerUpsertWithoutOrderInput
  disconnect?: Prisma.customerWhereInput | boolean
  delete?: Prisma.customerWhereInput | boolean
  connect?: Prisma.customerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.customerUpdateToOneWithWhereWithoutOrderInput, Prisma.customerUpdateWithoutOrderInput>, Prisma.customerUncheckedUpdateWithoutOrderInput>
}

export type customerCreateWithoutAccountInput = {
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  membership_type: Prisma.membership_typeCreateNestedOneWithoutCustomerInput
  order?: Prisma.orderCreateNestedManyWithoutCustomerInput
}

export type customerUncheckedCreateWithoutAccountInput = {
  customer_id?: number
  membership_type_id: number
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  order?: Prisma.orderUncheckedCreateNestedManyWithoutCustomerInput
}

export type customerCreateOrConnectWithoutAccountInput = {
  where: Prisma.customerWhereUniqueInput
  create: Prisma.XOR<Prisma.customerCreateWithoutAccountInput, Prisma.customerUncheckedCreateWithoutAccountInput>
}

export type customerCreateManyAccountInputEnvelope = {
  data: Prisma.customerCreateManyAccountInput | Prisma.customerCreateManyAccountInput[]
  skipDuplicates?: boolean
}

export type customerUpsertWithWhereUniqueWithoutAccountInput = {
  where: Prisma.customerWhereUniqueInput
  update: Prisma.XOR<Prisma.customerUpdateWithoutAccountInput, Prisma.customerUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.customerCreateWithoutAccountInput, Prisma.customerUncheckedCreateWithoutAccountInput>
}

export type customerUpdateWithWhereUniqueWithoutAccountInput = {
  where: Prisma.customerWhereUniqueInput
  data: Prisma.XOR<Prisma.customerUpdateWithoutAccountInput, Prisma.customerUncheckedUpdateWithoutAccountInput>
}

export type customerUpdateManyWithWhereWithoutAccountInput = {
  where: Prisma.customerScalarWhereInput
  data: Prisma.XOR<Prisma.customerUpdateManyMutationInput, Prisma.customerUncheckedUpdateManyWithoutAccountInput>
}

export type customerScalarWhereInput = {
  AND?: Prisma.customerScalarWhereInput | Prisma.customerScalarWhereInput[]
  OR?: Prisma.customerScalarWhereInput[]
  NOT?: Prisma.customerScalarWhereInput | Prisma.customerScalarWhereInput[]
  customer_id?: Prisma.IntFilter<"customer"> | number
  membership_type_id?: Prisma.IntFilter<"customer"> | number
  account_id?: Prisma.IntNullableFilter<"customer"> | number | null
  last_name?: Prisma.StringNullableFilter<"customer"> | string | null
  first_name?: Prisma.StringNullableFilter<"customer"> | string | null
  phone?: Prisma.StringFilter<"customer"> | string
  current_points?: Prisma.IntNullableFilter<"customer"> | number | null
  gender?: Prisma.Enumgender_enumNullableFilter<"customer"> | $Enums.gender_enum | null
  created_at?: Prisma.DateTimeNullableFilter<"customer"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"customer"> | Date | string | null
}

export type customerCreateWithoutMembership_typeInput = {
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  account?: Prisma.accountCreateNestedOneWithoutCustomerInput
  order?: Prisma.orderCreateNestedManyWithoutCustomerInput
}

export type customerUncheckedCreateWithoutMembership_typeInput = {
  customer_id?: number
  account_id?: number | null
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  order?: Prisma.orderUncheckedCreateNestedManyWithoutCustomerInput
}

export type customerCreateOrConnectWithoutMembership_typeInput = {
  where: Prisma.customerWhereUniqueInput
  create: Prisma.XOR<Prisma.customerCreateWithoutMembership_typeInput, Prisma.customerUncheckedCreateWithoutMembership_typeInput>
}

export type customerCreateManyMembership_typeInputEnvelope = {
  data: Prisma.customerCreateManyMembership_typeInput | Prisma.customerCreateManyMembership_typeInput[]
  skipDuplicates?: boolean
}

export type customerUpsertWithWhereUniqueWithoutMembership_typeInput = {
  where: Prisma.customerWhereUniqueInput
  update: Prisma.XOR<Prisma.customerUpdateWithoutMembership_typeInput, Prisma.customerUncheckedUpdateWithoutMembership_typeInput>
  create: Prisma.XOR<Prisma.customerCreateWithoutMembership_typeInput, Prisma.customerUncheckedCreateWithoutMembership_typeInput>
}

export type customerUpdateWithWhereUniqueWithoutMembership_typeInput = {
  where: Prisma.customerWhereUniqueInput
  data: Prisma.XOR<Prisma.customerUpdateWithoutMembership_typeInput, Prisma.customerUncheckedUpdateWithoutMembership_typeInput>
}

export type customerUpdateManyWithWhereWithoutMembership_typeInput = {
  where: Prisma.customerScalarWhereInput
  data: Prisma.XOR<Prisma.customerUpdateManyMutationInput, Prisma.customerUncheckedUpdateManyWithoutMembership_typeInput>
}

export type customerCreateWithoutOrderInput = {
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  account?: Prisma.accountCreateNestedOneWithoutCustomerInput
  membership_type: Prisma.membership_typeCreateNestedOneWithoutCustomerInput
}

export type customerUncheckedCreateWithoutOrderInput = {
  customer_id?: number
  membership_type_id: number
  account_id?: number | null
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type customerCreateOrConnectWithoutOrderInput = {
  where: Prisma.customerWhereUniqueInput
  create: Prisma.XOR<Prisma.customerCreateWithoutOrderInput, Prisma.customerUncheckedCreateWithoutOrderInput>
}

export type customerUpsertWithoutOrderInput = {
  update: Prisma.XOR<Prisma.customerUpdateWithoutOrderInput, Prisma.customerUncheckedUpdateWithoutOrderInput>
  create: Prisma.XOR<Prisma.customerCreateWithoutOrderInput, Prisma.customerUncheckedCreateWithoutOrderInput>
  where?: Prisma.customerWhereInput
}

export type customerUpdateToOneWithWhereWithoutOrderInput = {
  where?: Prisma.customerWhereInput
  data: Prisma.XOR<Prisma.customerUpdateWithoutOrderInput, Prisma.customerUncheckedUpdateWithoutOrderInput>
}

export type customerUpdateWithoutOrderInput = {
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  account?: Prisma.accountUpdateOneWithoutCustomerNestedInput
  membership_type?: Prisma.membership_typeUpdateOneRequiredWithoutCustomerNestedInput
}

export type customerUncheckedUpdateWithoutOrderInput = {
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_type_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type customerCreateManyAccountInput = {
  customer_id?: number
  membership_type_id: number
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type customerUpdateWithoutAccountInput = {
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  membership_type?: Prisma.membership_typeUpdateOneRequiredWithoutCustomerNestedInput
  order?: Prisma.orderUpdateManyWithoutCustomerNestedInput
}

export type customerUncheckedUpdateWithoutAccountInput = {
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_type_id?: Prisma.IntFieldUpdateOperationsInput | number
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  order?: Prisma.orderUncheckedUpdateManyWithoutCustomerNestedInput
}

export type customerUncheckedUpdateManyWithoutAccountInput = {
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_type_id?: Prisma.IntFieldUpdateOperationsInput | number
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type customerCreateManyMembership_typeInput = {
  customer_id?: number
  account_id?: number | null
  last_name?: string | null
  first_name?: string | null
  phone: string
  current_points?: number | null
  gender?: $Enums.gender_enum | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type customerUpdateWithoutMembership_typeInput = {
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  account?: Prisma.accountUpdateOneWithoutCustomerNestedInput
  order?: Prisma.orderUpdateManyWithoutCustomerNestedInput
}

export type customerUncheckedUpdateWithoutMembership_typeInput = {
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  order?: Prisma.orderUncheckedUpdateManyWithoutCustomerNestedInput
}

export type customerUncheckedUpdateManyWithoutMembership_typeInput = {
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  account_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  last_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  first_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  current_points?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  gender?: Prisma.NullableEnumgender_enumFieldUpdateOperationsInput | $Enums.gender_enum | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type CustomerCountOutputType
 */

export type CustomerCountOutputType = {
  order: number
}

export type CustomerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | CustomerCountOutputTypeCountOrderArgs
}

/**
 * CustomerCountOutputType without action
 */
export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerCountOutputType
   */
  select?: Prisma.CustomerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CustomerCountOutputType without action
 */
export type CustomerCountOutputTypeCountOrderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.orderWhereInput
}


export type customerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  customer_id?: boolean
  membership_type_id?: boolean
  account_id?: boolean
  last_name?: boolean
  first_name?: boolean
  phone?: boolean
  current_points?: boolean
  gender?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.customer$accountArgs<ExtArgs>
  membership_type?: boolean | Prisma.membership_typeDefaultArgs<ExtArgs>
  order?: boolean | Prisma.customer$orderArgs<ExtArgs>
  _count?: boolean | Prisma.CustomerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customer"]>

export type customerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  customer_id?: boolean
  membership_type_id?: boolean
  account_id?: boolean
  last_name?: boolean
  first_name?: boolean
  phone?: boolean
  current_points?: boolean
  gender?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.customer$accountArgs<ExtArgs>
  membership_type?: boolean | Prisma.membership_typeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customer"]>

export type customerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  customer_id?: boolean
  membership_type_id?: boolean
  account_id?: boolean
  last_name?: boolean
  first_name?: boolean
  phone?: boolean
  current_points?: boolean
  gender?: boolean
  created_at?: boolean
  updated_at?: boolean
  account?: boolean | Prisma.customer$accountArgs<ExtArgs>
  membership_type?: boolean | Prisma.membership_typeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customer"]>

export type customerSelectScalar = {
  customer_id?: boolean
  membership_type_id?: boolean
  account_id?: boolean
  last_name?: boolean
  first_name?: boolean
  phone?: boolean
  current_points?: boolean
  gender?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type customerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"customer_id" | "membership_type_id" | "account_id" | "last_name" | "first_name" | "phone" | "current_points" | "gender" | "created_at" | "updated_at", ExtArgs["result"]["customer"]>
export type customerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.customer$accountArgs<ExtArgs>
  membership_type?: boolean | Prisma.membership_typeDefaultArgs<ExtArgs>
  order?: boolean | Prisma.customer$orderArgs<ExtArgs>
  _count?: boolean | Prisma.CustomerCountOutputTypeDefaultArgs<ExtArgs>
}
export type customerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.customer$accountArgs<ExtArgs>
  membership_type?: boolean | Prisma.membership_typeDefaultArgs<ExtArgs>
}
export type customerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.customer$accountArgs<ExtArgs>
  membership_type?: boolean | Prisma.membership_typeDefaultArgs<ExtArgs>
}

export type $customerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "customer"
  objects: {
    account: Prisma.$accountPayload<ExtArgs> | null
    membership_type: Prisma.$membership_typePayload<ExtArgs>
    order: Prisma.$orderPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    customer_id: number
    membership_type_id: number
    account_id: number | null
    last_name: string | null
    first_name: string | null
    phone: string
    current_points: number | null
    gender: $Enums.gender_enum | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["customer"]>
  composites: {}
}

export type customerGetPayload<S extends boolean | null | undefined | customerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$customerPayload, S>

export type customerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<customerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CustomerCountAggregateInputType | true
  }

export interface customerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customer'], meta: { name: 'customer' } }
  /**
   * Find zero or one Customer that matches the filter.
   * @param {customerFindUniqueArgs} args - Arguments to find a Customer
   * @example
   * // Get one Customer
   * const customer = await prisma.customer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends customerFindUniqueArgs>(args: Prisma.SelectSubset<T, customerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__customerClient<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {customerFindUniqueOrThrowArgs} args - Arguments to find a Customer
   * @example
   * // Get one Customer
   * const customer = await prisma.customer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends customerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, customerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__customerClient<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Customer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerFindFirstArgs} args - Arguments to find a Customer
   * @example
   * // Get one Customer
   * const customer = await prisma.customer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends customerFindFirstArgs>(args?: Prisma.SelectSubset<T, customerFindFirstArgs<ExtArgs>>): Prisma.Prisma__customerClient<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Customer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerFindFirstOrThrowArgs} args - Arguments to find a Customer
   * @example
   * // Get one Customer
   * const customer = await prisma.customer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends customerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, customerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__customerClient<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Customers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Customers
   * const customers = await prisma.customer.findMany()
   * 
   * // Get first 10 Customers
   * const customers = await prisma.customer.findMany({ take: 10 })
   * 
   * // Only select the `customer_id`
   * const customerWithCustomer_idOnly = await prisma.customer.findMany({ select: { customer_id: true } })
   * 
   */
  findMany<T extends customerFindManyArgs>(args?: Prisma.SelectSubset<T, customerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Customer.
   * @param {customerCreateArgs} args - Arguments to create a Customer.
   * @example
   * // Create one Customer
   * const Customer = await prisma.customer.create({
   *   data: {
   *     // ... data to create a Customer
   *   }
   * })
   * 
   */
  create<T extends customerCreateArgs>(args: Prisma.SelectSubset<T, customerCreateArgs<ExtArgs>>): Prisma.Prisma__customerClient<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Customers.
   * @param {customerCreateManyArgs} args - Arguments to create many Customers.
   * @example
   * // Create many Customers
   * const customer = await prisma.customer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends customerCreateManyArgs>(args?: Prisma.SelectSubset<T, customerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Customers and returns the data saved in the database.
   * @param {customerCreateManyAndReturnArgs} args - Arguments to create many Customers.
   * @example
   * // Create many Customers
   * const customer = await prisma.customer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Customers and only return the `customer_id`
   * const customerWithCustomer_idOnly = await prisma.customer.createManyAndReturn({
   *   select: { customer_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends customerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, customerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Customer.
   * @param {customerDeleteArgs} args - Arguments to delete one Customer.
   * @example
   * // Delete one Customer
   * const Customer = await prisma.customer.delete({
   *   where: {
   *     // ... filter to delete one Customer
   *   }
   * })
   * 
   */
  delete<T extends customerDeleteArgs>(args: Prisma.SelectSubset<T, customerDeleteArgs<ExtArgs>>): Prisma.Prisma__customerClient<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Customer.
   * @param {customerUpdateArgs} args - Arguments to update one Customer.
   * @example
   * // Update one Customer
   * const customer = await prisma.customer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends customerUpdateArgs>(args: Prisma.SelectSubset<T, customerUpdateArgs<ExtArgs>>): Prisma.Prisma__customerClient<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Customers.
   * @param {customerDeleteManyArgs} args - Arguments to filter Customers to delete.
   * @example
   * // Delete a few Customers
   * const { count } = await prisma.customer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends customerDeleteManyArgs>(args?: Prisma.SelectSubset<T, customerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Customers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Customers
   * const customer = await prisma.customer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends customerUpdateManyArgs>(args: Prisma.SelectSubset<T, customerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Customers and returns the data updated in the database.
   * @param {customerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
   * @example
   * // Update many Customers
   * const customer = await prisma.customer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Customers and only return the `customer_id`
   * const customerWithCustomer_idOnly = await prisma.customer.updateManyAndReturn({
   *   select: { customer_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends customerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, customerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Customer.
   * @param {customerUpsertArgs} args - Arguments to update or create a Customer.
   * @example
   * // Update or create a Customer
   * const customer = await prisma.customer.upsert({
   *   create: {
   *     // ... data to create a Customer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Customer we want to update
   *   }
   * })
   */
  upsert<T extends customerUpsertArgs>(args: Prisma.SelectSubset<T, customerUpsertArgs<ExtArgs>>): Prisma.Prisma__customerClient<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Customers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerCountArgs} args - Arguments to filter Customers to count.
   * @example
   * // Count the number of Customers
   * const count = await prisma.customer.count({
   *   where: {
   *     // ... the filter for the Customers we want to count
   *   }
   * })
  **/
  count<T extends customerCountArgs>(
    args?: Prisma.Subset<T, customerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CustomerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Customer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CustomerAggregateArgs>(args: Prisma.Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

  /**
   * Group by Customer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends customerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: customerGroupByArgs['orderBy'] }
      : { orderBy?: customerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, customerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the customer model
 */
readonly fields: customerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for customer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__customerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.customer$accountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.customer$accountArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  membership_type<T extends Prisma.membership_typeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.membership_typeDefaultArgs<ExtArgs>>): Prisma.Prisma__membership_typeClient<runtime.Types.Result.GetResult<Prisma.$membership_typePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  order<T extends Prisma.customer$orderArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.customer$orderArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the customer model
 */
export interface customerFieldRefs {
  readonly customer_id: Prisma.FieldRef<"customer", 'Int'>
  readonly membership_type_id: Prisma.FieldRef<"customer", 'Int'>
  readonly account_id: Prisma.FieldRef<"customer", 'Int'>
  readonly last_name: Prisma.FieldRef<"customer", 'String'>
  readonly first_name: Prisma.FieldRef<"customer", 'String'>
  readonly phone: Prisma.FieldRef<"customer", 'String'>
  readonly current_points: Prisma.FieldRef<"customer", 'Int'>
  readonly gender: Prisma.FieldRef<"customer", 'gender_enum'>
  readonly created_at: Prisma.FieldRef<"customer", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"customer", 'DateTime'>
}
    

// Custom InputTypes
/**
 * customer findUnique
 */
export type customerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * Filter, which customer to fetch.
   */
  where: Prisma.customerWhereUniqueInput
}

/**
 * customer findUniqueOrThrow
 */
export type customerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * Filter, which customer to fetch.
   */
  where: Prisma.customerWhereUniqueInput
}

/**
 * customer findFirst
 */
export type customerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * Filter, which customer to fetch.
   */
  where?: Prisma.customerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customers to fetch.
   */
  orderBy?: Prisma.customerOrderByWithRelationInput | Prisma.customerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for customers.
   */
  cursor?: Prisma.customerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of customers.
   */
  distinct?: Prisma.CustomerScalarFieldEnum | Prisma.CustomerScalarFieldEnum[]
}

/**
 * customer findFirstOrThrow
 */
export type customerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * Filter, which customer to fetch.
   */
  where?: Prisma.customerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customers to fetch.
   */
  orderBy?: Prisma.customerOrderByWithRelationInput | Prisma.customerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for customers.
   */
  cursor?: Prisma.customerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of customers.
   */
  distinct?: Prisma.CustomerScalarFieldEnum | Prisma.CustomerScalarFieldEnum[]
}

/**
 * customer findMany
 */
export type customerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * Filter, which customers to fetch.
   */
  where?: Prisma.customerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customers to fetch.
   */
  orderBy?: Prisma.customerOrderByWithRelationInput | Prisma.customerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing customers.
   */
  cursor?: Prisma.customerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customers.
   */
  skip?: number
  distinct?: Prisma.CustomerScalarFieldEnum | Prisma.CustomerScalarFieldEnum[]
}

/**
 * customer create
 */
export type customerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * The data needed to create a customer.
   */
  data: Prisma.XOR<Prisma.customerCreateInput, Prisma.customerUncheckedCreateInput>
}

/**
 * customer createMany
 */
export type customerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many customers.
   */
  data: Prisma.customerCreateManyInput | Prisma.customerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * customer createManyAndReturn
 */
export type customerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * The data used to create many customers.
   */
  data: Prisma.customerCreateManyInput | Prisma.customerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * customer update
 */
export type customerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * The data needed to update a customer.
   */
  data: Prisma.XOR<Prisma.customerUpdateInput, Prisma.customerUncheckedUpdateInput>
  /**
   * Choose, which customer to update.
   */
  where: Prisma.customerWhereUniqueInput
}

/**
 * customer updateMany
 */
export type customerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update customers.
   */
  data: Prisma.XOR<Prisma.customerUpdateManyMutationInput, Prisma.customerUncheckedUpdateManyInput>
  /**
   * Filter which customers to update
   */
  where?: Prisma.customerWhereInput
  /**
   * Limit how many customers to update.
   */
  limit?: number
}

/**
 * customer updateManyAndReturn
 */
export type customerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * The data used to update customers.
   */
  data: Prisma.XOR<Prisma.customerUpdateManyMutationInput, Prisma.customerUncheckedUpdateManyInput>
  /**
   * Filter which customers to update
   */
  where?: Prisma.customerWhereInput
  /**
   * Limit how many customers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * customer upsert
 */
export type customerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * The filter to search for the customer to update in case it exists.
   */
  where: Prisma.customerWhereUniqueInput
  /**
   * In case the customer found by the `where` argument doesn't exist, create a new customer with this data.
   */
  create: Prisma.XOR<Prisma.customerCreateInput, Prisma.customerUncheckedCreateInput>
  /**
   * In case the customer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.customerUpdateInput, Prisma.customerUncheckedUpdateInput>
}

/**
 * customer delete
 */
export type customerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  /**
   * Filter which customer to delete.
   */
  where: Prisma.customerWhereUniqueInput
}

/**
 * customer deleteMany
 */
export type customerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which customers to delete
   */
  where?: Prisma.customerWhereInput
  /**
   * Limit how many customers to delete.
   */
  limit?: number
}

/**
 * customer.account
 */
export type customer$accountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  where?: Prisma.accountWhereInput
}

/**
 * customer.order
 */
export type customer$orderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the order
   */
  select?: Prisma.orderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the order
   */
  omit?: Prisma.orderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.orderInclude<ExtArgs> | null
  where?: Prisma.orderWhereInput
  orderBy?: Prisma.orderOrderByWithRelationInput | Prisma.orderOrderByWithRelationInput[]
  cursor?: Prisma.orderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderScalarFieldEnum | Prisma.OrderScalarFieldEnum[]
}

/**
 * customer without action
 */
export type customerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
}
