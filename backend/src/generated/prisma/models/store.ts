
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `store` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model store
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type storeModel = runtime.Types.Result.DefaultSelection<Prisma.$storePayload>

export type AggregateStore = {
  _count: StoreCountAggregateOutputType | null
  _avg: StoreAvgAggregateOutputType | null
  _sum: StoreSumAggregateOutputType | null
  _min: StoreMinAggregateOutputType | null
  _max: StoreMaxAggregateOutputType | null
}

export type StoreAvgAggregateOutputType = {
  store_id: number | null
}

export type StoreSumAggregateOutputType = {
  store_id: number | null
}

export type StoreMinAggregateOutputType = {
  store_id: number | null
  name: string | null
  address: string | null
  phone: string | null
  opening_time: Date | null
  closing_time: Date | null
  email: string | null
  opening_date: Date | null
  tax_code: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type StoreMaxAggregateOutputType = {
  store_id: number | null
  name: string | null
  address: string | null
  phone: string | null
  opening_time: Date | null
  closing_time: Date | null
  email: string | null
  opening_date: Date | null
  tax_code: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type StoreCountAggregateOutputType = {
  store_id: number
  name: number
  address: number
  phone: number
  opening_time: number
  closing_time: number
  email: number
  opening_date: number
  tax_code: number
  created_at: number
  updated_at: number
  _all: number
}


export type StoreAvgAggregateInputType = {
  store_id?: true
}

export type StoreSumAggregateInputType = {
  store_id?: true
}

export type StoreMinAggregateInputType = {
  store_id?: true
  name?: true
  address?: true
  phone?: true
  opening_time?: true
  closing_time?: true
  email?: true
  opening_date?: true
  tax_code?: true
  created_at?: true
  updated_at?: true
}

export type StoreMaxAggregateInputType = {
  store_id?: true
  name?: true
  address?: true
  phone?: true
  opening_time?: true
  closing_time?: true
  email?: true
  opening_date?: true
  tax_code?: true
  created_at?: true
  updated_at?: true
}

export type StoreCountAggregateInputType = {
  store_id?: true
  name?: true
  address?: true
  phone?: true
  opening_time?: true
  closing_time?: true
  email?: true
  opening_date?: true
  tax_code?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type StoreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which store to aggregate.
   */
  where?: Prisma.storeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of stores to fetch.
   */
  orderBy?: Prisma.storeOrderByWithRelationInput | Prisma.storeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.storeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` stores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` stores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned stores
  **/
  _count?: true | StoreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: StoreAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: StoreSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StoreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StoreMaxAggregateInputType
}

export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
      [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStore[P]>
    : Prisma.GetScalarType<T[P], AggregateStore[P]>
}




export type storeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.storeWhereInput
  orderBy?: Prisma.storeOrderByWithAggregationInput | Prisma.storeOrderByWithAggregationInput[]
  by: Prisma.StoreScalarFieldEnum[] | Prisma.StoreScalarFieldEnum
  having?: Prisma.storeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StoreCountAggregateInputType | true
  _avg?: StoreAvgAggregateInputType
  _sum?: StoreSumAggregateInputType
  _min?: StoreMinAggregateInputType
  _max?: StoreMaxAggregateInputType
}

export type StoreGroupByOutputType = {
  store_id: number
  name: string
  address: string
  phone: string
  opening_time: Date
  closing_time: Date
  email: string
  opening_date: Date
  tax_code: string
  created_at: Date | null
  updated_at: Date | null
  _count: StoreCountAggregateOutputType | null
  _avg: StoreAvgAggregateOutputType | null
  _sum: StoreSumAggregateOutputType | null
  _min: StoreMinAggregateOutputType | null
  _max: StoreMaxAggregateOutputType | null
}

type GetStoreGroupByPayload<T extends storeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StoreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StoreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StoreGroupByOutputType[P]>
      }
    >
  > 



export type storeWhereInput = {
  AND?: Prisma.storeWhereInput | Prisma.storeWhereInput[]
  OR?: Prisma.storeWhereInput[]
  NOT?: Prisma.storeWhereInput | Prisma.storeWhereInput[]
  store_id?: Prisma.IntFilter<"store"> | number
  name?: Prisma.StringFilter<"store"> | string
  address?: Prisma.StringFilter<"store"> | string
  phone?: Prisma.StringFilter<"store"> | string
  opening_time?: Prisma.DateTimeFilter<"store"> | Date | string
  closing_time?: Prisma.DateTimeFilter<"store"> | Date | string
  email?: Prisma.StringFilter<"store"> | string
  opening_date?: Prisma.DateTimeFilter<"store"> | Date | string
  tax_code?: Prisma.StringFilter<"store"> | string
  created_at?: Prisma.DateTimeNullableFilter<"store"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"store"> | Date | string | null
}

export type storeOrderByWithRelationInput = {
  store_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  opening_time?: Prisma.SortOrder
  closing_time?: Prisma.SortOrder
  email?: Prisma.SortOrder
  opening_date?: Prisma.SortOrder
  tax_code?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type storeWhereUniqueInput = Prisma.AtLeast<{
  store_id?: number
  AND?: Prisma.storeWhereInput | Prisma.storeWhereInput[]
  OR?: Prisma.storeWhereInput[]
  NOT?: Prisma.storeWhereInput | Prisma.storeWhereInput[]
  name?: Prisma.StringFilter<"store"> | string
  address?: Prisma.StringFilter<"store"> | string
  phone?: Prisma.StringFilter<"store"> | string
  opening_time?: Prisma.DateTimeFilter<"store"> | Date | string
  closing_time?: Prisma.DateTimeFilter<"store"> | Date | string
  email?: Prisma.StringFilter<"store"> | string
  opening_date?: Prisma.DateTimeFilter<"store"> | Date | string
  tax_code?: Prisma.StringFilter<"store"> | string
  created_at?: Prisma.DateTimeNullableFilter<"store"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"store"> | Date | string | null
}, "store_id">

export type storeOrderByWithAggregationInput = {
  store_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  opening_time?: Prisma.SortOrder
  closing_time?: Prisma.SortOrder
  email?: Prisma.SortOrder
  opening_date?: Prisma.SortOrder
  tax_code?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.storeCountOrderByAggregateInput
  _avg?: Prisma.storeAvgOrderByAggregateInput
  _max?: Prisma.storeMaxOrderByAggregateInput
  _min?: Prisma.storeMinOrderByAggregateInput
  _sum?: Prisma.storeSumOrderByAggregateInput
}

export type storeScalarWhereWithAggregatesInput = {
  AND?: Prisma.storeScalarWhereWithAggregatesInput | Prisma.storeScalarWhereWithAggregatesInput[]
  OR?: Prisma.storeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.storeScalarWhereWithAggregatesInput | Prisma.storeScalarWhereWithAggregatesInput[]
  store_id?: Prisma.IntWithAggregatesFilter<"store"> | number
  name?: Prisma.StringWithAggregatesFilter<"store"> | string
  address?: Prisma.StringWithAggregatesFilter<"store"> | string
  phone?: Prisma.StringWithAggregatesFilter<"store"> | string
  opening_time?: Prisma.DateTimeWithAggregatesFilter<"store"> | Date | string
  closing_time?: Prisma.DateTimeWithAggregatesFilter<"store"> | Date | string
  email?: Prisma.StringWithAggregatesFilter<"store"> | string
  opening_date?: Prisma.DateTimeWithAggregatesFilter<"store"> | Date | string
  tax_code?: Prisma.StringWithAggregatesFilter<"store"> | string
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"store"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"store"> | Date | string | null
}

export type storeCreateInput = {
  name: string
  address: string
  phone: string
  opening_time: Date | string
  closing_time: Date | string
  email: string
  opening_date: Date | string
  tax_code: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type storeUncheckedCreateInput = {
  store_id?: number
  name: string
  address: string
  phone: string
  opening_time: Date | string
  closing_time: Date | string
  email: string
  opening_date: Date | string
  tax_code: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type storeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  opening_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  closing_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  opening_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tax_code?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type storeUncheckedUpdateInput = {
  store_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  opening_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  closing_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  opening_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tax_code?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type storeCreateManyInput = {
  store_id?: number
  name: string
  address: string
  phone: string
  opening_time: Date | string
  closing_time: Date | string
  email: string
  opening_date: Date | string
  tax_code: string
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type storeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  opening_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  closing_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  opening_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tax_code?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type storeUncheckedUpdateManyInput = {
  store_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  opening_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  closing_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  opening_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tax_code?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type storeCountOrderByAggregateInput = {
  store_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  opening_time?: Prisma.SortOrder
  closing_time?: Prisma.SortOrder
  email?: Prisma.SortOrder
  opening_date?: Prisma.SortOrder
  tax_code?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type storeAvgOrderByAggregateInput = {
  store_id?: Prisma.SortOrder
}

export type storeMaxOrderByAggregateInput = {
  store_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  opening_time?: Prisma.SortOrder
  closing_time?: Prisma.SortOrder
  email?: Prisma.SortOrder
  opening_date?: Prisma.SortOrder
  tax_code?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type storeMinOrderByAggregateInput = {
  store_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  opening_time?: Prisma.SortOrder
  closing_time?: Prisma.SortOrder
  email?: Prisma.SortOrder
  opening_date?: Prisma.SortOrder
  tax_code?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type storeSumOrderByAggregateInput = {
  store_id?: Prisma.SortOrder
}



export type storeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  store_id?: boolean
  name?: boolean
  address?: boolean
  phone?: boolean
  opening_time?: boolean
  closing_time?: boolean
  email?: boolean
  opening_date?: boolean
  tax_code?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["store"]>

export type storeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  store_id?: boolean
  name?: boolean
  address?: boolean
  phone?: boolean
  opening_time?: boolean
  closing_time?: boolean
  email?: boolean
  opening_date?: boolean
  tax_code?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["store"]>

export type storeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  store_id?: boolean
  name?: boolean
  address?: boolean
  phone?: boolean
  opening_time?: boolean
  closing_time?: boolean
  email?: boolean
  opening_date?: boolean
  tax_code?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["store"]>

export type storeSelectScalar = {
  store_id?: boolean
  name?: boolean
  address?: boolean
  phone?: boolean
  opening_time?: boolean
  closing_time?: boolean
  email?: boolean
  opening_date?: boolean
  tax_code?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type storeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"store_id" | "name" | "address" | "phone" | "opening_time" | "closing_time" | "email" | "opening_date" | "tax_code" | "created_at" | "updated_at", ExtArgs["result"]["store"]>

export type $storePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "store"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    store_id: number
    name: string
    address: string
    phone: string
    opening_time: Date
    closing_time: Date
    email: string
    opening_date: Date
    tax_code: string
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["store"]>
  composites: {}
}

export type storeGetPayload<S extends boolean | null | undefined | storeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$storePayload, S>

export type storeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<storeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StoreCountAggregateInputType | true
  }

export interface storeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['store'], meta: { name: 'store' } }
  /**
   * Find zero or one Store that matches the filter.
   * @param {storeFindUniqueArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends storeFindUniqueArgs>(args: Prisma.SelectSubset<T, storeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__storeClient<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Store that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {storeFindUniqueOrThrowArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends storeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, storeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__storeClient<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Store that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {storeFindFirstArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends storeFindFirstArgs>(args?: Prisma.SelectSubset<T, storeFindFirstArgs<ExtArgs>>): Prisma.Prisma__storeClient<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Store that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {storeFindFirstOrThrowArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends storeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, storeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__storeClient<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Stores that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {storeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Stores
   * const stores = await prisma.store.findMany()
   * 
   * // Get first 10 Stores
   * const stores = await prisma.store.findMany({ take: 10 })
   * 
   * // Only select the `store_id`
   * const storeWithStore_idOnly = await prisma.store.findMany({ select: { store_id: true } })
   * 
   */
  findMany<T extends storeFindManyArgs>(args?: Prisma.SelectSubset<T, storeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Store.
   * @param {storeCreateArgs} args - Arguments to create a Store.
   * @example
   * // Create one Store
   * const Store = await prisma.store.create({
   *   data: {
   *     // ... data to create a Store
   *   }
   * })
   * 
   */
  create<T extends storeCreateArgs>(args: Prisma.SelectSubset<T, storeCreateArgs<ExtArgs>>): Prisma.Prisma__storeClient<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Stores.
   * @param {storeCreateManyArgs} args - Arguments to create many Stores.
   * @example
   * // Create many Stores
   * const store = await prisma.store.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends storeCreateManyArgs>(args?: Prisma.SelectSubset<T, storeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Stores and returns the data saved in the database.
   * @param {storeCreateManyAndReturnArgs} args - Arguments to create many Stores.
   * @example
   * // Create many Stores
   * const store = await prisma.store.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Stores and only return the `store_id`
   * const storeWithStore_idOnly = await prisma.store.createManyAndReturn({
   *   select: { store_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends storeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, storeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Store.
   * @param {storeDeleteArgs} args - Arguments to delete one Store.
   * @example
   * // Delete one Store
   * const Store = await prisma.store.delete({
   *   where: {
   *     // ... filter to delete one Store
   *   }
   * })
   * 
   */
  delete<T extends storeDeleteArgs>(args: Prisma.SelectSubset<T, storeDeleteArgs<ExtArgs>>): Prisma.Prisma__storeClient<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Store.
   * @param {storeUpdateArgs} args - Arguments to update one Store.
   * @example
   * // Update one Store
   * const store = await prisma.store.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends storeUpdateArgs>(args: Prisma.SelectSubset<T, storeUpdateArgs<ExtArgs>>): Prisma.Prisma__storeClient<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Stores.
   * @param {storeDeleteManyArgs} args - Arguments to filter Stores to delete.
   * @example
   * // Delete a few Stores
   * const { count } = await prisma.store.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends storeDeleteManyArgs>(args?: Prisma.SelectSubset<T, storeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Stores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {storeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Stores
   * const store = await prisma.store.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends storeUpdateManyArgs>(args: Prisma.SelectSubset<T, storeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Stores and returns the data updated in the database.
   * @param {storeUpdateManyAndReturnArgs} args - Arguments to update many Stores.
   * @example
   * // Update many Stores
   * const store = await prisma.store.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Stores and only return the `store_id`
   * const storeWithStore_idOnly = await prisma.store.updateManyAndReturn({
   *   select: { store_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends storeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, storeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Store.
   * @param {storeUpsertArgs} args - Arguments to update or create a Store.
   * @example
   * // Update or create a Store
   * const store = await prisma.store.upsert({
   *   create: {
   *     // ... data to create a Store
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Store we want to update
   *   }
   * })
   */
  upsert<T extends storeUpsertArgs>(args: Prisma.SelectSubset<T, storeUpsertArgs<ExtArgs>>): Prisma.Prisma__storeClient<runtime.Types.Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Stores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {storeCountArgs} args - Arguments to filter Stores to count.
   * @example
   * // Count the number of Stores
   * const count = await prisma.store.count({
   *   where: {
   *     // ... the filter for the Stores we want to count
   *   }
   * })
  **/
  count<T extends storeCountArgs>(
    args?: Prisma.Subset<T, storeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StoreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Store.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StoreAggregateArgs>(args: Prisma.Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

  /**
   * Group by Store.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {storeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends storeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: storeGroupByArgs['orderBy'] }
      : { orderBy?: storeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, storeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the store model
 */
readonly fields: storeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for store.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__storeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the store model
 */
export interface storeFieldRefs {
  readonly store_id: Prisma.FieldRef<"store", 'Int'>
  readonly name: Prisma.FieldRef<"store", 'String'>
  readonly address: Prisma.FieldRef<"store", 'String'>
  readonly phone: Prisma.FieldRef<"store", 'String'>
  readonly opening_time: Prisma.FieldRef<"store", 'DateTime'>
  readonly closing_time: Prisma.FieldRef<"store", 'DateTime'>
  readonly email: Prisma.FieldRef<"store", 'String'>
  readonly opening_date: Prisma.FieldRef<"store", 'DateTime'>
  readonly tax_code: Prisma.FieldRef<"store", 'String'>
  readonly created_at: Prisma.FieldRef<"store", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"store", 'DateTime'>
}
    

// Custom InputTypes
/**
 * store findUnique
 */
export type storeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * Filter, which store to fetch.
   */
  where: Prisma.storeWhereUniqueInput
}

/**
 * store findUniqueOrThrow
 */
export type storeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * Filter, which store to fetch.
   */
  where: Prisma.storeWhereUniqueInput
}

/**
 * store findFirst
 */
export type storeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * Filter, which store to fetch.
   */
  where?: Prisma.storeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of stores to fetch.
   */
  orderBy?: Prisma.storeOrderByWithRelationInput | Prisma.storeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for stores.
   */
  cursor?: Prisma.storeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` stores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` stores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of stores.
   */
  distinct?: Prisma.StoreScalarFieldEnum | Prisma.StoreScalarFieldEnum[]
}

/**
 * store findFirstOrThrow
 */
export type storeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * Filter, which store to fetch.
   */
  where?: Prisma.storeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of stores to fetch.
   */
  orderBy?: Prisma.storeOrderByWithRelationInput | Prisma.storeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for stores.
   */
  cursor?: Prisma.storeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` stores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` stores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of stores.
   */
  distinct?: Prisma.StoreScalarFieldEnum | Prisma.StoreScalarFieldEnum[]
}

/**
 * store findMany
 */
export type storeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * Filter, which stores to fetch.
   */
  where?: Prisma.storeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of stores to fetch.
   */
  orderBy?: Prisma.storeOrderByWithRelationInput | Prisma.storeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing stores.
   */
  cursor?: Prisma.storeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` stores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` stores.
   */
  skip?: number
  distinct?: Prisma.StoreScalarFieldEnum | Prisma.StoreScalarFieldEnum[]
}

/**
 * store create
 */
export type storeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * The data needed to create a store.
   */
  data: Prisma.XOR<Prisma.storeCreateInput, Prisma.storeUncheckedCreateInput>
}

/**
 * store createMany
 */
export type storeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many stores.
   */
  data: Prisma.storeCreateManyInput | Prisma.storeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * store createManyAndReturn
 */
export type storeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * The data used to create many stores.
   */
  data: Prisma.storeCreateManyInput | Prisma.storeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * store update
 */
export type storeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * The data needed to update a store.
   */
  data: Prisma.XOR<Prisma.storeUpdateInput, Prisma.storeUncheckedUpdateInput>
  /**
   * Choose, which store to update.
   */
  where: Prisma.storeWhereUniqueInput
}

/**
 * store updateMany
 */
export type storeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update stores.
   */
  data: Prisma.XOR<Prisma.storeUpdateManyMutationInput, Prisma.storeUncheckedUpdateManyInput>
  /**
   * Filter which stores to update
   */
  where?: Prisma.storeWhereInput
  /**
   * Limit how many stores to update.
   */
  limit?: number
}

/**
 * store updateManyAndReturn
 */
export type storeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * The data used to update stores.
   */
  data: Prisma.XOR<Prisma.storeUpdateManyMutationInput, Prisma.storeUncheckedUpdateManyInput>
  /**
   * Filter which stores to update
   */
  where?: Prisma.storeWhereInput
  /**
   * Limit how many stores to update.
   */
  limit?: number
}

/**
 * store upsert
 */
export type storeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * The filter to search for the store to update in case it exists.
   */
  where: Prisma.storeWhereUniqueInput
  /**
   * In case the store found by the `where` argument doesn't exist, create a new store with this data.
   */
  create: Prisma.XOR<Prisma.storeCreateInput, Prisma.storeUncheckedCreateInput>
  /**
   * In case the store was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.storeUpdateInput, Prisma.storeUncheckedUpdateInput>
}

/**
 * store delete
 */
export type storeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
  /**
   * Filter which store to delete.
   */
  where: Prisma.storeWhereUniqueInput
}

/**
 * store deleteMany
 */
export type storeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which stores to delete
   */
  where?: Prisma.storeWhereInput
  /**
   * Limit how many stores to delete.
   */
  limit?: number
}

/**
 * store without action
 */
export type storeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the store
   */
  select?: Prisma.storeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the store
   */
  omit?: Prisma.storeOmit<ExtArgs> | null
}
