/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `payment_method` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model payment_method
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type payment_methodModel = runtime.Types.Result.DefaultSelection<Prisma.$payment_methodPayload>

export type AggregatePayment_method = {
  _count: Payment_methodCountAggregateOutputType | null
  _avg: Payment_methodAvgAggregateOutputType | null
  _sum: Payment_methodSumAggregateOutputType | null
  _min: Payment_methodMinAggregateOutputType | null
  _max: Payment_methodMaxAggregateOutputType | null
}

export type Payment_methodAvgAggregateOutputType = {
  payment_method_id: number | null
}

export type Payment_methodSumAggregateOutputType = {
  payment_method_id: number | null
}

export type Payment_methodMinAggregateOutputType = {
  payment_method_id: number | null
  name: string | null
  description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type Payment_methodMaxAggregateOutputType = {
  payment_method_id: number | null
  name: string | null
  description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type Payment_methodCountAggregateOutputType = {
  payment_method_id: number
  name: number
  description: number
  created_at: number
  updated_at: number
  _all: number
}


export type Payment_methodAvgAggregateInputType = {
  payment_method_id?: true
}

export type Payment_methodSumAggregateInputType = {
  payment_method_id?: true
}

export type Payment_methodMinAggregateInputType = {
  payment_method_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
}

export type Payment_methodMaxAggregateInputType = {
  payment_method_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
}

export type Payment_methodCountAggregateInputType = {
  payment_method_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type Payment_methodAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which payment_method to aggregate.
   */
  where?: Prisma.payment_methodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payment_methods to fetch.
   */
  orderBy?: Prisma.payment_methodOrderByWithRelationInput | Prisma.payment_methodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.payment_methodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payment_methods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payment_methods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned payment_methods
  **/
  _count?: true | Payment_methodCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Payment_methodAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Payment_methodSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Payment_methodMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Payment_methodMaxAggregateInputType
}

export type GetPayment_methodAggregateType<T extends Payment_methodAggregateArgs> = {
      [P in keyof T & keyof AggregatePayment_method]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePayment_method[P]>
    : Prisma.GetScalarType<T[P], AggregatePayment_method[P]>
}




export type payment_methodGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.payment_methodWhereInput
  orderBy?: Prisma.payment_methodOrderByWithAggregationInput | Prisma.payment_methodOrderByWithAggregationInput[]
  by: Prisma.Payment_methodScalarFieldEnum[] | Prisma.Payment_methodScalarFieldEnum
  having?: Prisma.payment_methodScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Payment_methodCountAggregateInputType | true
  _avg?: Payment_methodAvgAggregateInputType
  _sum?: Payment_methodSumAggregateInputType
  _min?: Payment_methodMinAggregateInputType
  _max?: Payment_methodMaxAggregateInputType
}

export type Payment_methodGroupByOutputType = {
  payment_method_id: number
  name: string
  description: string | null
  created_at: Date | null
  updated_at: Date | null
  _count: Payment_methodCountAggregateOutputType | null
  _avg: Payment_methodAvgAggregateOutputType | null
  _sum: Payment_methodSumAggregateOutputType | null
  _min: Payment_methodMinAggregateOutputType | null
  _max: Payment_methodMaxAggregateOutputType | null
}

type GetPayment_methodGroupByPayload<T extends payment_methodGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Payment_methodGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Payment_methodGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Payment_methodGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Payment_methodGroupByOutputType[P]>
      }
    >
  > 



export type payment_methodWhereInput = {
  AND?: Prisma.payment_methodWhereInput | Prisma.payment_methodWhereInput[]
  OR?: Prisma.payment_methodWhereInput[]
  NOT?: Prisma.payment_methodWhereInput | Prisma.payment_methodWhereInput[]
  payment_method_id?: Prisma.IntFilter<"payment_method"> | number
  name?: Prisma.StringFilter<"payment_method"> | string
  description?: Prisma.StringNullableFilter<"payment_method"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"payment_method"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"payment_method"> | Date | string | null
  payment?: Prisma.PaymentListRelationFilter
}

export type payment_methodOrderByWithRelationInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  payment?: Prisma.paymentOrderByRelationAggregateInput
}

export type payment_methodWhereUniqueInput = Prisma.AtLeast<{
  payment_method_id?: number
  name?: string
  AND?: Prisma.payment_methodWhereInput | Prisma.payment_methodWhereInput[]
  OR?: Prisma.payment_methodWhereInput[]
  NOT?: Prisma.payment_methodWhereInput | Prisma.payment_methodWhereInput[]
  description?: Prisma.StringNullableFilter<"payment_method"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"payment_method"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"payment_method"> | Date | string | null
  payment?: Prisma.PaymentListRelationFilter
}, "payment_method_id" | "name">

export type payment_methodOrderByWithAggregationInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.payment_methodCountOrderByAggregateInput
  _avg?: Prisma.payment_methodAvgOrderByAggregateInput
  _max?: Prisma.payment_methodMaxOrderByAggregateInput
  _min?: Prisma.payment_methodMinOrderByAggregateInput
  _sum?: Prisma.payment_methodSumOrderByAggregateInput
}

export type payment_methodScalarWhereWithAggregatesInput = {
  AND?: Prisma.payment_methodScalarWhereWithAggregatesInput | Prisma.payment_methodScalarWhereWithAggregatesInput[]
  OR?: Prisma.payment_methodScalarWhereWithAggregatesInput[]
  NOT?: Prisma.payment_methodScalarWhereWithAggregatesInput | Prisma.payment_methodScalarWhereWithAggregatesInput[]
  payment_method_id?: Prisma.IntWithAggregatesFilter<"payment_method"> | number
  name?: Prisma.StringWithAggregatesFilter<"payment_method"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"payment_method"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"payment_method"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"payment_method"> | Date | string | null
}

export type payment_methodCreateInput = {
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  payment?: Prisma.paymentCreateNestedManyWithoutPayment_methodInput
}

export type payment_methodUncheckedCreateInput = {
  payment_method_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  payment?: Prisma.paymentUncheckedCreateNestedManyWithoutPayment_methodInput
}

export type payment_methodUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  payment?: Prisma.paymentUpdateManyWithoutPayment_methodNestedInput
}

export type payment_methodUncheckedUpdateInput = {
  payment_method_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  payment?: Prisma.paymentUncheckedUpdateManyWithoutPayment_methodNestedInput
}

export type payment_methodCreateManyInput = {
  payment_method_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type payment_methodUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type payment_methodUncheckedUpdateManyInput = {
  payment_method_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type Payment_methodScalarRelationFilter = {
  is?: Prisma.payment_methodWhereInput
  isNot?: Prisma.payment_methodWhereInput
}

export type payment_methodCountOrderByAggregateInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type payment_methodAvgOrderByAggregateInput = {
  payment_method_id?: Prisma.SortOrder
}

export type payment_methodMaxOrderByAggregateInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type payment_methodMinOrderByAggregateInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type payment_methodSumOrderByAggregateInput = {
  payment_method_id?: Prisma.SortOrder
}

export type payment_methodCreateNestedOneWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.payment_methodCreateWithoutPaymentInput, Prisma.payment_methodUncheckedCreateWithoutPaymentInput>
  connectOrCreate?: Prisma.payment_methodCreateOrConnectWithoutPaymentInput
  connect?: Prisma.payment_methodWhereUniqueInput
}

export type payment_methodUpdateOneRequiredWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.payment_methodCreateWithoutPaymentInput, Prisma.payment_methodUncheckedCreateWithoutPaymentInput>
  connectOrCreate?: Prisma.payment_methodCreateOrConnectWithoutPaymentInput
  upsert?: Prisma.payment_methodUpsertWithoutPaymentInput
  connect?: Prisma.payment_methodWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.payment_methodUpdateToOneWithWhereWithoutPaymentInput, Prisma.payment_methodUpdateWithoutPaymentInput>, Prisma.payment_methodUncheckedUpdateWithoutPaymentInput>
}

export type payment_methodCreateWithoutPaymentInput = {
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type payment_methodUncheckedCreateWithoutPaymentInput = {
  payment_method_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type payment_methodCreateOrConnectWithoutPaymentInput = {
  where: Prisma.payment_methodWhereUniqueInput
  create: Prisma.XOR<Prisma.payment_methodCreateWithoutPaymentInput, Prisma.payment_methodUncheckedCreateWithoutPaymentInput>
}

export type payment_methodUpsertWithoutPaymentInput = {
  update: Prisma.XOR<Prisma.payment_methodUpdateWithoutPaymentInput, Prisma.payment_methodUncheckedUpdateWithoutPaymentInput>
  create: Prisma.XOR<Prisma.payment_methodCreateWithoutPaymentInput, Prisma.payment_methodUncheckedCreateWithoutPaymentInput>
  where?: Prisma.payment_methodWhereInput
}

export type payment_methodUpdateToOneWithWhereWithoutPaymentInput = {
  where?: Prisma.payment_methodWhereInput
  data: Prisma.XOR<Prisma.payment_methodUpdateWithoutPaymentInput, Prisma.payment_methodUncheckedUpdateWithoutPaymentInput>
}

export type payment_methodUpdateWithoutPaymentInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type payment_methodUncheckedUpdateWithoutPaymentInput = {
  payment_method_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type Payment_methodCountOutputType
 */

export type Payment_methodCountOutputType = {
  payment: number
}

export type Payment_methodCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payment?: boolean | Payment_methodCountOutputTypeCountPaymentArgs
}

/**
 * Payment_methodCountOutputType without action
 */
export type Payment_methodCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Payment_methodCountOutputType
   */
  select?: Prisma.Payment_methodCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Payment_methodCountOutputType without action
 */
export type Payment_methodCountOutputTypeCountPaymentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.paymentWhereInput
}


export type payment_methodSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  payment_method_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment?: boolean | Prisma.payment_method$paymentArgs<ExtArgs>
  _count?: boolean | Prisma.Payment_methodCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["payment_method"]>

export type payment_methodSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  payment_method_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["payment_method"]>

export type payment_methodSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  payment_method_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["payment_method"]>

export type payment_methodSelectScalar = {
  payment_method_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type payment_methodOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"payment_method_id" | "name" | "description" | "created_at" | "updated_at", ExtArgs["result"]["payment_method"]>
export type payment_methodInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payment?: boolean | Prisma.payment_method$paymentArgs<ExtArgs>
  _count?: boolean | Prisma.Payment_methodCountOutputTypeDefaultArgs<ExtArgs>
}
export type payment_methodIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type payment_methodIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $payment_methodPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "payment_method"
  objects: {
    payment: Prisma.$paymentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    payment_method_id: number
    name: string
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["payment_method"]>
  composites: {}
}

export type payment_methodGetPayload<S extends boolean | null | undefined | payment_methodDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$payment_methodPayload, S>

export type payment_methodCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<payment_methodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Payment_methodCountAggregateInputType | true
  }

export interface payment_methodDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_method'], meta: { name: 'payment_method' } }
  /**
   * Find zero or one Payment_method that matches the filter.
   * @param {payment_methodFindUniqueArgs} args - Arguments to find a Payment_method
   * @example
   * // Get one Payment_method
   * const payment_method = await prisma.payment_method.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends payment_methodFindUniqueArgs>(args: Prisma.SelectSubset<T, payment_methodFindUniqueArgs<ExtArgs>>): Prisma.Prisma__payment_methodClient<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Payment_method that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {payment_methodFindUniqueOrThrowArgs} args - Arguments to find a Payment_method
   * @example
   * // Get one Payment_method
   * const payment_method = await prisma.payment_method.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends payment_methodFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, payment_methodFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__payment_methodClient<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Payment_method that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_methodFindFirstArgs} args - Arguments to find a Payment_method
   * @example
   * // Get one Payment_method
   * const payment_method = await prisma.payment_method.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends payment_methodFindFirstArgs>(args?: Prisma.SelectSubset<T, payment_methodFindFirstArgs<ExtArgs>>): Prisma.Prisma__payment_methodClient<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Payment_method that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_methodFindFirstOrThrowArgs} args - Arguments to find a Payment_method
   * @example
   * // Get one Payment_method
   * const payment_method = await prisma.payment_method.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends payment_methodFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, payment_methodFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__payment_methodClient<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Payment_methods that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_methodFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Payment_methods
   * const payment_methods = await prisma.payment_method.findMany()
   * 
   * // Get first 10 Payment_methods
   * const payment_methods = await prisma.payment_method.findMany({ take: 10 })
   * 
   * // Only select the `payment_method_id`
   * const payment_methodWithPayment_method_idOnly = await prisma.payment_method.findMany({ select: { payment_method_id: true } })
   * 
   */
  findMany<T extends payment_methodFindManyArgs>(args?: Prisma.SelectSubset<T, payment_methodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Payment_method.
   * @param {payment_methodCreateArgs} args - Arguments to create a Payment_method.
   * @example
   * // Create one Payment_method
   * const Payment_method = await prisma.payment_method.create({
   *   data: {
   *     // ... data to create a Payment_method
   *   }
   * })
   * 
   */
  create<T extends payment_methodCreateArgs>(args: Prisma.SelectSubset<T, payment_methodCreateArgs<ExtArgs>>): Prisma.Prisma__payment_methodClient<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Payment_methods.
   * @param {payment_methodCreateManyArgs} args - Arguments to create many Payment_methods.
   * @example
   * // Create many Payment_methods
   * const payment_method = await prisma.payment_method.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends payment_methodCreateManyArgs>(args?: Prisma.SelectSubset<T, payment_methodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Payment_methods and returns the data saved in the database.
   * @param {payment_methodCreateManyAndReturnArgs} args - Arguments to create many Payment_methods.
   * @example
   * // Create many Payment_methods
   * const payment_method = await prisma.payment_method.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Payment_methods and only return the `payment_method_id`
   * const payment_methodWithPayment_method_idOnly = await prisma.payment_method.createManyAndReturn({
   *   select: { payment_method_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends payment_methodCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, payment_methodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Payment_method.
   * @param {payment_methodDeleteArgs} args - Arguments to delete one Payment_method.
   * @example
   * // Delete one Payment_method
   * const Payment_method = await prisma.payment_method.delete({
   *   where: {
   *     // ... filter to delete one Payment_method
   *   }
   * })
   * 
   */
  delete<T extends payment_methodDeleteArgs>(args: Prisma.SelectSubset<T, payment_methodDeleteArgs<ExtArgs>>): Prisma.Prisma__payment_methodClient<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Payment_method.
   * @param {payment_methodUpdateArgs} args - Arguments to update one Payment_method.
   * @example
   * // Update one Payment_method
   * const payment_method = await prisma.payment_method.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends payment_methodUpdateArgs>(args: Prisma.SelectSubset<T, payment_methodUpdateArgs<ExtArgs>>): Prisma.Prisma__payment_methodClient<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Payment_methods.
   * @param {payment_methodDeleteManyArgs} args - Arguments to filter Payment_methods to delete.
   * @example
   * // Delete a few Payment_methods
   * const { count } = await prisma.payment_method.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends payment_methodDeleteManyArgs>(args?: Prisma.SelectSubset<T, payment_methodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Payment_methods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_methodUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Payment_methods
   * const payment_method = await prisma.payment_method.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends payment_methodUpdateManyArgs>(args: Prisma.SelectSubset<T, payment_methodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Payment_methods and returns the data updated in the database.
   * @param {payment_methodUpdateManyAndReturnArgs} args - Arguments to update many Payment_methods.
   * @example
   * // Update many Payment_methods
   * const payment_method = await prisma.payment_method.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Payment_methods and only return the `payment_method_id`
   * const payment_methodWithPayment_method_idOnly = await prisma.payment_method.updateManyAndReturn({
   *   select: { payment_method_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends payment_methodUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, payment_methodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Payment_method.
   * @param {payment_methodUpsertArgs} args - Arguments to update or create a Payment_method.
   * @example
   * // Update or create a Payment_method
   * const payment_method = await prisma.payment_method.upsert({
   *   create: {
   *     // ... data to create a Payment_method
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Payment_method we want to update
   *   }
   * })
   */
  upsert<T extends payment_methodUpsertArgs>(args: Prisma.SelectSubset<T, payment_methodUpsertArgs<ExtArgs>>): Prisma.Prisma__payment_methodClient<runtime.Types.Result.GetResult<Prisma.$payment_methodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Payment_methods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_methodCountArgs} args - Arguments to filter Payment_methods to count.
   * @example
   * // Count the number of Payment_methods
   * const count = await prisma.payment_method.count({
   *   where: {
   *     // ... the filter for the Payment_methods we want to count
   *   }
   * })
  **/
  count<T extends payment_methodCountArgs>(
    args?: Prisma.Subset<T, payment_methodCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Payment_methodCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Payment_method.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Payment_methodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Payment_methodAggregateArgs>(args: Prisma.Subset<T, Payment_methodAggregateArgs>): Prisma.PrismaPromise<GetPayment_methodAggregateType<T>>

  /**
   * Group by Payment_method.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_methodGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends payment_methodGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: payment_methodGroupByArgs['orderBy'] }
      : { orderBy?: payment_methodGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, payment_methodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_methodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the payment_method model
 */
readonly fields: payment_methodFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for payment_method.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__payment_methodClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  payment<T extends Prisma.payment_method$paymentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.payment_method$paymentArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the payment_method model
 */
export interface payment_methodFieldRefs {
  readonly payment_method_id: Prisma.FieldRef<"payment_method", 'Int'>
  readonly name: Prisma.FieldRef<"payment_method", 'String'>
  readonly description: Prisma.FieldRef<"payment_method", 'String'>
  readonly created_at: Prisma.FieldRef<"payment_method", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"payment_method", 'DateTime'>
}
    

// Custom InputTypes
/**
 * payment_method findUnique
 */
export type payment_methodFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * Filter, which payment_method to fetch.
   */
  where: Prisma.payment_methodWhereUniqueInput
}

/**
 * payment_method findUniqueOrThrow
 */
export type payment_methodFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * Filter, which payment_method to fetch.
   */
  where: Prisma.payment_methodWhereUniqueInput
}

/**
 * payment_method findFirst
 */
export type payment_methodFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * Filter, which payment_method to fetch.
   */
  where?: Prisma.payment_methodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payment_methods to fetch.
   */
  orderBy?: Prisma.payment_methodOrderByWithRelationInput | Prisma.payment_methodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for payment_methods.
   */
  cursor?: Prisma.payment_methodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payment_methods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payment_methods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of payment_methods.
   */
  distinct?: Prisma.Payment_methodScalarFieldEnum | Prisma.Payment_methodScalarFieldEnum[]
}

/**
 * payment_method findFirstOrThrow
 */
export type payment_methodFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * Filter, which payment_method to fetch.
   */
  where?: Prisma.payment_methodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payment_methods to fetch.
   */
  orderBy?: Prisma.payment_methodOrderByWithRelationInput | Prisma.payment_methodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for payment_methods.
   */
  cursor?: Prisma.payment_methodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payment_methods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payment_methods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of payment_methods.
   */
  distinct?: Prisma.Payment_methodScalarFieldEnum | Prisma.Payment_methodScalarFieldEnum[]
}

/**
 * payment_method findMany
 */
export type payment_methodFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * Filter, which payment_methods to fetch.
   */
  where?: Prisma.payment_methodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payment_methods to fetch.
   */
  orderBy?: Prisma.payment_methodOrderByWithRelationInput | Prisma.payment_methodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing payment_methods.
   */
  cursor?: Prisma.payment_methodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payment_methods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payment_methods.
   */
  skip?: number
  distinct?: Prisma.Payment_methodScalarFieldEnum | Prisma.Payment_methodScalarFieldEnum[]
}

/**
 * payment_method create
 */
export type payment_methodCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * The data needed to create a payment_method.
   */
  data: Prisma.XOR<Prisma.payment_methodCreateInput, Prisma.payment_methodUncheckedCreateInput>
}

/**
 * payment_method createMany
 */
export type payment_methodCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many payment_methods.
   */
  data: Prisma.payment_methodCreateManyInput | Prisma.payment_methodCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * payment_method createManyAndReturn
 */
export type payment_methodCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * The data used to create many payment_methods.
   */
  data: Prisma.payment_methodCreateManyInput | Prisma.payment_methodCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * payment_method update
 */
export type payment_methodUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * The data needed to update a payment_method.
   */
  data: Prisma.XOR<Prisma.payment_methodUpdateInput, Prisma.payment_methodUncheckedUpdateInput>
  /**
   * Choose, which payment_method to update.
   */
  where: Prisma.payment_methodWhereUniqueInput
}

/**
 * payment_method updateMany
 */
export type payment_methodUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update payment_methods.
   */
  data: Prisma.XOR<Prisma.payment_methodUpdateManyMutationInput, Prisma.payment_methodUncheckedUpdateManyInput>
  /**
   * Filter which payment_methods to update
   */
  where?: Prisma.payment_methodWhereInput
  /**
   * Limit how many payment_methods to update.
   */
  limit?: number
}

/**
 * payment_method updateManyAndReturn
 */
export type payment_methodUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * The data used to update payment_methods.
   */
  data: Prisma.XOR<Prisma.payment_methodUpdateManyMutationInput, Prisma.payment_methodUncheckedUpdateManyInput>
  /**
   * Filter which payment_methods to update
   */
  where?: Prisma.payment_methodWhereInput
  /**
   * Limit how many payment_methods to update.
   */
  limit?: number
}

/**
 * payment_method upsert
 */
export type payment_methodUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * The filter to search for the payment_method to update in case it exists.
   */
  where: Prisma.payment_methodWhereUniqueInput
  /**
   * In case the payment_method found by the `where` argument doesn't exist, create a new payment_method with this data.
   */
  create: Prisma.XOR<Prisma.payment_methodCreateInput, Prisma.payment_methodUncheckedCreateInput>
  /**
   * In case the payment_method was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.payment_methodUpdateInput, Prisma.payment_methodUncheckedUpdateInput>
}

/**
 * payment_method delete
 */
export type payment_methodDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
  /**
   * Filter which payment_method to delete.
   */
  where: Prisma.payment_methodWhereUniqueInput
}

/**
 * payment_method deleteMany
 */
export type payment_methodDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which payment_methods to delete
   */
  where?: Prisma.payment_methodWhereInput
  /**
   * Limit how many payment_methods to delete.
   */
  limit?: number
}

/**
 * payment_method.payment
 */
export type payment_method$paymentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment
   */
  select?: Prisma.paymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment
   */
  omit?: Prisma.paymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentInclude<ExtArgs> | null
  where?: Prisma.paymentWhereInput
  orderBy?: Prisma.paymentOrderByWithRelationInput | Prisma.paymentOrderByWithRelationInput[]
  cursor?: Prisma.paymentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PaymentScalarFieldEnum | Prisma.PaymentScalarFieldEnum[]
}

/**
 * payment_method without action
 */
export type payment_methodDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_method
   */
  select?: Prisma.payment_methodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_method
   */
  omit?: Prisma.payment_methodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_methodInclude<ExtArgs> | null
}
