
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `category` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model category
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type categoryModel = runtime.Types.Result.DefaultSelection<Prisma.$categoryPayload>

export type AggregateCategory = {
  _count: CategoryCountAggregateOutputType | null
  _avg: CategoryAvgAggregateOutputType | null
  _sum: CategorySumAggregateOutputType | null
  _min: CategoryMinAggregateOutputType | null
  _max: CategoryMaxAggregateOutputType | null
}

export type CategoryAvgAggregateOutputType = {
  category_id: number | null
}

export type CategorySumAggregateOutputType = {
  category_id: number | null
}

export type CategoryMinAggregateOutputType = {
  category_id: number | null
  name: string | null
  description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type CategoryMaxAggregateOutputType = {
  category_id: number | null
  name: string | null
  description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type CategoryCountAggregateOutputType = {
  category_id: number
  name: number
  description: number
  created_at: number
  updated_at: number
  _all: number
}


export type CategoryAvgAggregateInputType = {
  category_id?: true
}

export type CategorySumAggregateInputType = {
  category_id?: true
}

export type CategoryMinAggregateInputType = {
  category_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
}

export type CategoryMaxAggregateInputType = {
  category_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
}

export type CategoryCountAggregateInputType = {
  category_id?: true
  name?: true
  description?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type CategoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which category to aggregate.
   */
  where?: Prisma.categoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of categories to fetch.
   */
  orderBy?: Prisma.categoryOrderByWithRelationInput | Prisma.categoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.categoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` categories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` categories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned categories
  **/
  _count?: true | CategoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CategoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CategorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CategoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CategoryMaxAggregateInputType
}

export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
      [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateCategory[P]>
}




export type categoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.categoryWhereInput
  orderBy?: Prisma.categoryOrderByWithAggregationInput | Prisma.categoryOrderByWithAggregationInput[]
  by: Prisma.CategoryScalarFieldEnum[] | Prisma.CategoryScalarFieldEnum
  having?: Prisma.categoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CategoryCountAggregateInputType | true
  _avg?: CategoryAvgAggregateInputType
  _sum?: CategorySumAggregateInputType
  _min?: CategoryMinAggregateInputType
  _max?: CategoryMaxAggregateInputType
}

export type CategoryGroupByOutputType = {
  category_id: number
  name: string
  description: string | null
  created_at: Date | null
  updated_at: Date | null
  _count: CategoryCountAggregateOutputType | null
  _avg: CategoryAvgAggregateOutputType | null
  _sum: CategorySumAggregateOutputType | null
  _min: CategoryMinAggregateOutputType | null
  _max: CategoryMaxAggregateOutputType | null
}

type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CategoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CategoryGroupByOutputType[P]>
      }
    >
  > 



export type categoryWhereInput = {
  AND?: Prisma.categoryWhereInput | Prisma.categoryWhereInput[]
  OR?: Prisma.categoryWhereInput[]
  NOT?: Prisma.categoryWhereInput | Prisma.categoryWhereInput[]
  category_id?: Prisma.IntFilter<"category"> | number
  name?: Prisma.StringFilter<"category"> | string
  description?: Prisma.StringNullableFilter<"category"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"category"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"category"> | Date | string | null
  product?: Prisma.ProductListRelationFilter
}

export type categoryOrderByWithRelationInput = {
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  product?: Prisma.productOrderByRelationAggregateInput
}

export type categoryWhereUniqueInput = Prisma.AtLeast<{
  category_id?: number
  name?: string
  AND?: Prisma.categoryWhereInput | Prisma.categoryWhereInput[]
  OR?: Prisma.categoryWhereInput[]
  NOT?: Prisma.categoryWhereInput | Prisma.categoryWhereInput[]
  description?: Prisma.StringNullableFilter<"category"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"category"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"category"> | Date | string | null
  product?: Prisma.ProductListRelationFilter
}, "category_id" | "name">

export type categoryOrderByWithAggregationInput = {
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.categoryCountOrderByAggregateInput
  _avg?: Prisma.categoryAvgOrderByAggregateInput
  _max?: Prisma.categoryMaxOrderByAggregateInput
  _min?: Prisma.categoryMinOrderByAggregateInput
  _sum?: Prisma.categorySumOrderByAggregateInput
}

export type categoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.categoryScalarWhereWithAggregatesInput | Prisma.categoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.categoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.categoryScalarWhereWithAggregatesInput | Prisma.categoryScalarWhereWithAggregatesInput[]
  category_id?: Prisma.IntWithAggregatesFilter<"category"> | number
  name?: Prisma.StringWithAggregatesFilter<"category"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"category"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"category"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"category"> | Date | string | null
}

export type categoryCreateInput = {
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  product?: Prisma.productCreateNestedManyWithoutCategoryInput
}

export type categoryUncheckedCreateInput = {
  category_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  product?: Prisma.productUncheckedCreateNestedManyWithoutCategoryInput
}

export type categoryUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product?: Prisma.productUpdateManyWithoutCategoryNestedInput
}

export type categoryUncheckedUpdateInput = {
  category_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product?: Prisma.productUncheckedUpdateManyWithoutCategoryNestedInput
}

export type categoryCreateManyInput = {
  category_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type categoryUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type categoryUncheckedUpdateManyInput = {
  category_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type categoryCountOrderByAggregateInput = {
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type categoryAvgOrderByAggregateInput = {
  category_id?: Prisma.SortOrder
}

export type categoryMaxOrderByAggregateInput = {
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type categoryMinOrderByAggregateInput = {
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type categorySumOrderByAggregateInput = {
  category_id?: Prisma.SortOrder
}

export type CategoryNullableScalarRelationFilter = {
  is?: Prisma.categoryWhereInput | null
  isNot?: Prisma.categoryWhereInput | null
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type categoryCreateNestedOneWithoutProductInput = {
  create?: Prisma.XOR<Prisma.categoryCreateWithoutProductInput, Prisma.categoryUncheckedCreateWithoutProductInput>
  connectOrCreate?: Prisma.categoryCreateOrConnectWithoutProductInput
  connect?: Prisma.categoryWhereUniqueInput
}

export type categoryUpdateOneWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.categoryCreateWithoutProductInput, Prisma.categoryUncheckedCreateWithoutProductInput>
  connectOrCreate?: Prisma.categoryCreateOrConnectWithoutProductInput
  upsert?: Prisma.categoryUpsertWithoutProductInput
  disconnect?: Prisma.categoryWhereInput | boolean
  delete?: Prisma.categoryWhereInput | boolean
  connect?: Prisma.categoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.categoryUpdateToOneWithWhereWithoutProductInput, Prisma.categoryUpdateWithoutProductInput>, Prisma.categoryUncheckedUpdateWithoutProductInput>
}

export type categoryCreateWithoutProductInput = {
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type categoryUncheckedCreateWithoutProductInput = {
  category_id?: number
  name: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type categoryCreateOrConnectWithoutProductInput = {
  where: Prisma.categoryWhereUniqueInput
  create: Prisma.XOR<Prisma.categoryCreateWithoutProductInput, Prisma.categoryUncheckedCreateWithoutProductInput>
}

export type categoryUpsertWithoutProductInput = {
  update: Prisma.XOR<Prisma.categoryUpdateWithoutProductInput, Prisma.categoryUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.categoryCreateWithoutProductInput, Prisma.categoryUncheckedCreateWithoutProductInput>
  where?: Prisma.categoryWhereInput
}

export type categoryUpdateToOneWithWhereWithoutProductInput = {
  where?: Prisma.categoryWhereInput
  data: Prisma.XOR<Prisma.categoryUpdateWithoutProductInput, Prisma.categoryUncheckedUpdateWithoutProductInput>
}

export type categoryUpdateWithoutProductInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type categoryUncheckedUpdateWithoutProductInput = {
  category_id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type CategoryCountOutputType
 */

export type CategoryCountOutputType = {
  product: number
}

export type CategoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | CategoryCountOutputTypeCountProductArgs
}

/**
 * CategoryCountOutputType without action
 */
export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CategoryCountOutputType
   */
  select?: Prisma.CategoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CategoryCountOutputType without action
 */
export type CategoryCountOutputTypeCountProductArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.productWhereInput
}


export type categorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  category_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
  product?: boolean | Prisma.category$productArgs<ExtArgs>
  _count?: boolean | Prisma.CategoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["category"]>

export type categorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  category_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["category"]>

export type categorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  category_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["category"]>

export type categorySelectScalar = {
  category_id?: boolean
  name?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type categoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"category_id" | "name" | "description" | "created_at" | "updated_at", ExtArgs["result"]["category"]>
export type categoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.category$productArgs<ExtArgs>
  _count?: boolean | Prisma.CategoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type categoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type categoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $categoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "category"
  objects: {
    product: Prisma.$productPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    category_id: number
    name: string
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["category"]>
  composites: {}
}

export type categoryGetPayload<S extends boolean | null | undefined | categoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$categoryPayload, S>

export type categoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<categoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CategoryCountAggregateInputType | true
  }

export interface categoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
  /**
   * Find zero or one Category that matches the filter.
   * @param {categoryFindUniqueArgs} args - Arguments to find a Category
   * @example
   * // Get one Category
   * const category = await prisma.category.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends categoryFindUniqueArgs>(args: Prisma.SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Category that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
   * @example
   * // Get one Category
   * const category = await prisma.category.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Category that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoryFindFirstArgs} args - Arguments to find a Category
   * @example
   * // Get one Category
   * const category = await prisma.category.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends categoryFindFirstArgs>(args?: Prisma.SelectSubset<T, categoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Category that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
   * @example
   * // Get one Category
   * const category = await prisma.category.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends categoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Categories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Categories
   * const categories = await prisma.category.findMany()
   * 
   * // Get first 10 Categories
   * const categories = await prisma.category.findMany({ take: 10 })
   * 
   * // Only select the `category_id`
   * const categoryWithCategory_idOnly = await prisma.category.findMany({ select: { category_id: true } })
   * 
   */
  findMany<T extends categoryFindManyArgs>(args?: Prisma.SelectSubset<T, categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Category.
   * @param {categoryCreateArgs} args - Arguments to create a Category.
   * @example
   * // Create one Category
   * const Category = await prisma.category.create({
   *   data: {
   *     // ... data to create a Category
   *   }
   * })
   * 
   */
  create<T extends categoryCreateArgs>(args: Prisma.SelectSubset<T, categoryCreateArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Categories.
   * @param {categoryCreateManyArgs} args - Arguments to create many Categories.
   * @example
   * // Create many Categories
   * const category = await prisma.category.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends categoryCreateManyArgs>(args?: Prisma.SelectSubset<T, categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Categories and returns the data saved in the database.
   * @param {categoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
   * @example
   * // Create many Categories
   * const category = await prisma.category.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Categories and only return the `category_id`
   * const categoryWithCategory_idOnly = await prisma.category.createManyAndReturn({
   *   select: { category_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends categoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Category.
   * @param {categoryDeleteArgs} args - Arguments to delete one Category.
   * @example
   * // Delete one Category
   * const Category = await prisma.category.delete({
   *   where: {
   *     // ... filter to delete one Category
   *   }
   * })
   * 
   */
  delete<T extends categoryDeleteArgs>(args: Prisma.SelectSubset<T, categoryDeleteArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Category.
   * @param {categoryUpdateArgs} args - Arguments to update one Category.
   * @example
   * // Update one Category
   * const category = await prisma.category.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends categoryUpdateArgs>(args: Prisma.SelectSubset<T, categoryUpdateArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Categories.
   * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
   * @example
   * // Delete a few Categories
   * const { count } = await prisma.category.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends categoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Categories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Categories
   * const category = await prisma.category.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends categoryUpdateManyArgs>(args: Prisma.SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Categories and returns the data updated in the database.
   * @param {categoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
   * @example
   * // Update many Categories
   * const category = await prisma.category.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Categories and only return the `category_id`
   * const categoryWithCategory_idOnly = await prisma.category.updateManyAndReturn({
   *   select: { category_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends categoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, categoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Category.
   * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
   * @example
   * // Update or create a Category
   * const category = await prisma.category.upsert({
   *   create: {
   *     // ... data to create a Category
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Category we want to update
   *   }
   * })
   */
  upsert<T extends categoryUpsertArgs>(args: Prisma.SelectSubset<T, categoryUpsertArgs<ExtArgs>>): Prisma.Prisma__categoryClient<runtime.Types.Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Categories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoryCountArgs} args - Arguments to filter Categories to count.
   * @example
   * // Count the number of Categories
   * const count = await prisma.category.count({
   *   where: {
   *     // ... the filter for the Categories we want to count
   *   }
   * })
  **/
  count<T extends categoryCountArgs>(
    args?: Prisma.Subset<T, categoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CategoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Category.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CategoryAggregateArgs>(args: Prisma.Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

  /**
   * Group by Category.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends categoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: categoryGroupByArgs['orderBy'] }
      : { orderBy?: categoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the category model
 */
readonly fields: categoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for category.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__categoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.category$productArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.category$productArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the category model
 */
export interface categoryFieldRefs {
  readonly category_id: Prisma.FieldRef<"category", 'Int'>
  readonly name: Prisma.FieldRef<"category", 'String'>
  readonly description: Prisma.FieldRef<"category", 'String'>
  readonly created_at: Prisma.FieldRef<"category", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"category", 'DateTime'>
}
    

// Custom InputTypes
/**
 * category findUnique
 */
export type categoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * Filter, which category to fetch.
   */
  where: Prisma.categoryWhereUniqueInput
}

/**
 * category findUniqueOrThrow
 */
export type categoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * Filter, which category to fetch.
   */
  where: Prisma.categoryWhereUniqueInput
}

/**
 * category findFirst
 */
export type categoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * Filter, which category to fetch.
   */
  where?: Prisma.categoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of categories to fetch.
   */
  orderBy?: Prisma.categoryOrderByWithRelationInput | Prisma.categoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for categories.
   */
  cursor?: Prisma.categoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` categories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` categories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of categories.
   */
  distinct?: Prisma.CategoryScalarFieldEnum | Prisma.CategoryScalarFieldEnum[]
}

/**
 * category findFirstOrThrow
 */
export type categoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * Filter, which category to fetch.
   */
  where?: Prisma.categoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of categories to fetch.
   */
  orderBy?: Prisma.categoryOrderByWithRelationInput | Prisma.categoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for categories.
   */
  cursor?: Prisma.categoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` categories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` categories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of categories.
   */
  distinct?: Prisma.CategoryScalarFieldEnum | Prisma.CategoryScalarFieldEnum[]
}

/**
 * category findMany
 */
export type categoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * Filter, which categories to fetch.
   */
  where?: Prisma.categoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of categories to fetch.
   */
  orderBy?: Prisma.categoryOrderByWithRelationInput | Prisma.categoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing categories.
   */
  cursor?: Prisma.categoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` categories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` categories.
   */
  skip?: number
  distinct?: Prisma.CategoryScalarFieldEnum | Prisma.CategoryScalarFieldEnum[]
}

/**
 * category create
 */
export type categoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * The data needed to create a category.
   */
  data: Prisma.XOR<Prisma.categoryCreateInput, Prisma.categoryUncheckedCreateInput>
}

/**
 * category createMany
 */
export type categoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many categories.
   */
  data: Prisma.categoryCreateManyInput | Prisma.categoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * category createManyAndReturn
 */
export type categoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * The data used to create many categories.
   */
  data: Prisma.categoryCreateManyInput | Prisma.categoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * category update
 */
export type categoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * The data needed to update a category.
   */
  data: Prisma.XOR<Prisma.categoryUpdateInput, Prisma.categoryUncheckedUpdateInput>
  /**
   * Choose, which category to update.
   */
  where: Prisma.categoryWhereUniqueInput
}

/**
 * category updateMany
 */
export type categoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update categories.
   */
  data: Prisma.XOR<Prisma.categoryUpdateManyMutationInput, Prisma.categoryUncheckedUpdateManyInput>
  /**
   * Filter which categories to update
   */
  where?: Prisma.categoryWhereInput
  /**
   * Limit how many categories to update.
   */
  limit?: number
}

/**
 * category updateManyAndReturn
 */
export type categoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * The data used to update categories.
   */
  data: Prisma.XOR<Prisma.categoryUpdateManyMutationInput, Prisma.categoryUncheckedUpdateManyInput>
  /**
   * Filter which categories to update
   */
  where?: Prisma.categoryWhereInput
  /**
   * Limit how many categories to update.
   */
  limit?: number
}

/**
 * category upsert
 */
export type categoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * The filter to search for the category to update in case it exists.
   */
  where: Prisma.categoryWhereUniqueInput
  /**
   * In case the category found by the `where` argument doesn't exist, create a new category with this data.
   */
  create: Prisma.XOR<Prisma.categoryCreateInput, Prisma.categoryUncheckedCreateInput>
  /**
   * In case the category was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.categoryUpdateInput, Prisma.categoryUncheckedUpdateInput>
}

/**
 * category delete
 */
export type categoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
  /**
   * Filter which category to delete.
   */
  where: Prisma.categoryWhereUniqueInput
}

/**
 * category deleteMany
 */
export type categoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which categories to delete
   */
  where?: Prisma.categoryWhereInput
  /**
   * Limit how many categories to delete.
   */
  limit?: number
}

/**
 * category.product
 */
export type category$productArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product
   */
  select?: Prisma.productSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product
   */
  omit?: Prisma.productOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productInclude<ExtArgs> | null
  where?: Prisma.productWhereInput
  orderBy?: Prisma.productOrderByWithRelationInput | Prisma.productOrderByWithRelationInput[]
  cursor?: Prisma.productWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductScalarFieldEnum | Prisma.ProductScalarFieldEnum[]
}

/**
 * category without action
 */
export type categoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the category
   */
  select?: Prisma.categorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the category
   */
  omit?: Prisma.categoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoryInclude<ExtArgs> | null
}
