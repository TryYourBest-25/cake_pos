
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `coupon` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model coupon
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type couponModel = runtime.Types.Result.DefaultSelection<Prisma.$couponPayload>

export type AggregateCoupon = {
  _count: CouponCountAggregateOutputType | null
  _avg: CouponAvgAggregateOutputType | null
  _sum: CouponSumAggregateOutputType | null
  _min: CouponMinAggregateOutputType | null
  _max: CouponMaxAggregateOutputType | null
}

export type CouponAvgAggregateOutputType = {
  coupon_id: number | null
}

export type CouponSumAggregateOutputType = {
  coupon_id: number | null
}

export type CouponMinAggregateOutputType = {
  coupon_id: number | null
  coupon: string | null
  description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type CouponMaxAggregateOutputType = {
  coupon_id: number | null
  coupon: string | null
  description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type CouponCountAggregateOutputType = {
  coupon_id: number
  coupon: number
  description: number
  created_at: number
  updated_at: number
  _all: number
}


export type CouponAvgAggregateInputType = {
  coupon_id?: true
}

export type CouponSumAggregateInputType = {
  coupon_id?: true
}

export type CouponMinAggregateInputType = {
  coupon_id?: true
  coupon?: true
  description?: true
  created_at?: true
  updated_at?: true
}

export type CouponMaxAggregateInputType = {
  coupon_id?: true
  coupon?: true
  description?: true
  created_at?: true
  updated_at?: true
}

export type CouponCountAggregateInputType = {
  coupon_id?: true
  coupon?: true
  description?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type CouponAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which coupon to aggregate.
   */
  where?: Prisma.couponWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupons to fetch.
   */
  orderBy?: Prisma.couponOrderByWithRelationInput | Prisma.couponOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.couponWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned coupons
  **/
  _count?: true | CouponCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CouponAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CouponSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CouponMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CouponMaxAggregateInputType
}

export type GetCouponAggregateType<T extends CouponAggregateArgs> = {
      [P in keyof T & keyof AggregateCoupon]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCoupon[P]>
    : Prisma.GetScalarType<T[P], AggregateCoupon[P]>
}




export type couponGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.couponWhereInput
  orderBy?: Prisma.couponOrderByWithAggregationInput | Prisma.couponOrderByWithAggregationInput[]
  by: Prisma.CouponScalarFieldEnum[] | Prisma.CouponScalarFieldEnum
  having?: Prisma.couponScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CouponCountAggregateInputType | true
  _avg?: CouponAvgAggregateInputType
  _sum?: CouponSumAggregateInputType
  _min?: CouponMinAggregateInputType
  _max?: CouponMaxAggregateInputType
}

export type CouponGroupByOutputType = {
  coupon_id: number
  coupon: string
  description: string | null
  created_at: Date | null
  updated_at: Date | null
  _count: CouponCountAggregateOutputType | null
  _avg: CouponAvgAggregateOutputType | null
  _sum: CouponSumAggregateOutputType | null
  _min: CouponMinAggregateOutputType | null
  _max: CouponMaxAggregateOutputType | null
}

type GetCouponGroupByPayload<T extends couponGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CouponGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CouponGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CouponGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CouponGroupByOutputType[P]>
      }
    >
  > 



export type couponWhereInput = {
  AND?: Prisma.couponWhereInput | Prisma.couponWhereInput[]
  OR?: Prisma.couponWhereInput[]
  NOT?: Prisma.couponWhereInput | Prisma.couponWhereInput[]
  coupon_id?: Prisma.IntFilter<"coupon"> | number
  coupon?: Prisma.StringFilter<"coupon"> | string
  description?: Prisma.StringNullableFilter<"coupon"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"coupon"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"coupon"> | Date | string | null
  discount?: Prisma.XOR<Prisma.DiscountNullableScalarRelationFilter, Prisma.discountWhereInput> | null
}

export type couponOrderByWithRelationInput = {
  coupon_id?: Prisma.SortOrder
  coupon?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  discount?: Prisma.discountOrderByWithRelationInput
}

export type couponWhereUniqueInput = Prisma.AtLeast<{
  coupon_id?: number
  coupon?: string
  AND?: Prisma.couponWhereInput | Prisma.couponWhereInput[]
  OR?: Prisma.couponWhereInput[]
  NOT?: Prisma.couponWhereInput | Prisma.couponWhereInput[]
  description?: Prisma.StringNullableFilter<"coupon"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"coupon"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"coupon"> | Date | string | null
  discount?: Prisma.XOR<Prisma.DiscountNullableScalarRelationFilter, Prisma.discountWhereInput> | null
}, "coupon_id" | "coupon">

export type couponOrderByWithAggregationInput = {
  coupon_id?: Prisma.SortOrder
  coupon?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.couponCountOrderByAggregateInput
  _avg?: Prisma.couponAvgOrderByAggregateInput
  _max?: Prisma.couponMaxOrderByAggregateInput
  _min?: Prisma.couponMinOrderByAggregateInput
  _sum?: Prisma.couponSumOrderByAggregateInput
}

export type couponScalarWhereWithAggregatesInput = {
  AND?: Prisma.couponScalarWhereWithAggregatesInput | Prisma.couponScalarWhereWithAggregatesInput[]
  OR?: Prisma.couponScalarWhereWithAggregatesInput[]
  NOT?: Prisma.couponScalarWhereWithAggregatesInput | Prisma.couponScalarWhereWithAggregatesInput[]
  coupon_id?: Prisma.IntWithAggregatesFilter<"coupon"> | number
  coupon?: Prisma.StringWithAggregatesFilter<"coupon"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"coupon"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"coupon"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"coupon"> | Date | string | null
}

export type couponCreateInput = {
  coupon: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  discount?: Prisma.discountCreateNestedOneWithoutCouponInput
}

export type couponUncheckedCreateInput = {
  coupon_id?: number
  coupon: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  discount?: Prisma.discountUncheckedCreateNestedOneWithoutCouponInput
}

export type couponUpdateInput = {
  coupon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  discount?: Prisma.discountUpdateOneWithoutCouponNestedInput
}

export type couponUncheckedUpdateInput = {
  coupon_id?: Prisma.IntFieldUpdateOperationsInput | number
  coupon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  discount?: Prisma.discountUncheckedUpdateOneWithoutCouponNestedInput
}

export type couponCreateManyInput = {
  coupon_id?: number
  coupon: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type couponUpdateManyMutationInput = {
  coupon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type couponUncheckedUpdateManyInput = {
  coupon_id?: Prisma.IntFieldUpdateOperationsInput | number
  coupon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type couponCountOrderByAggregateInput = {
  coupon_id?: Prisma.SortOrder
  coupon?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type couponAvgOrderByAggregateInput = {
  coupon_id?: Prisma.SortOrder
}

export type couponMaxOrderByAggregateInput = {
  coupon_id?: Prisma.SortOrder
  coupon?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type couponMinOrderByAggregateInput = {
  coupon_id?: Prisma.SortOrder
  coupon?: Prisma.SortOrder
  description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type couponSumOrderByAggregateInput = {
  coupon_id?: Prisma.SortOrder
}

export type CouponScalarRelationFilter = {
  is?: Prisma.couponWhereInput
  isNot?: Prisma.couponWhereInput
}

export type couponCreateNestedOneWithoutDiscountInput = {
  create?: Prisma.XOR<Prisma.couponCreateWithoutDiscountInput, Prisma.couponUncheckedCreateWithoutDiscountInput>
  connectOrCreate?: Prisma.couponCreateOrConnectWithoutDiscountInput
  connect?: Prisma.couponWhereUniqueInput
}

export type couponUpdateOneRequiredWithoutDiscountNestedInput = {
  create?: Prisma.XOR<Prisma.couponCreateWithoutDiscountInput, Prisma.couponUncheckedCreateWithoutDiscountInput>
  connectOrCreate?: Prisma.couponCreateOrConnectWithoutDiscountInput
  upsert?: Prisma.couponUpsertWithoutDiscountInput
  connect?: Prisma.couponWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.couponUpdateToOneWithWhereWithoutDiscountInput, Prisma.couponUpdateWithoutDiscountInput>, Prisma.couponUncheckedUpdateWithoutDiscountInput>
}

export type couponCreateWithoutDiscountInput = {
  coupon: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type couponUncheckedCreateWithoutDiscountInput = {
  coupon_id?: number
  coupon: string
  description?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type couponCreateOrConnectWithoutDiscountInput = {
  where: Prisma.couponWhereUniqueInput
  create: Prisma.XOR<Prisma.couponCreateWithoutDiscountInput, Prisma.couponUncheckedCreateWithoutDiscountInput>
}

export type couponUpsertWithoutDiscountInput = {
  update: Prisma.XOR<Prisma.couponUpdateWithoutDiscountInput, Prisma.couponUncheckedUpdateWithoutDiscountInput>
  create: Prisma.XOR<Prisma.couponCreateWithoutDiscountInput, Prisma.couponUncheckedCreateWithoutDiscountInput>
  where?: Prisma.couponWhereInput
}

export type couponUpdateToOneWithWhereWithoutDiscountInput = {
  where?: Prisma.couponWhereInput
  data: Prisma.XOR<Prisma.couponUpdateWithoutDiscountInput, Prisma.couponUncheckedUpdateWithoutDiscountInput>
}

export type couponUpdateWithoutDiscountInput = {
  coupon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type couponUncheckedUpdateWithoutDiscountInput = {
  coupon_id?: Prisma.IntFieldUpdateOperationsInput | number
  coupon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type couponSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  coupon_id?: boolean
  coupon?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
  discount?: boolean | Prisma.coupon$discountArgs<ExtArgs>
}, ExtArgs["result"]["coupon"]>

export type couponSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  coupon_id?: boolean
  coupon?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["coupon"]>

export type couponSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  coupon_id?: boolean
  coupon?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["coupon"]>

export type couponSelectScalar = {
  coupon_id?: boolean
  coupon?: boolean
  description?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type couponOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"coupon_id" | "coupon" | "description" | "created_at" | "updated_at", ExtArgs["result"]["coupon"]>
export type couponInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  discount?: boolean | Prisma.coupon$discountArgs<ExtArgs>
}
export type couponIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type couponIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $couponPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "coupon"
  objects: {
    discount: Prisma.$discountPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    coupon_id: number
    coupon: string
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["coupon"]>
  composites: {}
}

export type couponGetPayload<S extends boolean | null | undefined | couponDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$couponPayload, S>

export type couponCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<couponFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CouponCountAggregateInputType | true
  }

export interface couponDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['coupon'], meta: { name: 'coupon' } }
  /**
   * Find zero or one Coupon that matches the filter.
   * @param {couponFindUniqueArgs} args - Arguments to find a Coupon
   * @example
   * // Get one Coupon
   * const coupon = await prisma.coupon.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends couponFindUniqueArgs>(args: Prisma.SelectSubset<T, couponFindUniqueArgs<ExtArgs>>): Prisma.Prisma__couponClient<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Coupon that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {couponFindUniqueOrThrowArgs} args - Arguments to find a Coupon
   * @example
   * // Get one Coupon
   * const coupon = await prisma.coupon.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends couponFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, couponFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__couponClient<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Coupon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponFindFirstArgs} args - Arguments to find a Coupon
   * @example
   * // Get one Coupon
   * const coupon = await prisma.coupon.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends couponFindFirstArgs>(args?: Prisma.SelectSubset<T, couponFindFirstArgs<ExtArgs>>): Prisma.Prisma__couponClient<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Coupon that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponFindFirstOrThrowArgs} args - Arguments to find a Coupon
   * @example
   * // Get one Coupon
   * const coupon = await prisma.coupon.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends couponFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, couponFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__couponClient<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Coupons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Coupons
   * const coupons = await prisma.coupon.findMany()
   * 
   * // Get first 10 Coupons
   * const coupons = await prisma.coupon.findMany({ take: 10 })
   * 
   * // Only select the `coupon_id`
   * const couponWithCoupon_idOnly = await prisma.coupon.findMany({ select: { coupon_id: true } })
   * 
   */
  findMany<T extends couponFindManyArgs>(args?: Prisma.SelectSubset<T, couponFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Coupon.
   * @param {couponCreateArgs} args - Arguments to create a Coupon.
   * @example
   * // Create one Coupon
   * const Coupon = await prisma.coupon.create({
   *   data: {
   *     // ... data to create a Coupon
   *   }
   * })
   * 
   */
  create<T extends couponCreateArgs>(args: Prisma.SelectSubset<T, couponCreateArgs<ExtArgs>>): Prisma.Prisma__couponClient<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Coupons.
   * @param {couponCreateManyArgs} args - Arguments to create many Coupons.
   * @example
   * // Create many Coupons
   * const coupon = await prisma.coupon.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends couponCreateManyArgs>(args?: Prisma.SelectSubset<T, couponCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Coupons and returns the data saved in the database.
   * @param {couponCreateManyAndReturnArgs} args - Arguments to create many Coupons.
   * @example
   * // Create many Coupons
   * const coupon = await prisma.coupon.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Coupons and only return the `coupon_id`
   * const couponWithCoupon_idOnly = await prisma.coupon.createManyAndReturn({
   *   select: { coupon_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends couponCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, couponCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Coupon.
   * @param {couponDeleteArgs} args - Arguments to delete one Coupon.
   * @example
   * // Delete one Coupon
   * const Coupon = await prisma.coupon.delete({
   *   where: {
   *     // ... filter to delete one Coupon
   *   }
   * })
   * 
   */
  delete<T extends couponDeleteArgs>(args: Prisma.SelectSubset<T, couponDeleteArgs<ExtArgs>>): Prisma.Prisma__couponClient<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Coupon.
   * @param {couponUpdateArgs} args - Arguments to update one Coupon.
   * @example
   * // Update one Coupon
   * const coupon = await prisma.coupon.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends couponUpdateArgs>(args: Prisma.SelectSubset<T, couponUpdateArgs<ExtArgs>>): Prisma.Prisma__couponClient<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Coupons.
   * @param {couponDeleteManyArgs} args - Arguments to filter Coupons to delete.
   * @example
   * // Delete a few Coupons
   * const { count } = await prisma.coupon.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends couponDeleteManyArgs>(args?: Prisma.SelectSubset<T, couponDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Coupons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Coupons
   * const coupon = await prisma.coupon.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends couponUpdateManyArgs>(args: Prisma.SelectSubset<T, couponUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Coupons and returns the data updated in the database.
   * @param {couponUpdateManyAndReturnArgs} args - Arguments to update many Coupons.
   * @example
   * // Update many Coupons
   * const coupon = await prisma.coupon.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Coupons and only return the `coupon_id`
   * const couponWithCoupon_idOnly = await prisma.coupon.updateManyAndReturn({
   *   select: { coupon_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends couponUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, couponUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Coupon.
   * @param {couponUpsertArgs} args - Arguments to update or create a Coupon.
   * @example
   * // Update or create a Coupon
   * const coupon = await prisma.coupon.upsert({
   *   create: {
   *     // ... data to create a Coupon
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Coupon we want to update
   *   }
   * })
   */
  upsert<T extends couponUpsertArgs>(args: Prisma.SelectSubset<T, couponUpsertArgs<ExtArgs>>): Prisma.Prisma__couponClient<runtime.Types.Result.GetResult<Prisma.$couponPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Coupons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponCountArgs} args - Arguments to filter Coupons to count.
   * @example
   * // Count the number of Coupons
   * const count = await prisma.coupon.count({
   *   where: {
   *     // ... the filter for the Coupons we want to count
   *   }
   * })
  **/
  count<T extends couponCountArgs>(
    args?: Prisma.Subset<T, couponCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CouponCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Coupon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CouponAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CouponAggregateArgs>(args: Prisma.Subset<T, CouponAggregateArgs>): Prisma.PrismaPromise<GetCouponAggregateType<T>>

  /**
   * Group by Coupon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends couponGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: couponGroupByArgs['orderBy'] }
      : { orderBy?: couponGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, couponGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCouponGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the coupon model
 */
readonly fields: couponFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for coupon.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__couponClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  discount<T extends Prisma.coupon$discountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.coupon$discountArgs<ExtArgs>>): Prisma.Prisma__discountClient<runtime.Types.Result.GetResult<Prisma.$discountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the coupon model
 */
export interface couponFieldRefs {
  readonly coupon_id: Prisma.FieldRef<"coupon", 'Int'>
  readonly coupon: Prisma.FieldRef<"coupon", 'String'>
  readonly description: Prisma.FieldRef<"coupon", 'String'>
  readonly created_at: Prisma.FieldRef<"coupon", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"coupon", 'DateTime'>
}
    

// Custom InputTypes
/**
 * coupon findUnique
 */
export type couponFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * Filter, which coupon to fetch.
   */
  where: Prisma.couponWhereUniqueInput
}

/**
 * coupon findUniqueOrThrow
 */
export type couponFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * Filter, which coupon to fetch.
   */
  where: Prisma.couponWhereUniqueInput
}

/**
 * coupon findFirst
 */
export type couponFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * Filter, which coupon to fetch.
   */
  where?: Prisma.couponWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupons to fetch.
   */
  orderBy?: Prisma.couponOrderByWithRelationInput | Prisma.couponOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for coupons.
   */
  cursor?: Prisma.couponWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of coupons.
   */
  distinct?: Prisma.CouponScalarFieldEnum | Prisma.CouponScalarFieldEnum[]
}

/**
 * coupon findFirstOrThrow
 */
export type couponFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * Filter, which coupon to fetch.
   */
  where?: Prisma.couponWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupons to fetch.
   */
  orderBy?: Prisma.couponOrderByWithRelationInput | Prisma.couponOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for coupons.
   */
  cursor?: Prisma.couponWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of coupons.
   */
  distinct?: Prisma.CouponScalarFieldEnum | Prisma.CouponScalarFieldEnum[]
}

/**
 * coupon findMany
 */
export type couponFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * Filter, which coupons to fetch.
   */
  where?: Prisma.couponWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupons to fetch.
   */
  orderBy?: Prisma.couponOrderByWithRelationInput | Prisma.couponOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing coupons.
   */
  cursor?: Prisma.couponWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupons.
   */
  skip?: number
  distinct?: Prisma.CouponScalarFieldEnum | Prisma.CouponScalarFieldEnum[]
}

/**
 * coupon create
 */
export type couponCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * The data needed to create a coupon.
   */
  data: Prisma.XOR<Prisma.couponCreateInput, Prisma.couponUncheckedCreateInput>
}

/**
 * coupon createMany
 */
export type couponCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many coupons.
   */
  data: Prisma.couponCreateManyInput | Prisma.couponCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * coupon createManyAndReturn
 */
export type couponCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * The data used to create many coupons.
   */
  data: Prisma.couponCreateManyInput | Prisma.couponCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * coupon update
 */
export type couponUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * The data needed to update a coupon.
   */
  data: Prisma.XOR<Prisma.couponUpdateInput, Prisma.couponUncheckedUpdateInput>
  /**
   * Choose, which coupon to update.
   */
  where: Prisma.couponWhereUniqueInput
}

/**
 * coupon updateMany
 */
export type couponUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update coupons.
   */
  data: Prisma.XOR<Prisma.couponUpdateManyMutationInput, Prisma.couponUncheckedUpdateManyInput>
  /**
   * Filter which coupons to update
   */
  where?: Prisma.couponWhereInput
  /**
   * Limit how many coupons to update.
   */
  limit?: number
}

/**
 * coupon updateManyAndReturn
 */
export type couponUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * The data used to update coupons.
   */
  data: Prisma.XOR<Prisma.couponUpdateManyMutationInput, Prisma.couponUncheckedUpdateManyInput>
  /**
   * Filter which coupons to update
   */
  where?: Prisma.couponWhereInput
  /**
   * Limit how many coupons to update.
   */
  limit?: number
}

/**
 * coupon upsert
 */
export type couponUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * The filter to search for the coupon to update in case it exists.
   */
  where: Prisma.couponWhereUniqueInput
  /**
   * In case the coupon found by the `where` argument doesn't exist, create a new coupon with this data.
   */
  create: Prisma.XOR<Prisma.couponCreateInput, Prisma.couponUncheckedCreateInput>
  /**
   * In case the coupon was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.couponUpdateInput, Prisma.couponUncheckedUpdateInput>
}

/**
 * coupon delete
 */
export type couponDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
  /**
   * Filter which coupon to delete.
   */
  where: Prisma.couponWhereUniqueInput
}

/**
 * coupon deleteMany
 */
export type couponDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which coupons to delete
   */
  where?: Prisma.couponWhereInput
  /**
   * Limit how many coupons to delete.
   */
  limit?: number
}

/**
 * coupon.discount
 */
export type coupon$discountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the discount
   */
  select?: Prisma.discountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the discount
   */
  omit?: Prisma.discountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.discountInclude<ExtArgs> | null
  where?: Prisma.discountWhereInput
}

/**
 * coupon without action
 */
export type couponDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon
   */
  select?: Prisma.couponSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon
   */
  omit?: Prisma.couponOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponInclude<ExtArgs> | null
}
