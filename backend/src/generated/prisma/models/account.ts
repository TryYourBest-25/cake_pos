/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `account` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model account
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type accountModel = runtime.Types.Result.DefaultSelection<Prisma.$accountPayload>

export type AggregateAccount = {
  _count: AccountCountAggregateOutputType | null
  _avg: AccountAvgAggregateOutputType | null
  _sum: AccountSumAggregateOutputType | null
  _min: AccountMinAggregateOutputType | null
  _max: AccountMaxAggregateOutputType | null
}

export type AccountAvgAggregateOutputType = {
  account_id: number | null
  role_id: number | null
}

export type AccountSumAggregateOutputType = {
  account_id: number | null
  role_id: number | null
}

export type AccountMinAggregateOutputType = {
  account_id: number | null
  role_id: number | null
  username: string | null
  password_hash: string | null
  is_active: boolean | null
  is_locked: boolean | null
  last_login: Date | null
  created_at: Date | null
  updated_at: Date | null
}

export type AccountMaxAggregateOutputType = {
  account_id: number | null
  role_id: number | null
  username: string | null
  password_hash: string | null
  is_active: boolean | null
  is_locked: boolean | null
  last_login: Date | null
  created_at: Date | null
  updated_at: Date | null
}

export type AccountCountAggregateOutputType = {
  account_id: number
  role_id: number
  username: number
  password_hash: number
  is_active: number
  is_locked: number
  last_login: number
  created_at: number
  updated_at: number
  _all: number
}


export type AccountAvgAggregateInputType = {
  account_id?: true
  role_id?: true
}

export type AccountSumAggregateInputType = {
  account_id?: true
  role_id?: true
}

export type AccountMinAggregateInputType = {
  account_id?: true
  role_id?: true
  username?: true
  password_hash?: true
  is_active?: true
  is_locked?: true
  last_login?: true
  created_at?: true
  updated_at?: true
}

export type AccountMaxAggregateInputType = {
  account_id?: true
  role_id?: true
  username?: true
  password_hash?: true
  is_active?: true
  is_locked?: true
  last_login?: true
  created_at?: true
  updated_at?: true
}

export type AccountCountAggregateInputType = {
  account_id?: true
  role_id?: true
  username?: true
  password_hash?: true
  is_active?: true
  is_locked?: true
  last_login?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type AccountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which account to aggregate.
   */
  where?: Prisma.accountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of accounts to fetch.
   */
  orderBy?: Prisma.accountOrderByWithRelationInput | Prisma.accountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.accountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned accounts
  **/
  _count?: true | AccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AccountAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AccountSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccountMaxAggregateInputType
}

export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
      [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateAccount[P]>
}




export type accountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.accountWhereInput
  orderBy?: Prisma.accountOrderByWithAggregationInput | Prisma.accountOrderByWithAggregationInput[]
  by: Prisma.AccountScalarFieldEnum[] | Prisma.AccountScalarFieldEnum
  having?: Prisma.accountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccountCountAggregateInputType | true
  _avg?: AccountAvgAggregateInputType
  _sum?: AccountSumAggregateInputType
  _min?: AccountMinAggregateInputType
  _max?: AccountMaxAggregateInputType
}

export type AccountGroupByOutputType = {
  account_id: number
  role_id: number
  username: string
  password_hash: string
  is_active: boolean | null
  is_locked: boolean
  last_login: Date | null
  created_at: Date | null
  updated_at: Date | null
  _count: AccountCountAggregateOutputType | null
  _avg: AccountAvgAggregateOutputType | null
  _sum: AccountSumAggregateOutputType | null
  _min: AccountMinAggregateOutputType | null
  _max: AccountMaxAggregateOutputType | null
}

type GetAccountGroupByPayload<T extends accountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccountGroupByOutputType[P]>
      }
    >
  > 



export type accountWhereInput = {
  AND?: Prisma.accountWhereInput | Prisma.accountWhereInput[]
  OR?: Prisma.accountWhereInput[]
  NOT?: Prisma.accountWhereInput | Prisma.accountWhereInput[]
  account_id?: Prisma.IntFilter<"account"> | number
  role_id?: Prisma.IntFilter<"account"> | number
  username?: Prisma.StringFilter<"account"> | string
  password_hash?: Prisma.StringFilter<"account"> | string
  is_active?: Prisma.BoolNullableFilter<"account"> | boolean | null
  is_locked?: Prisma.BoolFilter<"account"> | boolean
  last_login?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
  created_at?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.roleWhereInput>
  customer?: Prisma.CustomerListRelationFilter
  employee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  manager?: Prisma.XOR<Prisma.ManagerNullableScalarRelationFilter, Prisma.managerWhereInput> | null
}

export type accountOrderByWithRelationInput = {
  account_id?: Prisma.SortOrder
  role_id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  is_locked?: Prisma.SortOrder
  last_login?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  role?: Prisma.roleOrderByWithRelationInput
  customer?: Prisma.customerOrderByRelationAggregateInput
  employee?: Prisma.employeeOrderByWithRelationInput
  manager?: Prisma.managerOrderByWithRelationInput
}

export type accountWhereUniqueInput = Prisma.AtLeast<{
  account_id?: number
  username?: string
  AND?: Prisma.accountWhereInput | Prisma.accountWhereInput[]
  OR?: Prisma.accountWhereInput[]
  NOT?: Prisma.accountWhereInput | Prisma.accountWhereInput[]
  role_id?: Prisma.IntFilter<"account"> | number
  password_hash?: Prisma.StringFilter<"account"> | string
  is_active?: Prisma.BoolNullableFilter<"account"> | boolean | null
  is_locked?: Prisma.BoolFilter<"account"> | boolean
  last_login?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
  created_at?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.roleWhereInput>
  customer?: Prisma.CustomerListRelationFilter
  employee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  manager?: Prisma.XOR<Prisma.ManagerNullableScalarRelationFilter, Prisma.managerWhereInput> | null
}, "account_id" | "username">

export type accountOrderByWithAggregationInput = {
  account_id?: Prisma.SortOrder
  role_id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  is_locked?: Prisma.SortOrder
  last_login?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.accountCountOrderByAggregateInput
  _avg?: Prisma.accountAvgOrderByAggregateInput
  _max?: Prisma.accountMaxOrderByAggregateInput
  _min?: Prisma.accountMinOrderByAggregateInput
  _sum?: Prisma.accountSumOrderByAggregateInput
}

export type accountScalarWhereWithAggregatesInput = {
  AND?: Prisma.accountScalarWhereWithAggregatesInput | Prisma.accountScalarWhereWithAggregatesInput[]
  OR?: Prisma.accountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.accountScalarWhereWithAggregatesInput | Prisma.accountScalarWhereWithAggregatesInput[]
  account_id?: Prisma.IntWithAggregatesFilter<"account"> | number
  role_id?: Prisma.IntWithAggregatesFilter<"account"> | number
  username?: Prisma.StringWithAggregatesFilter<"account"> | string
  password_hash?: Prisma.StringWithAggregatesFilter<"account"> | string
  is_active?: Prisma.BoolNullableWithAggregatesFilter<"account"> | boolean | null
  is_locked?: Prisma.BoolWithAggregatesFilter<"account"> | boolean
  last_login?: Prisma.DateTimeNullableWithAggregatesFilter<"account"> | Date | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"account"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"account"> | Date | string | null
}

export type accountCreateInput = {
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  role: Prisma.roleCreateNestedOneWithoutAccountInput
  customer?: Prisma.customerCreateNestedManyWithoutAccountInput
  employee?: Prisma.employeeCreateNestedOneWithoutAccountInput
  manager?: Prisma.managerCreateNestedOneWithoutAccountInput
}

export type accountUncheckedCreateInput = {
  account_id?: number
  role_id: number
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  customer?: Prisma.customerUncheckedCreateNestedManyWithoutAccountInput
  employee?: Prisma.employeeUncheckedCreateNestedOneWithoutAccountInput
  manager?: Prisma.managerUncheckedCreateNestedOneWithoutAccountInput
}

export type accountUpdateInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  role?: Prisma.roleUpdateOneRequiredWithoutAccountNestedInput
  customer?: Prisma.customerUpdateManyWithoutAccountNestedInput
  employee?: Prisma.employeeUpdateOneWithoutAccountNestedInput
  manager?: Prisma.managerUpdateOneWithoutAccountNestedInput
}

export type accountUncheckedUpdateInput = {
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  role_id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customer?: Prisma.customerUncheckedUpdateManyWithoutAccountNestedInput
  employee?: Prisma.employeeUncheckedUpdateOneWithoutAccountNestedInput
  manager?: Prisma.managerUncheckedUpdateOneWithoutAccountNestedInput
}

export type accountCreateManyInput = {
  account_id?: number
  role_id: number
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type accountUpdateManyMutationInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type accountUncheckedUpdateManyInput = {
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  role_id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type accountCountOrderByAggregateInput = {
  account_id?: Prisma.SortOrder
  role_id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  is_locked?: Prisma.SortOrder
  last_login?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type accountAvgOrderByAggregateInput = {
  account_id?: Prisma.SortOrder
  role_id?: Prisma.SortOrder
}

export type accountMaxOrderByAggregateInput = {
  account_id?: Prisma.SortOrder
  role_id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  is_locked?: Prisma.SortOrder
  last_login?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type accountMinOrderByAggregateInput = {
  account_id?: Prisma.SortOrder
  role_id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  is_locked?: Prisma.SortOrder
  last_login?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type accountSumOrderByAggregateInput = {
  account_id?: Prisma.SortOrder
  role_id?: Prisma.SortOrder
}

export type AccountNullableScalarRelationFilter = {
  is?: Prisma.accountWhereInput | null
  isNot?: Prisma.accountWhereInput | null
}

export type AccountScalarRelationFilter = {
  is?: Prisma.accountWhereInput
  isNot?: Prisma.accountWhereInput
}

export type AccountListRelationFilter = {
  every?: Prisma.accountWhereInput
  some?: Prisma.accountWhereInput
  none?: Prisma.accountWhereInput
}

export type accountOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type accountCreateNestedOneWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutCustomerInput, Prisma.accountUncheckedCreateWithoutCustomerInput>
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutCustomerInput
  connect?: Prisma.accountWhereUniqueInput
}

export type accountUpdateOneWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutCustomerInput, Prisma.accountUncheckedCreateWithoutCustomerInput>
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutCustomerInput
  upsert?: Prisma.accountUpsertWithoutCustomerInput
  disconnect?: Prisma.accountWhereInput | boolean
  delete?: Prisma.accountWhereInput | boolean
  connect?: Prisma.accountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.accountUpdateToOneWithWhereWithoutCustomerInput, Prisma.accountUpdateWithoutCustomerInput>, Prisma.accountUncheckedUpdateWithoutCustomerInput>
}

export type accountCreateNestedOneWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutEmployeeInput, Prisma.accountUncheckedCreateWithoutEmployeeInput>
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutEmployeeInput
  connect?: Prisma.accountWhereUniqueInput
}

export type accountUpdateOneRequiredWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutEmployeeInput, Prisma.accountUncheckedCreateWithoutEmployeeInput>
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutEmployeeInput
  upsert?: Prisma.accountUpsertWithoutEmployeeInput
  connect?: Prisma.accountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.accountUpdateToOneWithWhereWithoutEmployeeInput, Prisma.accountUpdateWithoutEmployeeInput>, Prisma.accountUncheckedUpdateWithoutEmployeeInput>
}

export type accountCreateNestedOneWithoutManagerInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutManagerInput, Prisma.accountUncheckedCreateWithoutManagerInput>
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutManagerInput
  connect?: Prisma.accountWhereUniqueInput
}

export type accountUpdateOneRequiredWithoutManagerNestedInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutManagerInput, Prisma.accountUncheckedCreateWithoutManagerInput>
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutManagerInput
  upsert?: Prisma.accountUpsertWithoutManagerInput
  connect?: Prisma.accountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.accountUpdateToOneWithWhereWithoutManagerInput, Prisma.accountUpdateWithoutManagerInput>, Prisma.accountUncheckedUpdateWithoutManagerInput>
}

export type accountCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutRoleInput, Prisma.accountUncheckedCreateWithoutRoleInput> | Prisma.accountCreateWithoutRoleInput[] | Prisma.accountUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutRoleInput | Prisma.accountCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.accountCreateManyRoleInputEnvelope
  connect?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
}

export type accountUncheckedCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutRoleInput, Prisma.accountUncheckedCreateWithoutRoleInput> | Prisma.accountCreateWithoutRoleInput[] | Prisma.accountUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutRoleInput | Prisma.accountCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.accountCreateManyRoleInputEnvelope
  connect?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
}

export type accountUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutRoleInput, Prisma.accountUncheckedCreateWithoutRoleInput> | Prisma.accountCreateWithoutRoleInput[] | Prisma.accountUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutRoleInput | Prisma.accountCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.accountUpsertWithWhereUniqueWithoutRoleInput | Prisma.accountUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.accountCreateManyRoleInputEnvelope
  set?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
  disconnect?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
  delete?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
  connect?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
  update?: Prisma.accountUpdateWithWhereUniqueWithoutRoleInput | Prisma.accountUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.accountUpdateManyWithWhereWithoutRoleInput | Prisma.accountUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.accountScalarWhereInput | Prisma.accountScalarWhereInput[]
}

export type accountUncheckedUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.accountCreateWithoutRoleInput, Prisma.accountUncheckedCreateWithoutRoleInput> | Prisma.accountCreateWithoutRoleInput[] | Prisma.accountUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.accountCreateOrConnectWithoutRoleInput | Prisma.accountCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.accountUpsertWithWhereUniqueWithoutRoleInput | Prisma.accountUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.accountCreateManyRoleInputEnvelope
  set?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
  disconnect?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
  delete?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
  connect?: Prisma.accountWhereUniqueInput | Prisma.accountWhereUniqueInput[]
  update?: Prisma.accountUpdateWithWhereUniqueWithoutRoleInput | Prisma.accountUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.accountUpdateManyWithWhereWithoutRoleInput | Prisma.accountUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.accountScalarWhereInput | Prisma.accountScalarWhereInput[]
}

export type accountCreateWithoutCustomerInput = {
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  role: Prisma.roleCreateNestedOneWithoutAccountInput
  employee?: Prisma.employeeCreateNestedOneWithoutAccountInput
  manager?: Prisma.managerCreateNestedOneWithoutAccountInput
}

export type accountUncheckedCreateWithoutCustomerInput = {
  account_id?: number
  role_id: number
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  employee?: Prisma.employeeUncheckedCreateNestedOneWithoutAccountInput
  manager?: Prisma.managerUncheckedCreateNestedOneWithoutAccountInput
}

export type accountCreateOrConnectWithoutCustomerInput = {
  where: Prisma.accountWhereUniqueInput
  create: Prisma.XOR<Prisma.accountCreateWithoutCustomerInput, Prisma.accountUncheckedCreateWithoutCustomerInput>
}

export type accountUpsertWithoutCustomerInput = {
  update: Prisma.XOR<Prisma.accountUpdateWithoutCustomerInput, Prisma.accountUncheckedUpdateWithoutCustomerInput>
  create: Prisma.XOR<Prisma.accountCreateWithoutCustomerInput, Prisma.accountUncheckedCreateWithoutCustomerInput>
  where?: Prisma.accountWhereInput
}

export type accountUpdateToOneWithWhereWithoutCustomerInput = {
  where?: Prisma.accountWhereInput
  data: Prisma.XOR<Prisma.accountUpdateWithoutCustomerInput, Prisma.accountUncheckedUpdateWithoutCustomerInput>
}

export type accountUpdateWithoutCustomerInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  role?: Prisma.roleUpdateOneRequiredWithoutAccountNestedInput
  employee?: Prisma.employeeUpdateOneWithoutAccountNestedInput
  manager?: Prisma.managerUpdateOneWithoutAccountNestedInput
}

export type accountUncheckedUpdateWithoutCustomerInput = {
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  role_id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  employee?: Prisma.employeeUncheckedUpdateOneWithoutAccountNestedInput
  manager?: Prisma.managerUncheckedUpdateOneWithoutAccountNestedInput
}

export type accountCreateWithoutEmployeeInput = {
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  role: Prisma.roleCreateNestedOneWithoutAccountInput
  customer?: Prisma.customerCreateNestedManyWithoutAccountInput
  manager?: Prisma.managerCreateNestedOneWithoutAccountInput
}

export type accountUncheckedCreateWithoutEmployeeInput = {
  account_id?: number
  role_id: number
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  customer?: Prisma.customerUncheckedCreateNestedManyWithoutAccountInput
  manager?: Prisma.managerUncheckedCreateNestedOneWithoutAccountInput
}

export type accountCreateOrConnectWithoutEmployeeInput = {
  where: Prisma.accountWhereUniqueInput
  create: Prisma.XOR<Prisma.accountCreateWithoutEmployeeInput, Prisma.accountUncheckedCreateWithoutEmployeeInput>
}

export type accountUpsertWithoutEmployeeInput = {
  update: Prisma.XOR<Prisma.accountUpdateWithoutEmployeeInput, Prisma.accountUncheckedUpdateWithoutEmployeeInput>
  create: Prisma.XOR<Prisma.accountCreateWithoutEmployeeInput, Prisma.accountUncheckedCreateWithoutEmployeeInput>
  where?: Prisma.accountWhereInput
}

export type accountUpdateToOneWithWhereWithoutEmployeeInput = {
  where?: Prisma.accountWhereInput
  data: Prisma.XOR<Prisma.accountUpdateWithoutEmployeeInput, Prisma.accountUncheckedUpdateWithoutEmployeeInput>
}

export type accountUpdateWithoutEmployeeInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  role?: Prisma.roleUpdateOneRequiredWithoutAccountNestedInput
  customer?: Prisma.customerUpdateManyWithoutAccountNestedInput
  manager?: Prisma.managerUpdateOneWithoutAccountNestedInput
}

export type accountUncheckedUpdateWithoutEmployeeInput = {
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  role_id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customer?: Prisma.customerUncheckedUpdateManyWithoutAccountNestedInput
  manager?: Prisma.managerUncheckedUpdateOneWithoutAccountNestedInput
}

export type accountCreateWithoutManagerInput = {
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  role: Prisma.roleCreateNestedOneWithoutAccountInput
  customer?: Prisma.customerCreateNestedManyWithoutAccountInput
  employee?: Prisma.employeeCreateNestedOneWithoutAccountInput
}

export type accountUncheckedCreateWithoutManagerInput = {
  account_id?: number
  role_id: number
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  customer?: Prisma.customerUncheckedCreateNestedManyWithoutAccountInput
  employee?: Prisma.employeeUncheckedCreateNestedOneWithoutAccountInput
}

export type accountCreateOrConnectWithoutManagerInput = {
  where: Prisma.accountWhereUniqueInput
  create: Prisma.XOR<Prisma.accountCreateWithoutManagerInput, Prisma.accountUncheckedCreateWithoutManagerInput>
}

export type accountUpsertWithoutManagerInput = {
  update: Prisma.XOR<Prisma.accountUpdateWithoutManagerInput, Prisma.accountUncheckedUpdateWithoutManagerInput>
  create: Prisma.XOR<Prisma.accountCreateWithoutManagerInput, Prisma.accountUncheckedCreateWithoutManagerInput>
  where?: Prisma.accountWhereInput
}

export type accountUpdateToOneWithWhereWithoutManagerInput = {
  where?: Prisma.accountWhereInput
  data: Prisma.XOR<Prisma.accountUpdateWithoutManagerInput, Prisma.accountUncheckedUpdateWithoutManagerInput>
}

export type accountUpdateWithoutManagerInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  role?: Prisma.roleUpdateOneRequiredWithoutAccountNestedInput
  customer?: Prisma.customerUpdateManyWithoutAccountNestedInput
  employee?: Prisma.employeeUpdateOneWithoutAccountNestedInput
}

export type accountUncheckedUpdateWithoutManagerInput = {
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  role_id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customer?: Prisma.customerUncheckedUpdateManyWithoutAccountNestedInput
  employee?: Prisma.employeeUncheckedUpdateOneWithoutAccountNestedInput
}

export type accountCreateWithoutRoleInput = {
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  customer?: Prisma.customerCreateNestedManyWithoutAccountInput
  employee?: Prisma.employeeCreateNestedOneWithoutAccountInput
  manager?: Prisma.managerCreateNestedOneWithoutAccountInput
}

export type accountUncheckedCreateWithoutRoleInput = {
  account_id?: number
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  customer?: Prisma.customerUncheckedCreateNestedManyWithoutAccountInput
  employee?: Prisma.employeeUncheckedCreateNestedOneWithoutAccountInput
  manager?: Prisma.managerUncheckedCreateNestedOneWithoutAccountInput
}

export type accountCreateOrConnectWithoutRoleInput = {
  where: Prisma.accountWhereUniqueInput
  create: Prisma.XOR<Prisma.accountCreateWithoutRoleInput, Prisma.accountUncheckedCreateWithoutRoleInput>
}

export type accountCreateManyRoleInputEnvelope = {
  data: Prisma.accountCreateManyRoleInput | Prisma.accountCreateManyRoleInput[]
  skipDuplicates?: boolean
}

export type accountUpsertWithWhereUniqueWithoutRoleInput = {
  where: Prisma.accountWhereUniqueInput
  update: Prisma.XOR<Prisma.accountUpdateWithoutRoleInput, Prisma.accountUncheckedUpdateWithoutRoleInput>
  create: Prisma.XOR<Prisma.accountCreateWithoutRoleInput, Prisma.accountUncheckedCreateWithoutRoleInput>
}

export type accountUpdateWithWhereUniqueWithoutRoleInput = {
  where: Prisma.accountWhereUniqueInput
  data: Prisma.XOR<Prisma.accountUpdateWithoutRoleInput, Prisma.accountUncheckedUpdateWithoutRoleInput>
}

export type accountUpdateManyWithWhereWithoutRoleInput = {
  where: Prisma.accountScalarWhereInput
  data: Prisma.XOR<Prisma.accountUpdateManyMutationInput, Prisma.accountUncheckedUpdateManyWithoutRoleInput>
}

export type accountScalarWhereInput = {
  AND?: Prisma.accountScalarWhereInput | Prisma.accountScalarWhereInput[]
  OR?: Prisma.accountScalarWhereInput[]
  NOT?: Prisma.accountScalarWhereInput | Prisma.accountScalarWhereInput[]
  account_id?: Prisma.IntFilter<"account"> | number
  role_id?: Prisma.IntFilter<"account"> | number
  username?: Prisma.StringFilter<"account"> | string
  password_hash?: Prisma.StringFilter<"account"> | string
  is_active?: Prisma.BoolNullableFilter<"account"> | boolean | null
  is_locked?: Prisma.BoolFilter<"account"> | boolean
  last_login?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
  created_at?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"account"> | Date | string | null
}

export type accountCreateManyRoleInput = {
  account_id?: number
  username: string
  password_hash: string
  is_active?: boolean | null
  is_locked?: boolean
  last_login?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type accountUpdateWithoutRoleInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customer?: Prisma.customerUpdateManyWithoutAccountNestedInput
  employee?: Prisma.employeeUpdateOneWithoutAccountNestedInput
  manager?: Prisma.managerUpdateOneWithoutAccountNestedInput
}

export type accountUncheckedUpdateWithoutRoleInput = {
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customer?: Prisma.customerUncheckedUpdateManyWithoutAccountNestedInput
  employee?: Prisma.employeeUncheckedUpdateOneWithoutAccountNestedInput
  manager?: Prisma.managerUncheckedUpdateOneWithoutAccountNestedInput
}

export type accountUncheckedUpdateManyWithoutRoleInput = {
  account_id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  is_locked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type AccountCountOutputType
 */

export type AccountCountOutputType = {
  customer: number
}

export type AccountCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | AccountCountOutputTypeCountCustomerArgs
}

/**
 * AccountCountOutputType without action
 */
export type AccountCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountCountOutputType
   */
  select?: Prisma.AccountCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AccountCountOutputType without action
 */
export type AccountCountOutputTypeCountCustomerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.customerWhereInput
}


export type accountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  account_id?: boolean
  role_id?: boolean
  username?: boolean
  password_hash?: boolean
  is_active?: boolean
  is_locked?: boolean
  last_login?: boolean
  created_at?: boolean
  updated_at?: boolean
  role?: boolean | Prisma.roleDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.account$customerArgs<ExtArgs>
  employee?: boolean | Prisma.account$employeeArgs<ExtArgs>
  manager?: boolean | Prisma.account$managerArgs<ExtArgs>
  _count?: boolean | Prisma.AccountCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["account"]>

export type accountSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  account_id?: boolean
  role_id?: boolean
  username?: boolean
  password_hash?: boolean
  is_active?: boolean
  is_locked?: boolean
  last_login?: boolean
  created_at?: boolean
  updated_at?: boolean
  role?: boolean | Prisma.roleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["account"]>

export type accountSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  account_id?: boolean
  role_id?: boolean
  username?: boolean
  password_hash?: boolean
  is_active?: boolean
  is_locked?: boolean
  last_login?: boolean
  created_at?: boolean
  updated_at?: boolean
  role?: boolean | Prisma.roleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["account"]>

export type accountSelectScalar = {
  account_id?: boolean
  role_id?: boolean
  username?: boolean
  password_hash?: boolean
  is_active?: boolean
  is_locked?: boolean
  last_login?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type accountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"account_id" | "role_id" | "username" | "password_hash" | "is_active" | "is_locked" | "last_login" | "created_at" | "updated_at", ExtArgs["result"]["account"]>
export type accountInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  role?: boolean | Prisma.roleDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.account$customerArgs<ExtArgs>
  employee?: boolean | Prisma.account$employeeArgs<ExtArgs>
  manager?: boolean | Prisma.account$managerArgs<ExtArgs>
  _count?: boolean | Prisma.AccountCountOutputTypeDefaultArgs<ExtArgs>
}
export type accountIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  role?: boolean | Prisma.roleDefaultArgs<ExtArgs>
}
export type accountIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  role?: boolean | Prisma.roleDefaultArgs<ExtArgs>
}

export type $accountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "account"
  objects: {
    role: Prisma.$rolePayload<ExtArgs>
    customer: Prisma.$customerPayload<ExtArgs>[]
    employee: Prisma.$employeePayload<ExtArgs> | null
    manager: Prisma.$managerPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    account_id: number
    role_id: number
    username: string
    password_hash: string
    is_active: boolean | null
    is_locked: boolean
    last_login: Date | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["account"]>
  composites: {}
}

export type accountGetPayload<S extends boolean | null | undefined | accountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$accountPayload, S>

export type accountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<accountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccountCountAggregateInputType | true
  }

export interface accountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['account'], meta: { name: 'account' } }
  /**
   * Find zero or one Account that matches the filter.
   * @param {accountFindUniqueArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends accountFindUniqueArgs>(args: Prisma.SelectSubset<T, accountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Account that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {accountFindUniqueOrThrowArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends accountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, accountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Account that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {accountFindFirstArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends accountFindFirstArgs>(args?: Prisma.SelectSubset<T, accountFindFirstArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Account that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {accountFindFirstOrThrowArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends accountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, accountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Accounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {accountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Accounts
   * const accounts = await prisma.account.findMany()
   * 
   * // Get first 10 Accounts
   * const accounts = await prisma.account.findMany({ take: 10 })
   * 
   * // Only select the `account_id`
   * const accountWithAccount_idOnly = await prisma.account.findMany({ select: { account_id: true } })
   * 
   */
  findMany<T extends accountFindManyArgs>(args?: Prisma.SelectSubset<T, accountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Account.
   * @param {accountCreateArgs} args - Arguments to create a Account.
   * @example
   * // Create one Account
   * const Account = await prisma.account.create({
   *   data: {
   *     // ... data to create a Account
   *   }
   * })
   * 
   */
  create<T extends accountCreateArgs>(args: Prisma.SelectSubset<T, accountCreateArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Accounts.
   * @param {accountCreateManyArgs} args - Arguments to create many Accounts.
   * @example
   * // Create many Accounts
   * const account = await prisma.account.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends accountCreateManyArgs>(args?: Prisma.SelectSubset<T, accountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Accounts and returns the data saved in the database.
   * @param {accountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
   * @example
   * // Create many Accounts
   * const account = await prisma.account.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Accounts and only return the `account_id`
   * const accountWithAccount_idOnly = await prisma.account.createManyAndReturn({
   *   select: { account_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends accountCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, accountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Account.
   * @param {accountDeleteArgs} args - Arguments to delete one Account.
   * @example
   * // Delete one Account
   * const Account = await prisma.account.delete({
   *   where: {
   *     // ... filter to delete one Account
   *   }
   * })
   * 
   */
  delete<T extends accountDeleteArgs>(args: Prisma.SelectSubset<T, accountDeleteArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Account.
   * @param {accountUpdateArgs} args - Arguments to update one Account.
   * @example
   * // Update one Account
   * const account = await prisma.account.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends accountUpdateArgs>(args: Prisma.SelectSubset<T, accountUpdateArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Accounts.
   * @param {accountDeleteManyArgs} args - Arguments to filter Accounts to delete.
   * @example
   * // Delete a few Accounts
   * const { count } = await prisma.account.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends accountDeleteManyArgs>(args?: Prisma.SelectSubset<T, accountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {accountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Accounts
   * const account = await prisma.account.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends accountUpdateManyArgs>(args: Prisma.SelectSubset<T, accountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Accounts and returns the data updated in the database.
   * @param {accountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
   * @example
   * // Update many Accounts
   * const account = await prisma.account.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Accounts and only return the `account_id`
   * const accountWithAccount_idOnly = await prisma.account.updateManyAndReturn({
   *   select: { account_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends accountUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, accountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Account.
   * @param {accountUpsertArgs} args - Arguments to update or create a Account.
   * @example
   * // Update or create a Account
   * const account = await prisma.account.upsert({
   *   create: {
   *     // ... data to create a Account
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Account we want to update
   *   }
   * })
   */
  upsert<T extends accountUpsertArgs>(args: Prisma.SelectSubset<T, accountUpsertArgs<ExtArgs>>): Prisma.Prisma__accountClient<runtime.Types.Result.GetResult<Prisma.$accountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {accountCountArgs} args - Arguments to filter Accounts to count.
   * @example
   * // Count the number of Accounts
   * const count = await prisma.account.count({
   *   where: {
   *     // ... the filter for the Accounts we want to count
   *   }
   * })
  **/
  count<T extends accountCountArgs>(
    args?: Prisma.Subset<T, accountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Account.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccountAggregateArgs>(args: Prisma.Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

  /**
   * Group by Account.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {accountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends accountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: accountGroupByArgs['orderBy'] }
      : { orderBy?: accountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, accountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the account model
 */
readonly fields: accountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for account.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__accountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  role<T extends Prisma.roleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.roleDefaultArgs<ExtArgs>>): Prisma.Prisma__roleClient<runtime.Types.Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  customer<T extends Prisma.account$customerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.account$customerArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  employee<T extends Prisma.account$employeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.account$employeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  manager<T extends Prisma.account$managerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.account$managerArgs<ExtArgs>>): Prisma.Prisma__managerClient<runtime.Types.Result.GetResult<Prisma.$managerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the account model
 */
export interface accountFieldRefs {
  readonly account_id: Prisma.FieldRef<"account", 'Int'>
  readonly role_id: Prisma.FieldRef<"account", 'Int'>
  readonly username: Prisma.FieldRef<"account", 'String'>
  readonly password_hash: Prisma.FieldRef<"account", 'String'>
  readonly is_active: Prisma.FieldRef<"account", 'Boolean'>
  readonly is_locked: Prisma.FieldRef<"account", 'Boolean'>
  readonly last_login: Prisma.FieldRef<"account", 'DateTime'>
  readonly created_at: Prisma.FieldRef<"account", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"account", 'DateTime'>
}
    

// Custom InputTypes
/**
 * account findUnique
 */
export type accountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * Filter, which account to fetch.
   */
  where: Prisma.accountWhereUniqueInput
}

/**
 * account findUniqueOrThrow
 */
export type accountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * Filter, which account to fetch.
   */
  where: Prisma.accountWhereUniqueInput
}

/**
 * account findFirst
 */
export type accountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * Filter, which account to fetch.
   */
  where?: Prisma.accountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of accounts to fetch.
   */
  orderBy?: Prisma.accountOrderByWithRelationInput | Prisma.accountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for accounts.
   */
  cursor?: Prisma.accountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of accounts.
   */
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[]
}

/**
 * account findFirstOrThrow
 */
export type accountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * Filter, which account to fetch.
   */
  where?: Prisma.accountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of accounts to fetch.
   */
  orderBy?: Prisma.accountOrderByWithRelationInput | Prisma.accountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for accounts.
   */
  cursor?: Prisma.accountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of accounts.
   */
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[]
}

/**
 * account findMany
 */
export type accountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * Filter, which accounts to fetch.
   */
  where?: Prisma.accountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of accounts to fetch.
   */
  orderBy?: Prisma.accountOrderByWithRelationInput | Prisma.accountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing accounts.
   */
  cursor?: Prisma.accountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` accounts.
   */
  skip?: number
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[]
}

/**
 * account create
 */
export type accountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * The data needed to create a account.
   */
  data: Prisma.XOR<Prisma.accountCreateInput, Prisma.accountUncheckedCreateInput>
}

/**
 * account createMany
 */
export type accountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many accounts.
   */
  data: Prisma.accountCreateManyInput | Prisma.accountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * account createManyAndReturn
 */
export type accountCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * The data used to create many accounts.
   */
  data: Prisma.accountCreateManyInput | Prisma.accountCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * account update
 */
export type accountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * The data needed to update a account.
   */
  data: Prisma.XOR<Prisma.accountUpdateInput, Prisma.accountUncheckedUpdateInput>
  /**
   * Choose, which account to update.
   */
  where: Prisma.accountWhereUniqueInput
}

/**
 * account updateMany
 */
export type accountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update accounts.
   */
  data: Prisma.XOR<Prisma.accountUpdateManyMutationInput, Prisma.accountUncheckedUpdateManyInput>
  /**
   * Filter which accounts to update
   */
  where?: Prisma.accountWhereInput
  /**
   * Limit how many accounts to update.
   */
  limit?: number
}

/**
 * account updateManyAndReturn
 */
export type accountUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * The data used to update accounts.
   */
  data: Prisma.XOR<Prisma.accountUpdateManyMutationInput, Prisma.accountUncheckedUpdateManyInput>
  /**
   * Filter which accounts to update
   */
  where?: Prisma.accountWhereInput
  /**
   * Limit how many accounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * account upsert
 */
export type accountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * The filter to search for the account to update in case it exists.
   */
  where: Prisma.accountWhereUniqueInput
  /**
   * In case the account found by the `where` argument doesn't exist, create a new account with this data.
   */
  create: Prisma.XOR<Prisma.accountCreateInput, Prisma.accountUncheckedCreateInput>
  /**
   * In case the account was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.accountUpdateInput, Prisma.accountUncheckedUpdateInput>
}

/**
 * account delete
 */
export type accountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
  /**
   * Filter which account to delete.
   */
  where: Prisma.accountWhereUniqueInput
}

/**
 * account deleteMany
 */
export type accountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which accounts to delete
   */
  where?: Prisma.accountWhereInput
  /**
   * Limit how many accounts to delete.
   */
  limit?: number
}

/**
 * account.customer
 */
export type account$customerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customer
   */
  select?: Prisma.customerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customer
   */
  omit?: Prisma.customerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customerInclude<ExtArgs> | null
  where?: Prisma.customerWhereInput
  orderBy?: Prisma.customerOrderByWithRelationInput | Prisma.customerOrderByWithRelationInput[]
  cursor?: Prisma.customerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CustomerScalarFieldEnum | Prisma.CustomerScalarFieldEnum[]
}

/**
 * account.employee
 */
export type account$employeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * account.manager
 */
export type account$managerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the manager
   */
  select?: Prisma.managerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the manager
   */
  omit?: Prisma.managerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.managerInclude<ExtArgs> | null
  where?: Prisma.managerWhereInput
}

/**
 * account without action
 */
export type accountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the account
   */
  select?: Prisma.accountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the account
   */
  omit?: Prisma.accountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.accountInclude<ExtArgs> | null
}
